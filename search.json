[{"title":"algo-note","path":"/2024/04/08/algo-note/","content":"一、数据结构模板数组问题41. 缺失的第一个正整数给你一个未排序的整数数组 nums ，请你找出其中没有出现的最小的正整数。 请你实现时间复杂度为 O(n) 并且只使用常数级别额外空间的解决方案。 示例 1： 12输入：nums = [1,2,0]输出：3 示例 2： 12输入：nums = [3,4,-1,1]输出：2 示例 3： 12输入：nums = [7,8,9,11,12]输出：1 123456789101112131415161718192021222324class Solution &#123; public int firstMissingPositive(int[] nums) &#123; //最小的正整数，遍历 int len = nums.length; for (int i = 0; i &lt; len; i++) &#123; while (nums[i]&gt;0 &amp;&amp; nums[i]&lt;=len &amp;&amp; nums[i]!=nums[nums[i]-1])&#123; // 1 2 3 0 4 // - - - ! - // 4应该在下标3的位置 int j = nums[i] - 1; int temp = nums[i]; nums[i] = nums[j]; nums[j] = temp; &#125; &#125; for (int i = 0; i &lt; len; i++) &#123; if (nums[i]!=i+1)&#123; return i+1;//如果当前位置不存在对应的合理的值，就返回 &#125; &#125; return len+1; &#125;&#125; 链表问题146. LRU 缓存请你设计并实现一个满足 LRU (最近最少使用) 缓存 约束的数据结构。 实现 LRUCache 类： LRUCache(int capacity) 以 正整数 作为容量 capacity 初始化 LRU 缓存 int get(int key) 如果关键字 key 存在于缓存中，则返回关键字的值，否则返回 -1 。 void put(int key, int value) 如果关键字 key 已经存在，则变更其数据值 value ；如果不存在，则向缓存中插入该组 key-value 。如果插入操作导致关键字数量超过 capacity ，则应该 逐出 最久未使用的关键字。 函数 get 和 put 必须以 O(1) 的平均时间复杂度运行。 示例： 1234567891011121314151617输入[&quot;LRUCache&quot;, &quot;put&quot;, &quot;put&quot;, &quot;get&quot;, &quot;put&quot;, &quot;get&quot;, &quot;put&quot;, &quot;get&quot;, &quot;get&quot;, &quot;get&quot;][[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]输出[null, null, null, 1, null, -1, null, -1, 3, 4]解释LRUCache lRUCache = new LRUCache(2);lRUCache.put(1, 1); // 缓存是 &#123;1=1&#125;lRUCache.put(2, 2); // 缓存是 &#123;1=1, 2=2&#125;lRUCache.get(1); // 返回 1lRUCache.put(3, 3); // 该操作会使得关键字 2 作废，缓存是 &#123;1=1, 3=3&#125;lRUCache.get(2); // 返回 -1 (未找到)lRUCache.put(4, 4); // 该操作会使得关键字 1 作废，缓存是 &#123;4=4, 3=3&#125;lRUCache.get(1); // 返回 -1 (未找到)lRUCache.get(3); // 返回 3lRUCache.get(4); // 返回 4 要让 put 和 get 方法的时间复杂度为 O(1)，我们可以总结出 cache 这个数据结构必要的条件： 1、显然 cache 中的元素必须有时序，以区分最近使用的和久未使用的数据，当容量满了之后要删除最久未使用的那个元素腾位置。 2、我们要在 cache 中快速找某个 key 是否已存在并得到对应的 val； 3、每次访问 cache 中的某个 key，需要将这个元素变为最近使用的，也就是说 cache 要支持在任意位置快速插入和删除元素。 那么，什么数据结构同时符合上述条件呢？哈希表查找快，但是数据无固定顺序；链表有顺序之分，插入删除快，但是查找慢。所以结合一下，形成一种新的数据结构：哈希链表 LinkedHashMap。 12345678910111213141516171819202122232425262728293031323334class LRUCache &#123; int cap; LinkedHashMap&lt;Integer,Integer&gt; cache = new LinkedHashMap&lt;&gt;(); public LRUCache(int capacity) &#123; this.cap = capacity; &#125; public int get(int key) &#123; if(!cache.containsKey(key))&#123; return -1; &#125; int val = cache.get(key); cache.remove(key); cache.put(key,val);//再次插入就实现了最新的使用的标记 return cache.get(key); &#125; public void put(int key, int value) &#123; if(cache.containsKey(key))&#123; cache.put(key,value); int val = cache.get(key); cache.remove(key); cache.put(key,val);//再次插入 return; &#125; if(cache.size()&gt;=cap)&#123; //使用iterator()方法获取迭代器，可以遍历集合中的元素。next()方法用于返回下一个元素，即获取最早的键。 int oldestKey = cache.keySet().iterator().next(); cache.remove(oldestKey); &#125; cache.put(key,value); return; &#125;&#125; 用 LinkedHashMap 可以很容易实现 LRU 缓存，不过面试的时候估计这样不好，还是尽量自己实现数据结构吧🤣 主要想法是使用 JDK 提供的 HashMap，然后自己写一个 Node 节点类，用来保存 value ，并且通过这个 Node 里面的 prev、next 指针将各个值串联起来，这样就维护了顺序。 很重要的一个细节是，Node 里面还要加上 key （尽管 HashMap 本来就存了一份）。 原因是当缓存达到容量上限时，就要先移除尾部的节点，这个时候如果只移除链表的 tail 节点，忽略了 HasmMap 也要 remove ，后面再访问这个被移除的 key 就会造成空指针异常！！！ 所以我们在 Node 节点里面加上 key ，删掉 tail 之前先 remove 掉 HasmMap 的这个 key，就很方便了。 不适用LinkedList: 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576import java.util.*;public class Solution &#123; private int capacity; private Map&lt;Integer,Node&gt; map; private Node head; private Node tail; private int used; class Node&#123; int key; int value; Node prev; Node next; Node(int key,int value,Node prev,Node next)&#123; this.key = key; this.value = value; this.prev = prev; this.next = next; &#125; &#125; public Solution(int capacity) &#123; //构造函数 this.capacity = capacity; this.map = new HashMap&lt;&gt;(); this.used= 0; &#125; public int get(int key) &#123; // write code here if(!map.containsKey(key))&#123; return -1; &#125; makeRecently(key); return map.get(key).value; &#125; public void set(int key, int value) &#123; // write code here if(map.containsKey(key))&#123; map.get(key).value = value; makeRecently(key); return; &#125; if(used==capacity)&#123; map.remove(tail.key); tail = tail.prev; tail.next = null; used--; &#125; if(head==null)&#123; head = new Node(key,value,null,null); tail = head; &#125; else&#123; //head不为空 Node t = new Node(key,value,null,head); head.prev = t; head = t; &#125; map.put(key,head); used++; &#125; private void makeRecently(int key)&#123; Node t = map.get(key); if(t!=head)&#123; if(t==tail)&#123; tail = tail.prev; tail.next = null; &#125;else&#123; t.prev.next = t.next;//将t跳过了 t.next.prev = t.prev;//将next的向前指的顺序纠正 &#125; t.prev = null; t.next = head; head.prev = t; head =t; &#125; &#125;&#125; 实现一个cache，包括LRU算法和在x秒后过期1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192import java.util.LinkedHashMap; import java.util.Map; import java.util.concurrent.ScheduledExecutorService; import java.util.concurrent.Executors; import java.util.concurrent.TimeUnit; public class LRUCacheWithExpiration&lt;K, V&gt; &#123; // 缓存的最大容量 private final int capacity; // 缓存项的过期时间（秒） private final long expirationTimeInSeconds; // 使用LinkedHashMap实现LRU缓存，accessOrder设置为true以启用LRU顺序 private final LinkedHashMap&lt;K, CacheEntry&lt;V&gt;&gt; cacheMap; // 定时任务执行器，用于清理过期的缓存项 private final ScheduledExecutorService expirationExecutor; // 内部类CacheEntry，用于存储缓存值和过期时间 private static class CacheEntry&lt;V&gt; &#123; V value; long expirationTime; CacheEntry(V value, long expirationTime) &#123; this.value = value; this.expirationTime = expirationTime; &#125; &#125; // 构造函数 public LRUCacheWithExpiration(int capacity, long expirationTimeInSeconds) &#123; this.capacity = capacity; this.expirationTimeInSeconds = expirationTimeInSeconds; // 初始化LRU缓存，设置accessOrder为true，以便按访问顺序进行LRU操作 this.cacheMap = new LinkedHashMap&lt;&gt;(capacity, 0.75f, true) &#123; // 重写removeEldestEntry方法，当Map大小超过指定容量时，删除最老的元素 @Override protected boolean removeEldestEntry(Map.Entry&lt;K, CacheEntry&lt;V&gt;&gt; eldest) &#123; return size() &gt; LRUCacheWithExpiration.this.capacity; &#125; &#125;; // 初始化定时任务执行器 this.expirationExecutor = Executors.newSingleThreadScheduledExecutor(); // 安排定时任务，每隔expirationTimeInSeconds秒执行一次清理过期缓存项的操作 this.expirationExecutor.scheduleAtFixedRate(this::evictExpiredEntries, expirationTimeInSeconds, expirationTimeInSeconds, TimeUnit.SECONDS); &#125; // 获取缓存项 public synchronized V get(K key) &#123; CacheEntry&lt;V&gt; entry = cacheMap.get(key); if (entry == null || isExpired(entry.expirationTime)) &#123; // 缓存项不存在或已过期，返回null return null; &#125; // 更新缓存项的访问顺序（移到尾部，表示最近访问） cacheMap.remove(key); cacheMap.put(key, entry); // 返回缓存值 return entry.value; &#125; // 添加或更新缓存项 public synchronized void put(K key, V value) &#123; // 创建新的缓存项，设置过期时间 CacheEntry&lt;V&gt; newEntry = new CacheEntry&lt;&gt;(value, System.currentTimeMillis() + (expirationTimeInSeconds * 1000)); // 将新的缓存项添加到LRU缓存中，如果缓存已满，则会自动删除最老的元素 cacheMap.put(key, newEntry); &#125; // 清理过期缓存项的方法 private void evictExpiredEntries() &#123; long currentTime = System.currentTimeMillis(); // 遍历缓存，移除已过期的缓存项 cacheMap.entrySet().removeIf(entry -&gt; isExpired(entry.getValue().expirationTime)); &#125; // 判断缓存项是否过期 private boolean isExpired(long expirationTime) &#123; return expirationTime &lt;= System.currentTimeMillis(); &#125; // 关闭缓存，停止定时任务执行器 public void close() &#123; expirationExecutor.shutdown(); try &#123; if (!expirationExecutor.awaitTermination(60, TimeUnit.SECONDS)) &#123; expirationExecutor.shutdownNow(); &#125; &#125; catch (InterruptedException e) &#123; expirationExecutor.shutdownNow(); Thread.currentThread().interrupt(); &#125; &#125; &#125; 61. 旋转链表给你一个链表的头节点 head ，旋转链表，将链表每个节点向右移动 k 个位置。 示例 1： 12输入：head = [1,2,3,4,5], k = 2输出：[4,5,1,2,3] 123456789101112131415161718192021222324252627class Solution &#123; public ListNode rotateRight(ListNode head, int k) &#123; if(head==null) return head; int n = 1; ListNode tail = head; while(tail.next!=null)&#123; tail = tail.next; n++;// length &#125; k = k%n;//防止重复移动 if(k&lt;1) return head; ListNode fast = head; ListNode slow = head; while(k--&gt;0)&#123; fast = fast.next; &#125; while(fast.next!=null)&#123; fast= fast.next; slow = slow.next; &#125; ListNode newHead = slow.next; slow.next = null; tail.next = head; return newHead; &#125;&#125; 138. 随机链表的复制给你一个长度为 n 的链表，每个节点包含一个额外增加的随机指针 random ，该指针可以指向链表中的任何节点或空节点。 构造这个链表的 深拷贝。 深拷贝应该正好由 n 个 全新 节点组成，其中每个新节点的值都设为其对应的原节点的值。新节点的 next 指针和 random 指针也都应指向复制链表中的新节点，并使原链表和复制链表中的这些指针能够表示相同的链表状态。复制链表中的指针都不应指向原链表中的节点 。 例如，如果原链表中有 X 和 Y 两个节点，其中 X.random --&gt; Y 。那么在复制链表中对应的两个节点 x 和 y ，同样有 x.random --&gt; y 。 返回复制链表的头节点。 用一个由 n 个节点组成的链表来表示输入&#x2F;输出中的链表。每个节点用一个 [val, random_index] 表示： val：一个表示 Node.val 的整数。 random_index：随机指针指向的节点索引（范围从 0 到 n-1）；如果不指向任何节点，则为 null 。 你的代码 只 接受原链表的头节点 head 作为传入参数。 示例 1： 12输入：head = [[7,null],[13,0],[11,4],[10,2],[1,0]]输出：[[7,null],[13,0],[11,4],[10,2],[1,0]] 利用哈希表的查询特点，考虑构建 原链表节点 和 新链表对应节点 的键值对映射关系，再遍历构建新链表各节点的 next 和 random 引用指向即可。 算法流程： 若头节点 head 为空节点，直接返回 null 。 初始化： 哈希表 dic ， 节点 cur 指向头节点。 复制链表：建立新节点，并向 dic 添加键值对 (原 cur 节点, 新 cur 节点） 。cur 遍历至原链表下一节点。 构建新链表的引用指向：构建新节点的 next 和 random 引用指向。cur 遍历至原链表下一节点。 返回值： 新链表的头节点 dic[cur] 。 12345678910111213141516171819class Solution &#123; public Node copyRandomList(Node head) &#123; if(head==null) return null; Node cur = head; Map&lt;Node,Node&gt; map = new HashMap&lt;&gt;(); while(cur!=null)&#123; //map storage the new Node map.put(cur,new Node(cur.val)); cur = cur.next; &#125; cur = head; while(cur!=null)&#123; map.get(cur).next = map.get(cur.next); map.get(cur).random = map.get(cur.random); cur = cur.next; &#125; return map.get(head); &#125;&#125; 剑指 Offer II 025. 链表中的两数相加给定两个 非空链表 l1和 l2 来代表两个非负整数。数字最高位位于链表开始位置。它们的每个节点只存储一位数字。将这两数相加会返回一个新的链表。 可以假设除了数字 0 之外，这两个数字都不会以零开头。 示例1： 12输入：l1 = [7,2,4,3], l2 = [5,6,4]输出：[7,8,0,7] 12345678910111213141516171819202122232425262728class Solution &#123; public ListNode addTwoNumbers(ListNode l1, ListNode l2) &#123;// 使用两个辅助栈 ArrayDeque&lt;Integer&gt; stk1 = new ArrayDeque&lt;&gt;(); ArrayDeque&lt;Integer&gt; stk2 = new ArrayDeque&lt;&gt;(); while (l1!=null)&#123; stk1.push(l1.val); l1 = l1.next; &#125; while (l2!=null)&#123; stk2.push(l2.val); l2 = l2.next; &#125; int carry = 0;//储存进位 ListNode res = null;//储存结果 while (!stk1.isEmpty()||!stk2.isEmpty()||carry!=0) &#123; int digit1 = stk1.isEmpty()?0:stk1.pop(); int digit2 = stk2.isEmpty()?0:stk2.pop(); int sum = digit1+digit2+carry; carry = sum/10; sum = sum%10; ListNode tmp = new ListNode(sum); tmp.next = res; res = tmp; &#125; return res; &#125;&#125; 25. K 个一组翻转链表给你链表的头节点 head ，每 k 个节点一组进行翻转，请你返回修改后的链表。 k 是一个正整数，它的值小于或等于链表的长度。如果节点总数不是 k 的整数倍，那么请将最后剩余的节点保持原有顺序。 你不能只是单纯的改变节点内部的值，而是需要实际进行节点交换。 示例 1： 12输入：head = [1,2,3,4,5], k = 2输出：[2,1,4,3,5] 123456789101112131415161718192021222324class Solution &#123; public ListNode reverseKGroup(ListNode head, int k) &#123; if (head==null||head.next ==null) return head; ListNode tail = head; for(int i = 0;i&lt;k;i++)&#123; if(tail==null) return head; tail = tail.next; &#125; ListNode newHead = reverse(head,tail); head.next = reverseKGroup(tail,k); return newHead; &#125; private ListNode reverse(ListNode head,ListNode tail)&#123; ListNode prev = null; ListNode next = null; while(head!=tail)&#123; next = head.next; head.next = prev; prev = head; head = next; &#125; return prev;//返回头部，就是反转的头部了 &#125;&#125; 剑指 Offer II 026. 重排链表给定一个单链表 L 的头节点 head ，单链表 L 表示为： L0 → L1 → … → Ln-1 → Ln请将其重新排列后变为： 1L0 → Ln → L1 → Ln-1 → L2 → Ln-2 → … 不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。 示例 1: 12输入: head = [1,2,3,4]输出: [1,4,2,3] 1234567891011121314151617181920212223242526272829class Solution &#123; public void reorderList(ListNode head) &#123; ////将主链表划分为 前一段子链表和后一段子链表， // 对于后一段子链表进行翻转，同时对于这两条链表进行重构; ArrayDeque&lt;ListNode&gt; deque = new ArrayDeque&lt;ListNode&gt;(); ListNode dummy = new ListNode(-1); dummy.next = head; while (head!=null) &#123; ListNode next = head.next; head.next = null; deque.add(head); head = next; &#125; ListNode curr = dummy; while (!deque.isEmpty()) &#123; ListNode start = deque.pollFirst(); curr.next = start; //循环遍历deque双端，直至队列为空 if (!deque.isEmpty())&#123; ListNode last = deque.pollLast(); start.next = last;//curr-》start-》last curr = last;//curr专程last &#125;else &#123; start.next = null; &#125; &#125; return; &#125;&#125; 两个链表合并1234567891011121314151617181920public ListNode mergeTwoLists(ListNode a, ListNode b) &#123; if (a == null || b == null) &#123; return a != null ? a : b; &#125; ListNode head = new ListNode(0); ListNode tail = head, la = a, lb = b; while (la != null &amp;&amp; lb != null) &#123; if (la.val &lt; lb.val) &#123; tail.next = la; la = la.next; &#125; else &#123; tail.next = lb; lb = lb.next; &#125; tail = tail.next; &#125; tail.next = (la != null ? la : lb); return head.next;&#125; 多个链表合并可以遍历， 1234567public ListNode mergeKLists(ListNode[] lists) &#123; ListNode ans = null; for (ListNode list : lists) &#123; ans = mergeTwoLists(ans,list); &#125; return ans;&#125; 92. 反转链表 II给你单链表的头指针 head 和两个整数 left 和 right ，其中 left &lt;= right 。请你反转从位置 left 到位置 right 的链表节点，返回 反转后的链表 。 示例 1： 12输入：head = [1,2,3,4,5], left = 2, right = 4输出：[1,4,3,2,5] 示例 2： 12输入：head = [5], left = 1, right = 1输出：[5] 提示： 链表中节点数目为 n 1 &lt;= n &lt;= 500 -500 &lt;= Node.val &lt;= 500 1 &lt;= left &lt;= right &lt;= n 12345678910111213141516171819202122class Solution &#123; public ListNode reverseBetween(ListNode head, int left, int right) &#123; ListNode dummy = new ListNode(-1,head); ListNode prev = dummy; ListNode curr = head; //直接找到对应的位置，然后再切断再反转再接上 for (int i = 1; i &lt; left; i++) &#123; prev = curr; curr = curr.next; &#125; for (int i = 0; i &lt; right - left; i++) &#123; ListNode tmp = curr.next; curr.next = tmp.next;//curr指向tmp后面 tmp.next = prev.next;//把tmp接龙，接到要逆向的prev的后面 prev.next = tmp;//这三部=部分不能调换顺序，因为curr要用tmp //tmp要用prev，最后才可以切换prev的next &#125; return dummy.next; &#125;&#125; 栈的使用42. 接雨水给定 n 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。 示例 1： 123输入：height = [0,1,0,2,1,0,1,3,2,1,2,1]输出：6解释：上面是由数组 [0,1,0,2,1,0,1,3,2,1,2,1] 表示的高度图，在这种情况下，可以接 6 个单位的雨水（蓝色部分表示雨水）。 示例 2： 12输入：height = [4,2,0,3,2,5]输出：9 123456789101112131415161718192021222324class Solution &#123; public int trap(int[] height) &#123; int count = 0; ArrayDeque&lt;Integer&gt; stack = new ArrayDeque&lt;&gt;(); //维持一个递减的栈，递增了显然就是有一个坑 for (int i = 0; i &lt; height.length; i++) &#123; while (!stack.isEmpty() &amp;&amp; height[stack.peek()]&lt;height[i])&#123; //出现递增的时候 int popped = stack.pop(); while (!stack.isEmpty() &amp;&amp; height[popped]==height[stack.peek()]) stack.pop();//继续弹出去 //Att:如果此时stack为空了，说明当前凹槽没有左边边界，不得行 if (!stack.isEmpty())&#123; int min = Math.min(height[stack.peek()], height[i]); //stack可以一直往左边吐，吐到和当前凹槽不相等的地方，所以计算宽度用的peek-1； count+=(min-height[popped])*(i- stack.peek()-1); &#125; &#125; stack.push(i); &#125; return count; &#125;&#125; 逆波兰算法剑指 Offer II 036. 后缀表达式根据 逆波兰表示法，求该后缀表达式的计算结果。 有效的算符包括 +、-、*、/ 。每个运算对象可以是整数，也可以是另一个逆波兰表达式。 说明： 整数除法只保留整数部分。 给定逆波兰表达式总是有效的。换句话说，表达式总会得出有效数值且不存在除数为 0 的情况。 示例 1： 123输入：tokens = [&quot;2&quot;,&quot;1&quot;,&quot;+&quot;,&quot;3&quot;,&quot;*&quot;]输出：9解释：该算式转化为常见的中缀算术表达式为：((2 + 1) * 3) = 9 逆波兰表达式： 逆波兰表达式是一种后缀表达式，所谓后缀就是指算符写在后面。 平常使用的算式则是一种中缀表达式，如 ( 1 + 2 ) * ( 3 + 4 ) 。该算式的逆波兰表达式写法为 ( ( 1 2 + ) ( 3 4 + ) * ) 。逆波兰表达式主要有以下两个优点： 去掉括号后表达式无歧义，上式即便写成 1 2 + 3 4 + * 也可以依据次序计算出正确结果。适合用栈操作运算：遇到数字则入栈；遇到算符则取出栈顶两个数字进行计算，并将结果压入栈中。 12345678910111213141516171819202122232425262728293031323334353637class Solution &#123; public int evalRPN(String[] tokens) &#123; Deque&lt;Integer&gt; stack = new LinkedList&lt;&gt;(); for(int i = 0;i&lt;tokens.length;i++)&#123; String token = tokens[i]; if(isNumber(token)) &#123; stack.push(Integer.parseInt(token));//压入数字到栈厘米 &#125;else&#123; int num2 = stack.pop(); int num1 = stack.pop();//弹出两个就是数组 switch(token)&#123; case &quot;+&quot;:&#123; stack.push(num1+num2); break; &#125; case &quot;-&quot;:&#123; stack.push(num1-num2); break; &#125; case &quot;*&quot;:&#123; stack.push(num1*num2); break; &#125; case &quot;/&quot;:&#123; stack.push(num1/num2); break; &#125; &#125; &#125; &#125; return stack.pop(); &#125; public boolean isNumber(String s)&#123; return !(&quot;+&quot;.equals(s)||&quot;-&quot;.equals(s)||&quot;*&quot;.equals(s)||&quot;/&quot;.equals(s)); // 既不是加减乘除就是对的数字了 &#125;&#125; 你想哈，这个数字可能是几百上千的，所以我们不能说用判断0到9就行了 32. 最长有效括号-栈存储给你一个只包含 &#39;(&#39; 和 &#39;)&#39; 的字符串，找出最长有效（格式正确且连续）括号子串的长度。 示例 1： 123输入：s = &quot;(()&quot;输出：2解释：最长有效括号子串是 &quot;()&quot; 示例 2： 123输入：s = &quot;)()())&quot;输出：4解释：最长有效括号子串是 &quot;()()&quot; 示例 3： 12输入：s = &quot;&quot;输出：0 提示： 0 &lt;= s.length &lt;= 3 * 104 s[i] 为 &#39;(&#39; 或 &#39;)&#39; 遍历字符串：接着，遍历字符串的每个字符： 如果遇到左括号 ‘(‘，将它的索引压入栈中。如果遇到右括号 ‘)’：首先弹出栈顶元素，表示匹配了一个左括号。如果栈变空了，将当前右括号的索引压入栈中。如果栈不为空，计算当前有效子串的长度，即 当前索引 - 栈顶元素，并更新最大长度。 123456789101112131415161718192021222324import java.util.ArrayDeque;//leetcode submit region begin(Prohibit modification and deletion)class Solution &#123; public int longestValidParentheses(String s) &#123; if (s.length()&lt;1) return 0; int ans = 0; ArrayDeque&lt;Integer&gt; stack = new ArrayDeque&lt;&gt;(); stack.push(-1); int count = 0; for (int i = 0; i &lt; s.length(); i++) &#123; if (s.charAt(i)==&#x27;(&#x27;)&#123; stack.push(i);//左边的就存入 &#125; else &#123; stack.pop(); //peek存的是没有配对的最小的元素 if (!stack.isEmpty()) ans = Math.max(ans,i-stack.peek()); else stack.push(i); &#125; &#125; return ans; &#125;&#125; 哈希算法290. 单词规律给定一种规律 pattern 和一个字符串 s ，判断 s 是否遵循相同的规律。 这里的 遵循 指完全匹配，例如， pattern 里的每个字母和字符串 s 中的每个非空单词之间存在着双向连接的对应规律。 示例1: 12输入: pattern = &quot;abba&quot;, s = &quot;dog cat cat dog&quot;输出: true 示例 2: 12输入:pattern = &quot;abba&quot;, s = &quot;dog cat cat fish&quot;输出: false 示例 3: 12输入: pattern = &quot;aaaa&quot;, s = &quot;dog cat cat dog&quot;输出: false 提示: 1 &lt;= pattern.length &lt;= 300 pattern 只包含小写英文字母 1 &lt;= s.length &lt;= 3000 s 只包含小写英文字母和 &#39; &#39; s 不包含 任何前导或尾随对空格 s 中每个单词都被 单个空格 分隔 1234567891011121314151617181920212223242526class Solution &#123; public boolean wordPattern(String pattern, String s) &#123; //一个单词就是一个组合 String[] strings = s.split(&quot; &quot;); HashMap&lt;Character, String&gt; map = new HashMap&lt;&gt;(); if (pattern.length()!=strings.length)&#123; return false; &#125; for (int i = 0; i &lt; pattern.length(); i++) &#123; char key = pattern.charAt(i); if (map.containsKey(key))&#123; //如果遇到过这个key if (!map.get(key).equals(strings[i]))&#123; return false; &#125; &#125;else &#123; //没有遇到过的话，就要看这个s里面是不是有匹配的key了 if (map.containsValue(strings[i]))&#123; return false;//如果有匹配的了，那就罪过了 &#125; map.put(key,strings[i]); &#125; &#125; return true; &#125;&#125; 36. 有效的数独请你判断一个 9 x 9 的数独是否有效。只需要 根据以下规则 ，验证已经填入的数字是否有效即可。 数字 1-9 在每一行只能出现一次。 数字 1-9 在每一列只能出现一次。 数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。（请参考示例图） 注意： 一个有效的数独（部分已被填充）不一定是可解的。 只需要根据以上规则，验证已经填入的数字是否有效即可。 空白格用 &#39;.&#39; 表示。 示例 1： 1234567891011输入：board = [[&quot;5&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;,&quot;9&quot;,&quot;5&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;9&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;],[&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;3&quot;],[&quot;4&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;],[&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;],[&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;8&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;4&quot;,&quot;1&quot;,&quot;9&quot;,&quot;.&quot;,&quot;.&quot;,&quot;5&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;9&quot;]]输出：true 1234567891011121314151617181920212223242526272829class Solution &#123; public boolean isValidSudoku(char[][] board) &#123; //给数独编号 Map&lt;Integer, Set&lt;Integer&gt;&gt; row = new HashMap&lt;&gt;(),col = new HashMap&lt;&gt;(),area = new HashMap&lt;&gt;(); //加入三个HashMap for (int i = 0; i &lt; 9; i++) &#123; row.put(i,new HashSet&lt;&gt;()); col.put(i,new HashSet&lt;&gt;()); area.put(i,new HashSet&lt;&gt;()); &#125; for (int i = 0; i &lt; 9; i++) &#123; for (int j = 0; j &lt; 9; j++) &#123; //读取9*9的各个 char c = board[i][j]; if (c==&#x27;.&#x27;) continue; int u = c-&#x27;0&#x27;; int areaIdx=i/3 * 3+j/3; if (row.get(i).contains(u)|| col.get(j).contains(u)|| area.get(areaIdx).contains(u)) return false; row.get(i).add(u);//给每个元素加上 col.get(j).add(u); area.get(areaIdx).add(u); &#125; &#125; return true; &#125;&#125; 1. 两数之和给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。 你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。 示例: 给定 nums &#x3D; [2, 7, 11, 15], target &#x3D; 9 因为 nums[0] + nums[1] &#x3D; 2 + 7 &#x3D; 9 所以返回 [0, 1] map中的存储结构为 {key：数据元素，value：数组元素对应的下标}。在遍历数组的时候，只需要向map去查询是否有和目前遍历元素匹配的数值，如果有，就找到的匹配对，如果没有，就把目前遍历的元素放进map中，因为map存放的就是我们访问过的元素。 123456789101112131415class Solution &#123; public int[] twoSum(int[] nums, int target) &#123; int[] ans = new int[2]; if(nums==null||nums.length==0) return ans; HashMap&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;(); for (int i = 0; i &lt; nums.length; i++) &#123; int tmp =target-nums[i]; if(map.containsKey(tmp)) &#123; return new int[]&#123;i,map.get(tmp)&#125;; &#125; map.put(nums[i],i); &#125; return ans; &#125;&#125; 四数之和II力扣题目链接 给定四个包含整数的数组列表 A , B , C , D ,计算有多少个元组 (i, j, k, l) ，使得 A[i] + B[j] + C[k] + D[l] &#x3D; 0。 为了使问题简单化，所有的 A, B, C, D 具有相同的长度 N，且 0 ≤ N ≤ 500 。所有整数的范围在 -2^28 到 2^28 - 1 之间，最终结果不会超过 2^31 - 1 。 例如: 输入: A &#x3D; [ 1, 2] B &#x3D; [-2,-1] C &#x3D; [-1, 2] D &#x3D; [ 0, 2] 输出: 2 实际就是化简为两个数之和 123456789101112131415161718192021class Solution &#123; public int fourSumCount(int[] nums1, int[] nums2, int[] nums3, int[] nums4) &#123; HashMap&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;(); int ans = 0; for (int i : nums1) &#123; for (int j : nums2) &#123; int tmp = i + j; map.put(tmp,map.getOrDefault(tmp,0)+1); &#125; &#125; for (int i : nums3) &#123; for (int j : nums4) &#123; int tmp = i + j; // 直接寻找相对的数是否存在，存在就直接可以算作是一组数，几个value就是几组 if (map.containsKey(0-tmp)) ans+=map.get(0-tmp); &#125; &#125; return ans; &#125;&#125; 哈希法求解不含重复字串12345678910111213141516171819class Solution &#123; public int lengthOfLongestSubstring(String s) &#123; HashMap&lt;Character, Integer&gt; map = new HashMap&lt;&gt;(); int ans = 0; int j = 0; // p w w e k // j i //找到w上一次的位置设置为最长子串的起始点。 if (s.length()==1) return 1; for (int i = 0; i &lt; s.length(); i++) &#123; if (map.containsKey(s.charAt(i)))&#123; j = Math.max(j,map.get(s.charAt(i))+1); &#125; map.put(s.charAt(i),i); ans = Math.max(ans,i-j+1); &#125; return ans; &#125;&#125; 给定一个字符串数组 strs ，将 变位词 组合在一起。 可以按任意顺序返回结果列表。 注意：若两个字符串中每个字符出现的次数都相同，则称它们互为变位词。 示例 1: 12输入: strs = [&quot;eat&quot;, &quot;tea&quot;, &quot;tan&quot;, &quot;ate&quot;, &quot;nat&quot;, &quot;bat&quot;]输出: [[&quot;bat&quot;],[&quot;nat&quot;,&quot;tan&quot;],[&quot;ate&quot;,&quot;eat&quot;,&quot;tea&quot;]] 由于互为字母异位词的两个字符串包含的字母相同，因此对两个字符串分别进行排序之后得到的字符串一定是相同的，故可以将排序之后的字符串作为哈希表的键。 123456789101112131415class Solution &#123; public List&lt;List&lt;String&gt;&gt; groupAnagrams(String[] strs) &#123; HashMap&lt;String, List&lt;String&gt;&gt; map = new HashMap&lt;&gt;();// map存放排好序了的string的数组 for (String str : strs) &#123; char[] chars = str.toCharArray(); Arrays.sort(chars); String s = new String(chars);//将排好序的重新转化成string List&lt;String&gt; path = map.getOrDefault(s, new ArrayList&lt;&gt;());//取出来s对应的list， path.add(str); map.put(s,path);//重新再放回去 &#125; return new ArrayList&lt;List&lt;String&gt;&gt;(map.values()); &#125;&#125; 249. 移位字符串分组给定一个字符串，对该字符串可以进行 “移位” 的操作，也就是将字符串中每个字母都变为其在字母表中后续的字母，比如：&quot;abc&quot; -&gt; &quot;bcd&quot;。这样，我们可以持续进行 “移位” 操作，从而生成如下移位序列： 1&quot;abc&quot; -&gt; &quot;bcd&quot; -&gt; ... -&gt; &quot;xyz&quot; 给定一个包含仅小写字母字符串的列表，将该列表中所有满足 “移位” 操作规律的组合进行分组并返回。 示例： 1234567891011输入：[&quot;abc&quot;, &quot;bcd&quot;, &quot;acef&quot;, &quot;xyz&quot;, &quot;az&quot;, &quot;ba&quot;, &quot;a&quot;, &quot;z&quot;]输出：[ [&quot;abc&quot;,&quot;bcd&quot;,&quot;xyz&quot;], [&quot;az&quot;,&quot;ba&quot;], [&quot;acef&quot;], [&quot;a&quot;,&quot;z&quot;]]解释：可以认为字母表首尾相接，所以 &#x27;z&#x27; 的后续为 &#x27;a&#x27;，所以 [&quot;az&quot;,&quot;ba&quot;] 也满足 “移位” 操作规律。az 0 25bz 123456789101112131415161718class Solution &#123; public List&lt;List&lt;String&gt;&gt; groupStrings(String[] strings) &#123; if (strings==null || strings.length==0) return new ArrayList&lt;&gt;(); HashMap&lt;String, List&lt;String&gt;&gt; map = new HashMap&lt;&gt;();//存储 for (String string : strings) &#123; StringBuilder sb = new StringBuilder(); for (char c : string.toCharArray()) &#123; sb.append(&quot;#&quot;); int shift = (c-string.charAt(0)+26)%26; sb.append(shift); &#125; String key = sb.toString(); if (!map.containsKey(key)) map.put(key,new ArrayList&lt;String&gt;()); map.get(key).add(string); &#125; return new ArrayList&lt;&gt;(map.values()); &#125;&#125; 12345678HashMap&lt;String,List&lt;String&gt;&gt; map = new HashMap&lt;&gt;();for(String s:strings)&#123; StringBuilder sb = new StringBuilder(); for(char c:s.toCharArray())&#123; sb.append(&quot;#&quot;); int shift = (c-s.charAt(0)+26)%26; &#125;&#125; 记录移动的位置的时候，存储有一个循环的 时候我们可以加一个26再对26取一个模 int shift = (c-string.charAt(0)+26)%26; 就可以实现循环了，比如az就是ba的相似的 单调栈通常是一维数组，要寻找任一个元素的右边或者左边第一个比自己大或者小的元素的位置，此时我们就要想到可以用单调栈了。时间复杂度为O(n)。 例如本题其实就是找找到一个元素右边第一个比自己大的元素，此时就应该想到用单调栈了。 那么单调栈的原理是什么呢？为什么时间复杂度是O(n)就可以找到每一个元素的右边第一个比它大的元素位置呢？ 单调栈的本质是空间换时间，因为在遍历的过程中需要用一个栈来记录右边第一个比当前元素高的元素，优点是整个数组只需要遍历一次。 更直白来说，就是用一个栈来记录我们遍历过的元素，因为我们遍历数组的时候，我们不知道之前都遍历了哪些元素，以至于遍历一个元素找不到是不是之前遍历过一个更小的，所以我们需要用一个容器（这里用单调栈）来记录我们遍历过的元素。 在使用单调栈的时候首先要明确如下几点： 单调栈里存放的元素是什么？ 单调栈里只需要存放元素的下标i就可以了，如果需要使用对应的元素，直接T[i]就可以获取。 单调栈里元素是递增呢？ 还是递减呢？ 顺序的描述为 从栈头到栈底的顺序，从左到右或者从前到后， 这里我们要使用递增循序（再强调一下是指从栈头到栈底的顺序），因为只有递增的时候，栈里要加入一个元素i的时候，才知道栈顶元素在数组中右面第一个比栈顶元素大的元素是i。 即：如果求一个元素右边第一个更大元素，单调栈就是递增的，如果求一个元素右边第一个更小元素，单调栈就是递减的。 文字描述理解起来有点费劲，接下来我画了一系列的图，来讲解单调栈的工作过程，大家再去思考，本题为什么是递增栈。 使用单调栈主要有三个判断条件。 当前遍历的元素T[i]小于栈顶元素T[st.top()]的情况 当前遍历的元素T[i]等于栈顶元素T[st.top()]的情况 当前遍历的元素T[i]大于栈顶元素T[st.top()]的情况 天气：给定一个整数数组 temperatures ，表示每天的温度，返回一个数组 answer ，其中 answer[i] 是指对于第 i 天，下一个更高温度出现在几天后。如果气温在这之后都不会升高，请在该位置用 0 来代替。 123456789101112示例 1:输入: temperatures = [73,74,75,71,69,72,76,73]输出: [1,1,4,2,1,1,0,0]示例 2:输入: temperatures = [30,40,50,60]输出: [1,1,1,0]示例 3:输入: temperatures = [30,60,90]输出: [1,1,0] 123456789101112131415161718class Solution &#123; public int[] dailyTemperatures(int[] temperatures) &#123; int[] ans = new int[temperatures.length]; // 单调栈，遍历递增循序（再强调一下是指从栈头到栈底的顺序）， // 因为只有递增的时候，栈里要加入一个元素i的时候， // 才知道栈顶元素在数组中右面第一个比栈顶元素大的元素是i。 ArrayDeque&lt;Integer&gt; deque = new ArrayDeque&lt;&gt;(); deque.push(0);//就是在队列的左边，头部，加入了初始的0 for (int i = 1; i &lt; temperatures.length; i++) &#123; while (!deque.isEmpty() &amp;&amp; temperatures[i]&gt;temperatures[deque.peek()])&#123; ans[deque.peek()] = i - deque.peek(); // 最右边的 deque.pop(); &#125; deque.push(i); &#125; return ans; &#125;&#125; 滑动窗口局部最大值123456789101112输入: nums = [1,3,-1,-3,5,3,6,7], 和 k = 3 输出: [3,3,5,5,6,7] 解释: 滑动窗口的位置 最大值--------------- -----[1 3 -1] -3 5 3 6 7 3 1 [3 -1 -3] 5 3 6 7 3 1 3 [-1 -3 5] 3 6 7 5 1 3 -1 [-3 5 3] 6 7 5 1 3 -1 -3 [5 3 6] 7 6 1 3 -1 -3 5 [3 6 7] 7 这一题是滑动窗口，所以单调栈的构造需要确定是不是在k的范围内， 123456789101112131415161718192021222324class Solution &#123; public int[] maxSlidingWindow(int[] nums, int k) &#123; int[] ans = new int[nums.length - k + 1]; LinkedList&lt;Integer&gt; queue = new LinkedList&lt;&gt;(); //准备单调队列 for (int right = 0; right &lt; nums.length; right++) &#123;// 队首元素就是该窗口内的最大值。 while (!queue.isEmpty() &amp;&amp; nums[right]&gt;=nums[queue.peekLast()]) &#123; queue.removeLast();// 非空的时候，如果信赖的比queue顶部的元素大的话，就移走这个 &#125; queue.addLast(right);// 如果首部坐标小于left，那么就删除这个 int left = right-k+1;//此时这个left实际也就是依次递增的 if (queue.peekFirst()&lt;left)&#123; queue.removeFirst(); &#125; if (left&gt;=0) &#123; ans[left] = nums[queue.peekFirst()];// 这个first对应就是前k个区间内的大的数值了 &#125; &#125; &#125;&#125; 剑指 Offer II 039. 直方图最大矩形面积给定非负整数数组 heights ，数组中的数字用来表示柱状图中各个柱子的高度。每个柱子彼此相邻，且宽度为 1 。 求在该柱状图中，能够勾勒出来的矩形的最大面积。 示例 1: 123输入：heights = [2,1,5,6,2,3]输出：10解释：最大的矩形为图中红色区域，面积为 10 1234567891011121314151617181920212223class Solution &#123; public int largestRectangleArea(int[] heights) &#123; int[] temp = new int[heights.length+2];//存储单调栈 System.arraycopy(heights,0,temp,1,heights.length); ArrayDeque&lt;Integer&gt; stack = new ArrayDeque&lt;&gt;(); int area = 0; for(int i= 0;i&lt;temp.length;i++)&#123; while(!stack.isEmpty() &amp;&amp; temp[i]&lt;temp[stack.peek()]) &#123; //如果当前位置的高度比stack的小，那么就会漏水 int h = temp[stack.pop()]; // 比如： 2 1 // peek 为序号 0 的数字为0.temp是 0 2 1 5 6 2 3 // 所以stack里面一直有元素 area = Math.max(area,h*(i-stack.peek()-1)); // 当stack为 1 5 6 时 // 2 小于 6 ，所以area更新为 6 // 弹出 6 ， 2小于5 所以 area更新为 5 * （2） 等于10 &#125; stack.push(i); &#125; return area; &#125;&#125; 剑指 Offer II 040. 矩阵中最大的矩形难度困难76收藏分享切换为英文接收动态反馈 给定一个由 0 和 1 组成的矩阵 matrix ，找出只包含 1 的最大矩形，并返回其面积。 注意：此题 matrix 输入格式为一维 01 字符串数组。 示例 1： 123输入：matrix = [&quot;10100&quot;,&quot;10111&quot;,&quot;11111&quot;,&quot;10010&quot;]输出：6解释：最大矩形如上图所示。 看下边的橙色的部分，这完全就是上一道题呀！ 算法有了，就是求出每一层的 heights[] 然后传给上一题的函数就可以了。 1234567891011121314151617181920212223242526272829303132333435363738394041class Solution &#123; public int maximalRectangle(String[] matrix) &#123; if(matrix.length==0) return 0; int n = matrix[0].length(); int[] heights = new int[n]; int maxArea = 0; for(int i = 0;i&lt;matrix.length;i++)&#123; for(int j = 0;j&lt;n;j++)&#123; if(matrix[i].charAt(j) == &#x27;1&#x27;)&#123; heights[j] +=1; &#125;else&#123; heights[j] = 0; &#125; &#125; maxArea = Math.max(maxArea,largestRectangleArea(heights)); &#125; return maxArea; &#125; public int largestRectangleArea(int[] heights) &#123; int[] temp = new int[heights.length+2];//存储单调栈 System.arraycopy(heights,0,temp,1,heights.length); ArrayDeque&lt;Integer&gt; stack = new ArrayDeque&lt;&gt;(); int area = 0; for(int i= 0;i&lt;temp.length;i++)&#123; while(!stack.isEmpty() &amp;&amp; temp[i]&lt;temp[stack.peek()]) &#123; //如果当前位置的高度比stack的小，那么就会漏水 int h = temp[stack.pop()]; // 比如： 2 1 // peek 为序号 0 的数字为0.temp是 0 2 1 5 6 2 3 // 所以stack里面一直有元素 area = Math.max(area,h*(i-stack.peek()-1)); // 当stack为 1 5 6 时 // 2 小于 6 ，所以area更新为 6 // 弹出 6 ， 2小于5 所以 area更新为 5 * （2） 等于10 &#125; stack.push(i); &#125; return area; &#125;&#125; 优先级队列PriorityQueue的作用PriorityQueue 的主要作用是维护一组数据的排序，使得取出数据时可以按照一定的优先级顺序进行，当我们调用 poll() 方法时，它会从队列的顶部弹出最高优先级的元素。它在很多场景下都有广泛的应用，例如任务调度、事件处理等场景，以及一些算法中需要对数据进行排序的场景。 在实际应用中，PriorityQueue 也经常用于实现 Dijkstra 算法、Prim 算法、Huffman 编码等算法。这里简单说一下这几种算法的作用，理解不了也没关系哈。 Dijkstra算法是一种用于计算带权图中的最短路径的算法。该算法采用贪心的策略，在遍历图的过程中，每次选取当前到源点距离最短的一个顶点，并以它为中心进行扩展，更新其他顶点的距离值。经过多次扩展，可以得到源点到其它所有顶点的最短路径。 Prim算法是一种用于求解最小生成树的算法，可以在加权连通图中找到一棵生成树，使得这棵生成树的所有边的权值之和最小。该算法从任意一个顶点开始，逐渐扩展生成树的规模，每次选择一个距离已生成树最近的顶点加入到生成树中。 Huffman编码是一种基于霍夫曼树的压缩算法，用于将一个字符串转换为二进制编码以进行压缩。该算法的主要思想是通过建立霍夫曼树，将出现频率较高的字符用较短的编码表示，而出现频率较低的字符用较长的编码表示，从而实现对字符串的压缩。在解压缩时，根据编码逐步解析出原字符串。 由于 PriorityQueue 的底层是基于堆实现的，因此在数据量比较大时，使用 PriorityQueue 可以获得较好的时间复杂度。 这里牵涉到了大小关系，元素大小的评判可以通过元素本身的自然顺序（*natural ordering*），也可以通过构造时传入的比较器（Comparator，或者元素自身实现 Comparable 接口）来决定。 在 PriorityQueue 中，每个元素都有一个优先级，这个优先级决定了元素在队列中的位置。队列内部通过小顶堆（也可以是大顶堆）的方式来维护元素的优先级关系。具体来说，小顶堆是一个完全二叉树，任何一个非叶子节点的权值，都不大于其左右子节点的权值，这样保证了队列的顶部元素（堆顶）一定是优先级最高的元素。 剑指 Offer II 059. 数据流的第 K 大数值设计一个找到数据流中第 k 大元素的类（class）。注意是排序后的第 k 大元素，不是第 k 个不同的元素。 请实现 KthLargest 类： KthLargest(int k, int[] nums) 使用整数 k 和整数流 nums 初始化对象。 int add(int val) 将 val 插入数据流 nums 后，返回当前数据流中第 k 大的元素。 示例： 12345678910111213输入：[&quot;KthLargest&quot;, &quot;add&quot;, &quot;add&quot;, &quot;add&quot;, &quot;add&quot;, &quot;add&quot;][[3, [4, 5, 8, 2]], [3], [5], [10], [9], [4]]输出：[null, 4, 5, 5, 8, 8]解释：KthLargest kthLargest = new KthLargest(3, [4, 5, 8, 2]);kthLargest.add(3); // return 4kthLargest.add(5); // return 5kthLargest.add(10); // return 5kthLargest.add(9); // return 8kthLargest.add(4); // return 8 其实就是优先级队列，做一个小丁队 1234567891011121314151617181920class KthLargest &#123; PriorityQueue&lt;Integer&gt; queue; int k; public KthLargest(int k, int[] nums) &#123; queue = new PriorityQueue&lt;&gt;(); // 默认是从小到达的顺序，小顶堆 for(int num: nums)&#123; queue.add(num); &#125; this.k = k; &#125; public int add(int val) &#123; queue.offer(val); while(queue.size()&gt;k)&#123; queue.poll(); &#125; return queue.peek(); &#125;&#125; 剑指 Offer II 060. 出现频率最高的 k 个数字 关键： 优先级存储了频率和数字，直接定一个PriorityQueue&lt;int[ ] &gt; 给定一个整数数组 nums 和一个整数 k ，请返回其中出现频率前 k 高的元素。可以按 任意顺序 返回答案。 示例 1: 12输入: nums = [1,1,1,2,2,3], k = 2输出: [1,2] 示例 2: 12输入: nums = [1], k = 1输出: [1] 提示： 1 &lt;= nums.length &lt;= 105 k 的取值范围是 [1, 数组中不相同的元素的个数] 题目数据保证答案唯一，换句话说，数组中前 k 个高频元素的集合是唯一的 12345678910111213141516171819202122232425262728293031323334353637383940414243class Solution &#123; public int[] topKFrequent(int[] nums, int k) &#123; Map&lt;Integer,Integer&gt; map = new HashMap&lt;&gt;(); for(int i:nums)&#123; map.put(i,map.getOrDefault(i,0)+1); &#125; // int[] 的第一个元素代表数组的值，第二个元素代表了该值出现的次数 PriorityQueue&lt;int[]&gt; queue= new PriorityQueue&lt;&gt;(new Comparator&lt;&gt;()&#123; public int compare(int[] a,int[] b)&#123; return a[1]-b[1]; &#125; &#125;); for(Map.Entry&lt;Integer,Integer&gt; entry:map.entrySet())&#123; // 遍历每一个map的元素 int num = entry.getKey(), count = entry.getValue(); if(queue.size()==k)&#123; if(queue.peek()[1]&lt;count)&#123; queue.poll(); queue.offer(new int[]&#123;num,count&#125;); &#125; &#125;else&#123; queue.offer(new int[]&#123;num,count&#125;); &#125; /*也可以全部都加进去，之后再判断队列大小，大了的部分就poll出去。 for (Map.Entry&lt;Integer, Integer&gt; entry : map.entrySet()) &#123; Integer num = entry.getKey(); Integer value = entry.getValue(); queue.offer(new int[]&#123;num,value&#125;); &#125; while (queue.size()&gt;k)&#123; queue.poll(); &#125; */ &#125; int[] res = new int[k]; for(int i = 0;i&lt;k;i++)&#123; res[i] = queue.poll()[0]; &#125; return res; &#125;&#125; 373. 查找和最小的 K 对数字给定两个以 升序排列 的整数数组 nums1 和 nums2 , 以及一个整数 k 。 定义一对值 (u,v)，其中第一个元素来自 nums1，第二个元素来自 nums2 。 请找到和最小的 k 个数对 (u1,v1), (u2,v2) … (uk,vk) 。 示例 1: 1234输入: nums1 = [1,7,11], nums2 = [2,4,6], k = 3输出: [1,2],[1,4],[1,6]解释: 返回序列中的前 3 对数： [1,2],[1,4],[1,6],[7,2],[7,4],[11,2],[7,6],[11,4],[11,6] 123456789101112131415161718192021222324class Solution &#123; public List&lt;List&lt;Integer&gt;&gt; kSmallestPairs(int[] nums1, int[] nums2, int k) &#123; // PriorityQueue&lt;int[]&gt; heap = new PriorityQueue&lt;&gt;((a,b)-&gt;nums1[a[0]] + nums2[a[1]] - nums1[b[0]] - nums2[b[1]]); PriorityQueue&lt;int[]&gt; heap = new PriorityQueue&lt;&gt;((a, b) -&gt; nums1[a[0]] + nums2[a[1]] - (nums1[b[0]] + nums2[b[1]])); for(int i = 0;i&lt;Math.min(k,nums1.length);i++)&#123; heap.offer(new int[]&#123;i,0&#125;); //nums1的索引都放到heap里面， &#125; List&lt;List&lt;Integer&gt;&gt; ans = new ArrayList&lt;&gt;(); // 最多弹出 k 次 while(k-- &gt;0 &amp;&amp; !heap.isEmpty())&#123; //其实就是吧heap整理一下 //卧槽，就是说弹出k次heap堆的堆顶，肯定就是最小值 int[] pos = heap.poll(); ans.add(Arrays.asList(nums1[pos[0]],nums2[pos[1]])); // 将 index2 加 1 之后继续入队 if(++pos[1]&lt;nums2.length)&#123; heap.offer(pos); &#125; &#125; return ans; &#125;&#125; TreeSet Java中 TreeMap和TreeSet算是java集合类里面比较有难度的数据结构。和普通的HashMap不一样，普通的HashMap元素存取的时间复杂度一般是O(1)的范围，而TreeMap内部对元素的操作复杂度为O(logn)。 虽然在元素的存取方面TreeMap并不占优，但是它内部的元素都是排序的，当需要查找某些元素以及顺序输出元素的时候它能够带来比较理想的结果。可以说，TreeMap是一个内部元素排序版的HashMap。同样，TreeSet是一个封装了一个HashSet的成员变量来实现的，底层运用了红黑树的数据结构。 TreeSet Vs. HashSetTreeSet和HashSet都实现了Set接口。然而，它们之间存在着一些区别。 与HashSet不同，TreeSet中的元素是以某种顺序存储的。这是因为TreeSet还实现了SortedSet接口。 TreeSet提供了一些易于导航的方法。 例如first()，last()，headSet()，tailSet()等。这是因为TreeSet还实现了NavigableSet接口。 对于添加、删除、包含和大小等基本操作，HashSet比TreeSet更快。 使用为了创建树集，我们必须首先导入java.util.TreeSet包。 导入包之后，下面是如何在Java中创建TreeSet。 1TreeSet&lt;Integer&gt; numbers = new TreeSet&lt;&gt;(); 在这里，我们创建了一个没有任何参数的TreeSet。在本示例中，TreeSet中的元素自然排序(升序)。 但是，我们可以使用Comparator接口自定义元素的排序。 剑指 Offer II 057. 值和下标之差都在给定的范围内给你一个整数数组 nums 和两个整数 k 和 t 。请你判断是否存在 两个不同下标 i 和 j，使得 abs(nums[i] - nums[j]) &lt;= t ，同时又满足 abs(i - j) &lt;= k 。 如果存在则返回 true，不存在返回 false。 示例 1： 12输入：nums = [1,2,3,1], k = 3, t = 0输出：true 12345678910111213141516171819class Solution &#123; public boolean containsNearbyAlmostDuplicate(int[] nums, int k, int t) &#123; // 滑动窗口，窗口大小为k，窗口内两个数字的大小相差为t TreeSet&lt;Long&gt; set = new TreeSet&lt;&gt;(); for(int i = 0;i&lt;nums.length;i++)&#123; Long item = nums[i]*1L; Long floor = set.floor(item); Long ceil = set.ceiling(item); // 比较ceil和floor一个是刚大于一点点item，一个是稍小一点点item的元素 if(floor!=null &amp;&amp; (item-floor&lt;=t)) return true; if(ceil!=null &amp;&amp; ceil-item&lt;=t) return true; set.add(item); //移除大于窗口的元素 if(i&gt;=k) set.remove(nums[i-k]*1L); &#125; return false; &#125;&#125; Methodfirst()和last()方法 first() - 返回集合的第一个元素 last() - 返回集合的最后一个元素 例如， 12345678910111213141516171819import java.util.TreeSet;class Main &#123; public static void main(String[] args) &#123; TreeSet&lt;Integer&gt; numbers = new TreeSet&lt;&gt;(); numbers.add(2); numbers.add(5); numbers.add(6); System.out.println(&quot;TreeSet: &quot; + numbers); // 使用 first() 方法 int first = numbers.first(); System.out.println(&quot;第一个数字: &quot; + first); // 使用 last() 方法 int last = numbers.last(); System.out.println(&quot;最后一个数字: &quot; + last); &#125;&#125; 输出结果 123TreeSet: [2, 5, 6]第一个数字: 2最后一个数字: 6 ceiling()，floor()，higher()和lower()方法 Higher(element) - 返回大于指定元素(element)的最小元素。 lower(element) - 返回小于指定元素(element)的最大元素。 ceiling(element) - 返回大于指定元素(element)的那些元素中的最小元素。如果传递的元素(element)存在于树集中，则返回作为参数传递的元素(element)。 floor(element) - 返回小于指定元素(element)的元素中最大的元素。如果传递的元素(element)存在于树集中，则返回作为参数传递的元素(element)。 12345678910111213141516171819202122232425import java.util.TreeSet;class Main &#123; public static void main(String[] args) &#123; TreeSet&lt;Integer&gt; numbers = new TreeSet&lt;&gt;(); numbers.add(2); numbers.add(5); numbers.add(4); numbers.add(6); System.out.println(&quot;TreeSet: &quot; + numbers); // 使用 higher() System.out.println(&quot;使用 higher: &quot; + numbers.higher(4)); // 使用 lower() System.out.println(&quot;使用 lower: &quot; + numbers.lower(4)); // 使用 ceiling() System.out.println(&quot;使用 ceiling: &quot; + numbers.ceiling(4)); // 使用 floor() System.out.println(&quot;使用 floor: &quot; + numbers.floor(3)); &#125;&#125; 输出结果 12345TreeSet: [2, 4, 5, 6]使用 higher: 5使用 lower: 2使用 ceiling: 4使用 floor: 2 当然作为基础的set也可以实现set的方法，执行集合的各种操作 TreeMap 12345678910输入:[&quot;MyCalendar&quot;,&quot;book&quot;,&quot;book&quot;,&quot;book&quot;][[],[10,20],[15,25],[20,30]]输出: [null,true,false,true]解释: MyCalendar myCalendar = new MyCalendar();MyCalendar.book(10, 20); // returns true MyCalendar.book(15, 25); // returns false ，第二个日程安排不能添加到日历中，因为时间 15 已经被第一个日程安排预定了MyCalendar.book(20, 30); // returns true ，第三个日程安排可以添加到日历中，因为第一个日程安排并不包含时间 20 12345678910111213141516171819202122232425262728293031class MyCalendar &#123; TreeMap&lt;Integer,Integer&gt; map =null; public MyCalendar() &#123; map = new TreeMap&lt;&gt;(); &#125; public boolean book(int start, int end) &#123; // 查找刚刚好大于等于start时间的条目； Map.Entry&lt;Integer,Integer&gt; event = map.ceilingEntry(start); if(event!=null &amp;&amp; event.getKey()&lt;end)&#123; // 如果刚大于start，但是开始的比要添加进去的end还要早，就错了 return false; &#125; // 查找刚刚好小于等于start时间的条目； event = map.floorEntry(start); // 结束的时间不能比要插入的开始的晚， if(event!=null &amp;&amp; event.getValue()&gt;start)&#123; return false; &#125; map.put(start,end); return true; &#125;&#125;/** * Your MyCalendar object will be instantiated and called as such: * MyCalendar obj = new MyCalendar(); * boolean param_1 = obj.book(start,end); */ 图论399. 除法求值给你一个变量对数组 equations 和一个实数值数组 values 作为已知条件，其中 equations[i] = [Ai, Bi] 和 values[i] 共同表示等式 Ai / Bi = values[i] 。每个 Ai 或 Bi 是一个表示单个变量的字符串。 另有一些以数组 queries 表示的问题，其中 queries[j] = [Cj, Dj] 表示第 j 个问题，请你根据已知条件找出 Cj / Dj = ? 的结果作为答案。 返回 所有问题的答案 。如果存在某个无法确定的答案，则用 -1.0 替代这个答案。如果问题中出现了给定的已知条件中没有出现的字符串，也需要用 -1.0 替代这个答案。 注意：输入总是有效的。你可以假设除法运算中不会出现除数为 0 的情况，且不存在任何矛盾的结果。 注意：未在等式列表中出现的变量是未定义的，因此无法确定它们的答案。 示例 1： 1234567输入：equations = [[&quot;a&quot;,&quot;b&quot;],[&quot;b&quot;,&quot;c&quot;]], values = [2.0,3.0], queries = [[&quot;a&quot;,&quot;c&quot;],[&quot;b&quot;,&quot;a&quot;],[&quot;a&quot;,&quot;e&quot;],[&quot;a&quot;,&quot;a&quot;],[&quot;x&quot;,&quot;x&quot;]]输出：[6.00000,0.50000,-1.00000,1.00000,-1.00000]解释：条件：a / b = 2.0, b / c = 3.0问题：a / c = ?, b / a = ?, a / e = ?, a / a = ?, x / x = ?结果：[6.0, 0.5, -1.0, 1.0, -1.0 ]注意：x 是未定义的 =&gt; -1.0 解题思路：这是一个有向图的搜索问题。本质上就是求两个节点之间的距离。 首先定义邻接节点，里面有两个字段，分表表示邻接节点的名称和当前节点到达邻接节点所需的倍数；然后构造一个map来存储图，map的键就是节点名称，map的值就是节点的邻接节点列表；遍历给定所有算式，将节点和值都存到map当中；遍历需要求的问题，深搜每个节点，为了防止进入环绕圈，用一个集合来存储已经搜索过的节点。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950class Node&#123; public String id; public double num; public Node(String i,double n)&#123; id = i; num = n; &#125;&#125;class Solution &#123; Map&lt;String, List&lt;Node&gt;&gt; map; public double[] calcEquation(List&lt;List&lt;String&gt;&gt; equations, double[] values, List&lt;List&lt;String&gt;&gt; queries) &#123; int n = equations.size(); map = new HashMap&lt;&gt;(); double[] ans = new double[queries.size()]; for (int i = 0; i &lt; n; i++) &#123; String divided = equations.get(i).get(0);//被除的数 String divisor = equations.get(i).get(1);//除数 if (!map.containsKey(divided)) map.put(divided,new ArrayList&lt;&gt;()); if (!map.containsKey(divisor)) map.put(divisor,new ArrayList&lt;&gt;()); map.get(divided).add(new Node(divisor,values[i])); map.get(divisor).add(new Node(divided,1/values[i]));//保存和另一个节点的倍数的关系 &#125; int cnt = 0; for (List&lt;String&gt; query : queries) &#123; ans[cnt] = dfs(query.get(0),query.get(1),1.0,new HashSet&lt;&gt;()); cnt++; &#125; return ans; &#125; /** * 深搜 * @param cur 表示当前节点 * @param tar 表示目标节点 * @param k 计算的倍数 * @param set 保存已经走过的节点 * @return */ double dfs(String cur,String tar,double k,Set&lt;String&gt; set)&#123; if (!map.containsKey(cur)||set.contains(cur)) return -1.0; if (cur.equals(tar)) return k; set.add(cur); for (Node node : map.get(cur)) &#123; //遍历当前的cur的相邻的边的节点 double t = dfs(node.id, tar, k * node.num, set); if (t!=-1.0) return t; &#125; return -1.0; &#125;&#125; 207. 课程表你这个学期必须选修 numCourses 门课程，记为 0 到 numCourses - 1 。 在选修某些课程之前需要一些先修课程。 先修课程按数组 prerequisites 给出，其中 prerequisites[i] = [ai, bi] ，表示如果要学习课程 ai 则 必须 先学习课程 bi 。 例如，先修课程对 [0, 1] 表示：想要学习课程 0 ，你需要先完成课程 1 。 请你判断是否可能完成所有课程的学习？如果可以，返回 true ；否则，返回 false 。 示例 1： 123输入：numCourses = 2, prerequisites = [[1,0]]输出：true解释：总共有 2 门课程。学习课程 1 之前，你需要完成课程 0 。这是可能的。 示例 2： 123输入：numCourses = 2, prerequisites = [[1,0],[0,1]]输出：false解释：总共有 2 门课程。学习课程 1 之前，你需要先完成课程 0 ；并且学习课程 0 之前，你还应先完成课程 1 。这是不可能的。 提示： 1 &lt;= numCourses &lt;= 2000 0 &lt;= prerequisites.length &lt;= 5000 prerequisites[i].length == 2 0 &lt;= ai, bi &lt; numCourses prerequisites[i] 中的所有课程对 互不相同 方法一，主要是理解邻接表。 例如，numCourses = 5, prerequisites = [[2,1],[3,2],[4,1],[4,2],[5,3],[5,4]] 时： 邻接表如下： 节点 1 能到节点 2 和节点 4，节点 2 能到节点 3 和节点 4； 这就表明节点 2，4 的前置节点都为 1，节点 3，4 的前置节点都为 2。 12345678910前置节点 1 |2| ——&gt; |4| 2 |3| ——&gt; |4| 3 |5| 4 |5| 5 在每次 pre 出队时，执行 numCourses–；若整个课程安排图是有向无环图（即可以安排），则所有节点一定都入队并出队过，即完成拓扑排序。换个角度说，若课程安排图中存在环，一定有节点的入度始终不为 000。因此，拓扑排序出队次数等于课程个数，返回 numCourses &#x3D;&#x3D; 0 判断课程是否可以成功安排。 123456789101112131415161718192021222324252627282930313233343536373839class Solution &#123; public boolean canFinish(int numCourses, int[][] prerequisites) &#123; //入度表 int[] inDegrees = new int[numCourses];//记录节点的入度的数 List&lt;List&lt;Integer&gt;&gt; adjacency = new ArrayList&lt;&gt;();//邻接表 Queue&lt;Integer&gt; queue = new LinkedList&lt;&gt;(); for (int i = 0; i &lt; numCourses; i++) &#123; adjacency.add(new ArrayList&lt;&gt;()); &#125; for (int[] pre : prerequisites) &#123; //节点的入度等于将以该节点为目标节点的边的数量。 inDegrees[pre[0]]++;//统计每个节点的入度 adjacency.get(pre[1]).add(pre[0]);//记录从pre[1]指向出去的值 &#125; for (int i = 0; i &lt; numCourses; i++) &#123; if (inDegrees[i]==0)&#123; //统计入度为0的值，存入queue queue.add(i);//入度为0，说明没有前提预修课程 &#125; &#125; // numCourses = 5 // prerequisites = [[2,1],[3,2],[4,1],[4,2],[5,3],[5,4]] while (!queue.isEmpty())&#123; //遍历所有没有以该节点为目标节点的节点，入度为0； Integer pre = queue.poll(); numCourses--; for (Integer cur : adjacency.get(pre)) &#123; //遍历以该节点为预修课程的节点 //相当于本来机械设计 需要材料力学和理论力学，汽车设计需要理论力学，理论力学是入度为0的课程 // 现在的pre等于理论力学，adjacency里面存储的就是 材料力学和理论力学， inDegrees[cur]--;//消除掉当前预科对应的这个入度，也就是材料力学和理论力学的入度都--； if (inDegrees[cur]==0)&#123; //当入度为0的时候，完成了所有的潜质的课程 queue.add(cur); &#125; &#125; &#125; return numCourses==0; &#125;&#125; 210. 课程表 II现在你总共有 numCourses 门课需要选，记为 0 到 numCourses - 1。给你一个数组 prerequisites ，其中 prerequisites[i] = [ai, bi] ，表示在选修课程 ai 前 必须 先选修 bi 。 例如，想要学习课程 0 ，你需要先完成课程 1 ，我们用一个匹配来表示：[0,1] 。 返回你为了学完所有课程所安排的学习顺序。可能会有多个正确的顺序，你只要返回 任意一种 就可以了。如果不可能完成所有课程，返回 一个空数组 。 示例 1： 123输入：numCourses = 2, prerequisites = [[1,0]]输出：[0,1]解释：总共有 2 门课程。要学习课程 1，你需要先完成课程 0。因此，正确的课程顺序为 [0,1] 。 示例 2： 1234输入：numCourses = 4, prerequisites = [[1,0],[2,0],[3,1],[3,2]]输出：[0,2,1,3]解释：总共有 4 门课程。要学习课程 3，你应该先完成课程 1 和课程 2。并且课程 1 和课程 2 都应该排在课程 0 之后。因此，一个正确的课程顺序是 [0,1,2,3] 。另一个正确的排序是 [0,2,1,3] 。 示例 3： 12输入：numCourses = 1, prerequisites = []输出：[0] 123456789101112131415161718192021222324252627282930313233343536373839404142class Solution &#123; public int[] findOrder(int numCourses, int[][] prerequisites) &#123; //入度表 int[] inDegrees = new int[numCourses];//记录节点的入度的数 List&lt;List&lt;Integer&gt;&gt; adjacency = new ArrayList&lt;&gt;();//邻接表 Queue&lt;Integer&gt; queue = new LinkedList&lt;&gt;(); for (int i = 0; i &lt; numCourses; i++) &#123; adjacency.add(new ArrayList&lt;&gt;()); &#125; for (int[] pre : prerequisites) &#123; //节点的入度等于将以该节点为目标节点的边的数量。 inDegrees[pre[0]]++;//统计每个节点的入度 adjacency.get(pre[1]).add(pre[0]);//记录从pre[1]指向出去的值 &#125; for (int i = 0; i &lt; numCourses; i++) &#123; if (inDegrees[i]==0)&#123; //统计入度为0的值，存入queue queue.add(i);//入度为0，说明没有前提预修课程 &#125; &#125; int idx = 0; int[] ans = new int[numCourses]; // numCourses = 5 // prerequisites = [[2,1],[3,2],[4,1],[4,2],[5,3],[5,4]] while (!queue.isEmpty())&#123; //遍历所有没有以该节点为目标节点的节点，入度为0； Integer pre = queue.poll(); ans[idx++] = pre; for (Integer cur : adjacency.get(pre)) &#123; //遍历以该节点为预修课程的节点 //相当于本来机械设计 需要材料力学和理论力学，汽车设计需要理论力学，理论力学是入度为0的课程 // 现在的pre等于理论力学，adjacency里面存储的就是 材料力学和理论力学， inDegrees[cur]--;//消除掉当前预科对应的这个入度，也就是材料力学和理论力学的入度都--； if (inDegrees[cur]==0)&#123; //当入度为0的时候，完成了所有的潜质的课程 queue.add(cur); &#125; &#125; &#125; if (idx==numCourses) return ans; return new int[0]; &#125;&#125; PRIM算法-最小生成树题目描述： 在世界的某个区域，有一些分散的神秘岛屿，每个岛屿上都有一种珍稀的资源或者宝藏。你是一名探险者，决定前往这些岛屿，但为了节省时间和资源，你希望规划一条最短的路径，以便在探索这些岛屿时尽量减少旅行的距离。 给定一张地图，其中包括了所有的岛屿，以及它们之间的距离。每个岛屿都需要被至少访问一次，你的目标是规划一条最短路径，以最小化探索路径的总距离，同时确保访问了所有岛屿。 输入描述： 第一行包含两个整数V 和 E，V代表顶点数，E代表边数 。顶点编号是从1到V。例如：V&#x3D;2，一个有两个顶点，分别是1和2。 接下来共有 E 行，每行三个整数 v1，v2 和 val，v1 和 v2 为边的起点和终点，val代表边的权值。 输出描述： 输出联通所有岛屿的最小路径总距离 输入示例： 1234567891011127 111 2 11 3 11 5 22 6 12 4 22 3 23 4 14 5 15 6 25 7 16 7 1 输出示例： 6 解答： 最小生成树是所有节点的最小连通子图， 即：以最小的成本（边的权值）将图中所有节点链接到一起。 图中有n个节点，那么一定可以用 n - 1 条边将所有节点连接到一起。 那么如何选择 这 n-1 条边 就是 最小生成树算法的任务所在。 （图中为n为7，即7个节点，那么只需要 n-1 即 6条边就可以讲所有顶点连接到一起） prim算法 是从节点的角度 采用贪心的策略 每次寻找距离 最小生成树最近的节点 并加入到最小生成树中。 prim算法核心就是三步，我称为prim三部曲，大家一定要熟悉这三步，代码相对会好些很多： 第一步，选距离生成树最近节点 第二步，最近节点加入生成树 第三步，更新非生成树节点到生成树的距离（即更新minDist数组） 在prim算法中，有一个数组特别重要，这里起名为：minDist。 （示例中节点编号是从1开始，所以为了让大家看的不晕，minDist数组下标我也从 1 开始计数，下标0 就不使用了，这样 下标和节点标号就可以对应上了，避免大家搞混） minDist 数组 里的数值初始化为 最大数，因为本题 节点距离不会超过 10000，所以 初始化最大数为 10001就可以。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859import java.util.Scanner;import java.util.Arrays;public class Main &#123; public static void main(String[] args) &#123; Scanner scanner = new Scanner(System.in); int v = scanner.nextInt(); int e = scanner.nextInt(); int x, y, k; int[][] grid = new int[v + 1][v + 1]; for (int i = 0; i &lt;= v; i++) &#123; Arrays.fill(grid[i], 10001); &#125; while (e-- &gt; 0) &#123; x = scanner.nextInt(); y = scanner.nextInt(); k = scanner.nextInt(); grid[x][y] = k; grid[y][x] = k; &#125; int[] minDist = new int[v + 1]; Arrays.fill(minDist, 10001); boolean[] isInTree = new boolean[v + 1]; for (int i = 1; i &lt; v; i++) &#123; int cur = -1; for (int j = 1; j &lt;= v; j++) // 1 - v，顶点编号，这里下标从1开始 // 选取最小生成树节点的条件： // （1）不在最小生成树里 // （2）距离最小生成树最近的节点 // （3）只要不在最小生成树里，先默认选一个节点 ，在比较 哪一个是最小的 // 理解条件3 很重要，才能理解这段代码：(cur == -1 || minDist[j] &lt; minDist[cur]) if (!isInTree[j] &amp;&amp; (cur == -1 || minDist[j] &lt; minDist[cur])) &#123; cur = j; &#125; &#125; isInTree[cur] = true; for (int j = 1; j &lt;= v; j++) &#123; if (!isInTree[j] &amp;&amp; grid[cur][j] &lt; minDist[j]) &#123; minDist[j] = grid[cur][j]; &#125; &#125; &#125; int result = 0; for (int i = 2; i &lt;= v; i++) &#123; result += minDist[i]; &#125; System.out.println(result); &#125;&#125; 743. 网络延迟时间 有 n 个网络节点，标记为 1 到 n。 给你一个列表 times，表示信号经过 有向 边的传递时间。 times[i] = (ui, vi, wi)，其中 ui 是源节点，vi 是目标节点， wi 是一个信号从源节点传递到目标节点的时间。 现在，从某个节点 K 发出一个信号。需要多久才能使所有节点都收到信号？如果不能使所有节点收到信号，返回 -1 。 示例 1： 12输入：times = [[2,1,1],[2,3,1],[3,4,1]], n = 4, k = 2输出：2 示例 2： 12输入：times = [[1,2,1]], n = 2, k = 1输出：1 示例 3： 12输入：times = [[1,2,1]], n = 2, k = 2输出：-1 1234567891011121314151617181920212223242526272829303132333435int N = 110,M = 6010;int[][] w = new int[N][N];int INF = 0x3f3f3f;int n,k;public int networkDelayTime(int[][] times, int n, int k) &#123; this.n = n; this.k = k; for (int i = 1; i &lt; n + 1; i++) &#123; for (int j = 1; j &lt; n + 1; j++) &#123; w[i][j]=w[j][i]=i==j?0:INF; &#125; &#125; for (int[] time : times) &#123; w[time[0]][time[1]]=time[2]; &#125; floyd(); int ans = 0; for (int i = 1; i &lt; n + 1; i++) &#123; ans = Math.max(ans,w[k][i]); &#125; return ans&gt;=INF/2?-1:ans;&#125;void floyd()&#123; // floyd 基本流程为三层循环： // 枚举中转点 - 枚举起点 - 枚举终点 - 松弛操作 for (int p = 1; p &lt; n + 1; p++) &#123; for (int i = 1; i &lt;= n; i++) &#123; for (int j = 1; j &lt; n + 1; j++) &#123; //先枚举的中转点，再枚举起点i，终点j w[i][j]=Math.min(w[i][j],w[i][p]+w[p][j]); &#125; &#125; &#125;&#125; 多叉树208. 实现 Trie (前缀树)**Trie**（发音类似 “try”）或者说 前缀树 是一种树形数据结构，用于高效地存储和检索字符串数据集中的键。这一数据结构有相当多的应用情景，例如自动补完和拼写检查。 请你实现 Trie 类： Trie() 初始化前缀树对象。 void insert(String word) 向前缀树中插入字符串 word 。 boolean search(String word) 如果字符串 word 在前缀树中，返回 true（即，在检索之前已经插入）；否则，返回 false 。 boolean startsWith(String prefix) 如果之前已经插入的字符串 word 的前缀之一为 prefix ，返回 true ；否则，返回 false 。 示例： 1234567891011121314输入[&quot;Trie&quot;, &quot;insert&quot;, &quot;search&quot;, &quot;search&quot;, &quot;startsWith&quot;, &quot;insert&quot;, &quot;search&quot;][[], [&quot;apple&quot;], [&quot;apple&quot;], [&quot;app&quot;], [&quot;app&quot;], [&quot;app&quot;], [&quot;app&quot;]]输出[null, null, true, false, true, null, true]解释Trie trie = new Trie();trie.insert(&quot;apple&quot;);trie.search(&quot;apple&quot;); // 返回 Truetrie.search(&quot;app&quot;); // 返回 Falsetrie.startsWith(&quot;app&quot;); // 返回 Truetrie.insert(&quot;app&quot;);trie.search(&quot;app&quot;); // 返回 True Trie 树TrieTrieTrie 树（又叫「前缀树」或「字典树」）是一种用于快速查询「某个字符串&#x2F;字符前缀」是否存在的数据结构。 其核心是使用「边」来代表有无字符，使用「点」来记录是否为「单词结尾」以及「其后续字符串的字符是什么」。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657class Trie &#123; class TrieNode&#123; // Trie 的每个结点中都保留着一个字母表，这是很耗费空间的。 boolean end; TrieNode[] tns = new TrieNode[26]; &#125; TrieNode root; public Trie() &#123; root = new TrieNode(); &#125; public void insert(String word) &#123; TrieNode p = root; /** * 首先从根结点的子结点开始与 word 第一个字符进行匹配， * 一直匹配到前缀链上没有对应的字符， * 这时开始不断开辟新的结点，直到插入完 word 的最后一个字符， * 同时还要将最后一个结点isEnd = true;，表示它是一个单词的末尾。 */ for (char c : word.toCharArray()) &#123; int u = c - &#x27;a&#x27;; if (p.tns[u]==null) p.tns[u] = new TrieNode(); p = p.tns[u];//26叉树 &#125; p.end = true; &#125; public boolean search(String word) &#123; TrieNode p = root; /** * 从根结点的子结点开始，一直向下匹配即可， * 如果出现结点值为空就返回 false， * 如果匹配到了最后一个字符，那我们只需判断 node-&gt;isEnd即可。 */ for (char c : word.toCharArray()) &#123; int u = c - &#x27;a&#x27;; if (p.tns[u]==null) return false; p = p.tns[u];//26叉树 &#125; return p.end; &#125; /** * 判断 Trie 中是或有以 prefix 为前缀的单词 * @param prefix * @return */ public boolean startsWith(String prefix) &#123; TrieNode p = root; for (char c : prefix.toCharArray()) &#123; int u = c - &#x27;a&#x27;; if (p.tns[u]==null) return false; p = p.tns[u];//26叉树 &#125; return true; &#125;&#125; 211. 添加与搜索单词 - 数据结构设计请你设计一个数据结构，支持 添加新单词 和 查找字符串是否与任何先前添加的字符串匹配 。 实现词典类 WordDictionary ： WordDictionary() 初始化词典对象 void addWord(word) 将 word 添加到数据结构中，之后可以对它进行匹配 bool search(word) 如果数据结构中存在字符串与 word 匹配，则返回 true ；否则，返回 false 。word 中可能包含一些 &#39;.&#39; ，每个 . 都可以表示任何一个字母。 示例： 123456789101112131415输入：[&quot;WordDictionary&quot;,&quot;addWord&quot;,&quot;addWord&quot;,&quot;addWord&quot;,&quot;search&quot;,&quot;search&quot;,&quot;search&quot;,&quot;search&quot;][[],[&quot;bad&quot;],[&quot;dad&quot;],[&quot;mad&quot;],[&quot;pad&quot;],[&quot;bad&quot;],[&quot;.ad&quot;],[&quot;b..&quot;]]输出：[null,null,null,null,false,true,true,true]解释：WordDictionary wordDictionary = new WordDictionary();wordDictionary.addWord(&quot;bad&quot;);wordDictionary.addWord(&quot;dad&quot;);wordDictionary.addWord(&quot;mad&quot;);wordDictionary.search(&quot;pad&quot;); // 返回 FalsewordDictionary.search(&quot;bad&quot;); // 返回 TruewordDictionary.search(&quot;.ad&quot;); // 返回 TruewordDictionary.search(&quot;b..&quot;); // 返回 True 123456789101112131415161718192021222324252627282930313233343536373839class WordDictionary &#123; class TrieNode&#123; boolean isWord; TrieNode[] tns = new TrieNode[26]; &#125; TrieNode root; public WordDictionary() &#123; root = new TrieNode(); &#125; public void addWord(String word) &#123; TrieNode p = root; for (char c : word.toCharArray()) &#123; int u = c - &#x27;a&#x27;; if (p.tns[u]==null) p.tns[u]= new TrieNode(); p = p.tns[u];//就是插入一个u的下标的元素 &#125; p.isWord = true; &#125; public boolean search(String word) &#123; return dfs(word,root,0); &#125; boolean dfs(String s,TrieNode p,int idx)&#123; if (idx==s.length()) return p.isWord; char c = s.charAt(idx); if (c==&#x27;.&#x27;)&#123; for (int i = 0; i &lt; 26; i++) &#123; //遍历一下所有的26个字母，如果不等于null，继续回溯遍历 if (p.tns[i]!=null &amp;&amp; dfs(s,p.tns[i],idx+1)) return true; &#125; return false; &#125;else &#123; if (p.tns[c-&#x27;a&#x27;]==null) return false; return dfs(s,p.tns[c-&#x27;a&#x27;],idx+1);//继续遍历下一个。 &#125; &#125;&#125; 212. 单词搜索 II给定一个 m x n 二维字符网格 board 和一个单词（字符串）列表 words， 返回所有二维网格上的单词 。 单词必须按照字母顺序，通过 相邻的单元格 内的字母构成，其中“相邻”单元格是那些水平相邻或垂直相邻的单元格。同一个单元格内的字母在一个单词中不允许被重复使用。 示例 1： 12输入：board = [[&quot;o&quot;,&quot;a&quot;,&quot;a&quot;,&quot;n&quot;],[&quot;e&quot;,&quot;t&quot;,&quot;a&quot;,&quot;e&quot;],[&quot;i&quot;,&quot;h&quot;,&quot;k&quot;,&quot;r&quot;],[&quot;i&quot;,&quot;f&quot;,&quot;l&quot;,&quot;v&quot;]], words = [&quot;oath&quot;,&quot;pea&quot;,&quot;eat&quot;,&quot;rain&quot;]输出：[&quot;eat&quot;,&quot;oath&quot;] 示例 2： 12输入：board = [[&quot;a&quot;,&quot;b&quot;],[&quot;c&quot;,&quot;d&quot;]], words = [&quot;abcb&quot;]输出：[] 提示： m == board.length n == board[i].length 1 &lt;= m, n &lt;= 12 board[i][j] 是一个小写英文字母 1 &lt;= words.length &lt;= 3 * 104 1 &lt;= words[i].length &lt;= 10 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859class Solution &#123; class TrieNode&#123; String s; TrieNode[] tns= new TrieNode[26]; &#125; void insert(String s)&#123; TrieNode p = root; for (char c : s.toCharArray()) &#123; int u = c - &#x27;a&#x27;; if (p.tns[u]==null) p.tns[u] = new TrieNode(); p = p.tns[u]; &#125; p.s = s;//存储当前的单词 &#125; Set&lt;String&gt; set = new HashSet&lt;&gt;(); char[][] board; int m,n;//方块的大小小于 12 TrieNode root = new TrieNode(); int[][] dirs = new int[][]&#123;&#123;1,0&#125;,&#123;-1,0&#125;,&#123;0,1&#125;,&#123;0,-1&#125;&#125;; boolean[][] vis = new boolean[15][15];//15够用了 public List&lt;String&gt; findWords(char[][] board, String[] words) &#123; this.board = board; m = board.length; n = board[0].length; for (String word : words) &#123; insert(word);//将所有的单词存进去字典树里面，如果遍历到有单词的时候，就直接添加到结果 &#125; for (int i = 0; i &lt; m; i++) &#123; for (int j = 0; j &lt; n; j++) &#123; int u = board[i][j] - &#x27;a&#x27;; if (root.tns[u]!=null)&#123; //当前棋盘当前位置能够在字典树找到对应的字母就继续开始寻找 vis[i][j]=true; dfs(i,j,root.tns[u]); vis[i][j] = false; &#125; &#125; &#125; List&lt;String&gt; ans = new ArrayList&lt;&gt;(); for (String s : set) &#123; ans.add(s); &#125; return ans; &#125; void dfs(int i,int j,TrieNode node)&#123; if (node.s!=null) set.add(node.s); for (int[] dir : dirs) &#123; int dx = i+dir[0],dy = j+dir[1]; if (dx&lt;0||dx&gt;=m||dy&lt;0||dy&gt;=n) continue;//超限的就不遍历了 if (vis[dx][dy]) continue;//遍历过的就不遍历了。 int u = board[dx][dy] - &#x27;a&#x27;; if (node.tns[u]!=null)&#123; vis[dx][dy]=true; dfs(dx,dy,node.tns[u]); vis[dx][dy] = false; &#125; &#125; &#125;&#125; 堆&#x2F;优先队列方法摘要 Modifier and Type Method and Description boolean add(E e),将指定的元素插入到此优先级队列中。 void clear(),从此优先级队列中删除所有元素。 Comparator&lt;? super E&gt; comparator(),返回用于为了在这个队列中的元素，或比较null如果此队列根据所述排序 natural ordering 的元素。 boolean contains(Object o),如果此队列包含指定的元素，则返回 true 。 Iterator&lt;E&gt; iterator(),返回此队列中的元素的迭代器。 boolean offer(E e),将指定的元素插入到此优先级队列中。 E peek(),检索但不删除此队列的头，如果此队列为空，则返回 null 。 E poll(),检索并删除此队列的头，如果此队列为空，则返回 null 。 boolean remove(Object o),从该队列中删除指定元素的单个实例（如果存在）。 int size(),返回此集合中的元素数。 Spliterator&lt;E&gt; spliterator(),在此队列中的元素上创建 *late-binding* 和*失败快速* Spliterator 。 Object[] toArray(),返回一个包含此队列中所有元素的数组。元素没有特定的顺序。返回的数组将是 “安全的”，因为该队列不保留对它的引用。 （换句话说，这个方法必须分配一个新的数组）。 因此，调用者可以自由地修改返回的数组。此方法充当基于阵列和基于集合的 API 之间的桥梁。 &lt;T&gt; T[] toArray(T[] a),返回一个包含此队列中所有元素的数组; 返回的数组的运行时类型是指定数组的运行时类型。 不指定 Comparator 时默认为最小堆, 通过传入自定义的 Comparator 函数可以实现大顶堆。 12345678PriorityQueue&lt;Integer&gt; minHeap = new PriorityQueue&lt;Integer&gt;(); //小顶堆，默认容量为11PriorityQueue&lt;Integer&gt; maxHeap = new PriorityQueue&lt;Integer&gt;(new Comparator&lt;Integer&gt;()&#123; //大顶堆，容量11 @Override public int compare(Integer i1,Integer i2)&#123; return i2-i1; &#125;&#125;);PriorityQueue&lt;String&gt; priorityQueue = new PriorityQueue&lt;&gt;(Comparator.reverseOrder()); 这是一颗包含整数 1, 2, 3, 4, 5, 6, 7 的小顶堆： 12345 1 / \\ 2 3 / \\ / \\4 5 6 7 这是一颗大顶堆。 12345 8 / \\ 7 5 / \\ / \\6 4 2 1 123456789101112131415161718192021222324252627282930313233343536//自定义比较器，降序排列\tstatic Comparator&lt;Integer&gt; cmp = new Comparator&lt;Integer&gt;() &#123; public int compare(Integer e1, Integer e2) &#123; return e2 - e1; //降序 &#125; &#125;;\tpublic static void main(String[] args) &#123; //不用比较器，默认升序排列 Queue&lt;Integer&gt; q = new PriorityQueue&lt;&gt;(); q.add(8); q.add(5); q.add(13); q.add(2); System.out.println(&quot;**,********不使用比较器********************&quot;); while(!q.isEmpty()) &#123; System.out.print(q.poll()+&quot; &quot;); &#125; System.out.println(); System.out.println(&quot;**********使用比较器********************&quot;); //使用自定义比较器，降序排列 Queue qq = new PriorityQueue(cmp); qq.add(8); qq.add(5); qq.add(13); qq.add(2); while(!qq.isEmpty()) &#123; System.out.print(qq.poll()+&quot; &quot;); &#125;\t&#125;**********不使用比较器********************2 5 8 13 **********使用比较器********************13 8 5 2 PriorityQueue 的 iterator（）不保证以任何特定顺序遍历队列元素。若想按特定顺序遍历，先将队列转成数组，然后排序遍历 1234567891011121314Queue&lt;Integer&gt; q = new PriorityQueue&lt;&gt;(cmp); int[] nums= &#123;2,5,3,4,1,6&#125;; for(int i:nums) &#123; q.add(i); &#125; Object[] nn=q.toArray(); Arrays.sort(nn); for(int i=nn.length-1;i&gt;=0;i--) System.out.print((int)nn[i]+&quot; &quot;); /** * 输出结果 * 6 5 4 3 2 1 */ 215. 数组中的第K个最大元素给定整数数组 nums 和整数 k，请返回数组中第 **k** 个最大的元素。 请注意，你需要找的是数组排序后的第 k 个最大的元素，而不是第 k 个不同的元素。 你必须设计并实现时间复杂度为 O(n) 的算法解决此问题。 示例 1: 12输入: [3,2,1,5,6,4], k = 2输出: 5 示例 2: 12输入: [3,2,3,1,2,4,5,5,6], k = 4输出: 4 提示： 1 &lt;= k &lt;= nums.length &lt;= 105 -104 &lt;= nums[i] &lt;= 104 1234567891011121314class Solution &#123; public int findKthLargest(int[] nums, int k) &#123; //使用堆的方法 if (nums==null||nums.length&lt;k ||k==0) return Integer.MIN_VALUE; PriorityQueue&lt;Integer&gt; maxQ = new PriorityQueue&lt;&gt;(Collections.reverseOrder()); for (int num : nums) &#123; maxQ.add(num); &#125; while (k--&gt;1)&#123; maxQ.poll(); &#125; return maxQ.peek(); &#125;&#125; 12345678910111213141516171819202122class Solution &#123; public int findKthLargest(int[] nums, int k) &#123; //使用堆的方法 if (nums==null||nums.length&lt;k ||k==0) return Integer.MIN_VALUE; PriorityQueue&lt;Integer&gt; maxQueue = new PriorityQueue&lt;&gt;( new Comparator&lt;Integer&gt;()&#123; @Override public int compare(Integer o1,Integer o2)&#123; return o2-o1; &#125; &#125; ); for(int u: nums)&#123; maxQueue.add(u); &#125; for(int i = k; i&gt;1;i--)&#123; maxQueue.poll(); &#125; return maxQueue.peek(); &#125;&#125; 二、算法模板排序算法排序算法的稳定性 稳定的算法：（不会交换相等的两个元素的位置的算法） 冒泡排序，插入排序，归并排序，基数排序 不稳定的排序： 快速排序，选择排序，希尔排序，怼排序 （1）选择排序 1、每个位置选择当前元素最小的； 2、在一趟选择中，如果当前元素比一个元素小，而该小的元素又出现在一个和当前元素相等的元素后面，那么交换后稳定性就被破坏了； 3、举个例子，序列5 8 5 2 9， 我们知道第一遍选择第1个元素5会和2交换，那么原序列中2个5的相对前后顺序就被破坏了； 4、不稳定的排序算法。 （2）冒泡排序 1、小的元素往前调或者把大的元素往后调； 2、比较是相邻的两个元素比较，交换也发生在这两个元素之间； 3、稳定排序算法。 （3）插入排序 1、已经有序的小序列的基础上，一次插入一个元素； 2、想要插入的元素和已经有序的最大者开始比起，如果比它大则直接插入在其后面，否则一直往前找直到找到它该插入的位置； 3、如果碰见一个和插入元素相 等的，那么插入元素把想插入的元素放在相等元素的后面； 4、相等元素的前后顺序没有改变； 5、稳定排序算法。 （4）快速排序 1、两个方向，左边的i下标一直往右走，当a[i] &lt;&#x3D; a[center_index]，其中center_index是中枢元素的数组下标，一般取为数组第0个元素。而右边的j下标一直往左走，当a[j] &gt; a[center_index]； 2、如果i和j都走不动了，i &lt;&#x3D; j, 交换a[i]和a[j],重复上面的过程，直到i&gt;j； 3、交换a[j]和a[center_index]，完成一趟快速排序； 4、在中枢元素和a[j]交换的时候，很有可能把前面的元素的稳定性打乱，比如序列为 5 3 3 4 3 8 9 10 11， 现在中枢元素5和3(第5个元素，下标从1开始计)交换就会把元素3的稳定性打乱； 5、不稳定发生在中枢元素和a[j] 交换的时刻； 6、不稳定的排序算法。 （5）归并排序 1、把序列递归地分成短序列，递归出口是短序列只有1个元素(认为直接有序)或者2个序列(1次比较和交换),然后把各个有序的短序列合并成一个有序的长序列，不断合并直到原序列全部排好序； 2、合并过程中我们可以保证如果两个当前元素相等时，我们把处在前面的序列的元素保存在结 果序列的前面，这样就保证了稳定性； 3、稳定排序算法。 （6）希尔排序(shell) 1、按照不同步长对元素进行插入排序； 2、当刚开始元素很无序的时候，步长最大，所以插入排序的元素个数很少，速度很快； 3、当元素基本有序了，步长很小， 插入排序对于有序的序列效率很高； 4、所以，希尔排序的时间复杂度会比o(n^2)好一些 由于多次插入排序，我们知道一次插入排序是稳定的，不会改变相同元 素的相对顺序，但在不同的插入排序过程中，相同的元素可能在各自的插入排序中移动，最后其稳定性就会被打乱； 5、不稳定的排序算法。 （7） 基数排序： 1、按照低位先排序，然后收集；再按照高位排序，然后再收集；依次类推，直到最高位； 2、有时候有些属性是有优先级顺序的，先按低优先级排序，再按高优 先级排序，最后的次序就是高优先级高的在前，高优先级相同的低优先级高的在前； 3、用于整数； 4、需要较多的存储空间； 5、基于分别排序，分别收集； 6、稳定排序算法。 （8） 堆排序 1、是选择排序的一种； 2、堆的结构是节点i的孩子为2i和2i+1节点，大顶堆要求父节点大于等于其2个子节点，小顶堆要求父节点小于等于其2个子节点，是完全二叉树； 3、在一个长为n 的序列，堆排序的过程是从第n&#x2F;2开始和其子节点共3个值选择最大(大顶堆)或者最小(小顶堆),这3个元素之间的选择当然不会破坏稳定性。但当为n &#x2F;2-1, n&#x2F;2-2, …1这些个父节点选择元素时，就会破坏稳定性。有可能第n&#x2F;2个父节点交换把后面一个元素交换过去了，而第n&#x2F;2-1个父节点把后面一个相同的元素没 有交换，那么这2个相同的元素之间的稳定性就被破坏了； 4、不稳定的排序算法。 选择排序123456789101112131415161718192021222324252627282930313233import java.util.Arrays;public class Solution &#123;// 选择排序：每一轮选择最小元素交换到未排定部分的开头public int[] sortArray(int[] nums) &#123; int len = nums.length; // 循环不变量：[0, i) 有序，且该区间里所有元素就是最终排定的样子 for (int i = 0; i &lt; len - 1; i++) &#123; // 选择区间 [i, len - 1] 里最小的元素的索引，交换到下标 i int minIndex = i; for (int j = i + 1; j &lt; len; j++) &#123; if (nums[j] &lt; nums[minIndex]) &#123; minIndex = j; &#125; &#125; swap(nums, i, minIndex); &#125; return nums;&#125;private void swap(int[] nums, int index1, int index2) &#123; int temp = nums[index1]; nums[index1] = nums[index2]; nums[index2] = temp;\t&#125;\tpublic static void main(String[] args) &#123; int[] nums = &#123;5, 2, 3, 1&#125;; Solution solution = new Solution(); int[] res = solution.sortArray(nums); System.out.println(Arrays.toString(res));\t&#125;&#125; 快速排序1234567891011121314151617181920212223242526272829303132public class Solution &#123; public int[] MySort (int[] arr) &#123; //快速排序 quickSort(arr,0,arr.length-1); return arr; &#125; public int[] quickSort(int[] arr,int l,int r) &#123; if(l&gt;=r) return arr; int pivot = partition(arr,l,r); quickSort(arr,l,pivot-1); quickSort(arr,pivot+1,r); return arr; &#125; int partition(int[] arr,int l,int r)&#123; int left = arr[l]; int j = l; for(int i = l+1;i&lt;=r;i++)&#123; if(arr[i]&lt;left)&#123; j++; swap(arr,i,j); &#125; &#125; swap(arr,l,j); return j; &#125; void swap(int[] arr,int i,int j )&#123; int t = arr[i]; arr[i] = arr[j]; arr[j] = t; &#125; &#125; 123456789101112131415161718192021222324252627282930313233343536373839404142434445class Solution &#123; public String minNumber(int[] nums) &#123; //参与比较的两个字符串如果首字符相同，则比较下一个字符，直到有不同的为止，返回该不同的字符的asc码差值 String[] strs = new String[nums.length]; for(int i =0;i&lt;nums.length;i++)&#123; strs[i]=String.valueOf(nums[i]); &#125; quickSort(strs,0,strs.length-1); StringBuilder res = new StringBuilder(); for(String s:strs)&#123; res.append(s); &#125; return res.toString(); &#125; void quickSort(String[] strs,int left,int right)&#123; if(left&gt;=right) &#123; return; &#125; int pivotIndex =partition(strs,left,right); quickSort(strs,left,pivotIndex-1); quickSort(strs,pivotIndex+1,right); &#125; private int partition(String[] strs,int left,int right) &#123; String pivot=strs[left]; //j是pivot第一个区间最后一个元素所在的位置 int j=left; for(int i=left+1;i&lt;=right;i++) &#123; if((strs[i]+pivot).compareTo((pivot+strs[i]))&lt;0) &#123; j++; swap(strs,i,j); &#125; &#125; swap(strs,left,j); //此时j处于第一个区间的最后一个位置，实际上就是需要的切分元素现在所在的位置了 return j; &#125; private void swap(String[] nums,int i,int j) &#123; String temp=nums[i]; nums[i]=nums[j]; nums[j]=temp; &#125;&#125; 插入排序由于「插入排序」在「几乎有序」的数组上表现良好，特别地，在「短数组」上的表现也很好。因为「短数组」的特点是：每个元素离它最终排定的位置都不会太远。为此，在小区间内执行排序任务的时候，可以转向使用「插入排序」。 1234567891011121314151617181920212223public class Solution &#123; // 插入排序：稳定排序，在接近有序的情况下，表现优异 public int[] sortArray(int[] nums) &#123; int len = nums.length; // 循环不变量：将 nums[i] 插入到区间 [0, i) 使之成为有序数组 for (int i = 1; i &lt; len; i++) &#123; // 先暂存这个元素，然后之前元素逐个后移，留出空位 int temp = nums[i]; int j = i; // 注意边界 j &gt; 0 while (j &gt; 0 &amp;&amp; nums[j - 1] &gt; temp) &#123; nums[j] = nums[j - 1]; j--; &#125; nums[j] = temp; &#125; return nums; &#125;&#125; 堆排序堆就是完全二叉树 堆是具有以下性质的完全二叉树：每个结点的值都大于或等于其左右孩子结点的值，称为大顶堆；或者每个结点的值都小于或等于其左右孩子结点的值，称为小顶堆。如下图 同时，我们对堆中的结点按层进行编号，将这种逻辑结构映射到数组中就是下面这个样子 该数组从逻辑上讲就是一个堆结构，我们用简单的公式来描述一下堆的定义就是： 大顶堆：arr[i] &gt;&#x3D; arr[2i+1] &amp;&amp; arr[i] &gt;&#x3D; arr[2i+2] 小顶堆：arr[i] &lt;&#x3D; arr[2i+1] &amp;&amp; arr[i] &lt;&#x3D; arr[2i+2] ok，了解了这些定义。接下来，我们来看看堆排序的基本思想及基本步骤： 堆排序的基本思想是：将待排序序列构造成一个大顶堆heapify，此时，整个序列的最大值就是堆顶的根节点。将其与末尾元素进行交换，此时末尾就为最大值。然后将剩余n-1个元素重新构造成一个堆，这样会得到n个元素的次小值。如此反复执行，便能得到一个有序序列了。 1234567891011121314151617181920212223242526272829303132333435363738394041import java.util.Arrays;public class HeapSort &#123; public static void main(String []args)&#123; int []arr = &#123;9,8,7,6,5,4,3,2,1&#125;; sort(arr); System.out.println(Arrays.toString(arr)); &#125; public static void sort(int []arr)&#123; //1.构建大顶堆 for(int i=arr.length/2-1;i&gt;=0;i--)&#123; //从第一个非叶子结点从下至上，从右至左调整结构 adjustHeap(arr,i,arr.length); &#125; //2.调整堆结构+交换堆顶元素与末尾元素 for(int j=arr.length-1;j&gt;0;j--)&#123; swap(arr,0,j);//将堆顶元素与末尾元素进行交换 adjustHeap(arr,0,j);//重新对堆进行调整 &#125; &#125; public static void adjustHeap(int []arr,int i,int length)&#123; int temp = arr[i];//先取出当前元素i for(int k=i*2+1;k&lt;length;k=k*2+1)&#123;//从i结点的左子结点开始，也就是2i+1处开始 if(k+1&lt;length &amp;&amp; arr[k]&lt;arr[k+1])&#123;//如果左子结点小于右子结点，k指向右子结点 k++; &#125; if(arr[k] &gt;temp)&#123;//如果子节点大于父节点，将子节点值赋给父节点（不用进行交换） arr[i] = arr[k]; i = k; &#125;else&#123; break; &#125; &#125; arr[i] = temp;//将temp值放到最终的位置 &#125; public static void swap(int []arr,int a ,int b)&#123; int temp=arr[a]; arr[a] = arr[b]; arr[b] = temp; &#125;&#125; 123456789101112131415161718192021222324252627282930class Solution &#123; public int[] sortArray(int[] nums) &#123; //实战堆排序 for(int i = nums.length/2-1;i&gt;=0;i--)&#123; heapify(nums,i,nums.length); &#125; for(int i = nums.length-1;i&gt;=1;i--)&#123; int temp = nums[0]; nums[0] = nums[i]; nums[i] = temp; heapify(nums,0,i); &#125; return nums; &#125; void heapify(int[] nums,int i,int length)&#123; int maxindex = i; int leftson = 2*i+1; int rightson = 2*i+2; if(leftson&lt;length&amp;&amp;nums[leftson]&gt;nums[maxindex]) maxindex =leftson; if(rightson&lt;length&amp;&amp;nums[rightson]&gt;nums[maxindex]) maxindex = rightson;//选这三者里面最大的作为naxIndex。 if(maxindex!=i)&#123; // 如果发生了交换，那么 int temp = nums[maxindex]; nums[maxindex] =nums[i]; nums[i] = temp; heapify(nums,maxindex,length);//交换了最大元素之后的位置继续进行堆排序 &#125; &#125;&#125; LeetCode排序堆排序题解 归并排序1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162public class Main &#123; public static void main(String[] args) &#123; int arr[]=new int[20]; //数组的赋值与遍历输出 for (int i = 0; i &lt; arr.length; i++) &#123; arr[i]=(int)(Math.random()*50); System.out.print(arr[i]+&quot; &quot;); &#125; mergeSort(arr,0,arr.length-1); System.out.println(); System.out.println(Arrays.toString(arr)); &#125; private static void mergeSort(int[] array, int left, int right) &#123; int[] B = new int[array.length]; // base case // 递归的终止条件是传入的数组只剩一个元素，即low==high if(left &gt;= right) &#123; return; &#125; // 「分」 int mid = left + (right - left)/2; // 「治」 mergeSort(array, left, mid); mergeSort(array, mid + 1, right); // 新建一个辅助数组B，将arr[]中所有元素都复制到B中 for(int i = left; i &lt;= right; i++) &#123; B[i] = array[i]; &#125; // 「合」 int i = left; int j = mid + 1; int k = left; //设置双指针：i，j。i从low开始遍历数组B[low，mid]，j从mid+1开始遍历数组B[mid+1,high]; //k充当数组下标，依次向数组A[Low，high]中写入剩余元素的最小值。 while(i &lt;= mid &amp;&amp; j &lt;= right) &#123; if(B[i] &lt;= B[j]) &#123; // 等号会影响算法的稳定性 array[k++] = B[i++]; &#125; else &#123; array[k++] = B[j++]; &#125; &#125; //上述循环的终止条件是：B[low，mid]已经完全写入了A[]中（此时指针i已经走完了尽头）或者 //B[mid+1,high]已经全部写入A[]中（此时指针j已经走完了尽头） //不管是哪一种情况下终止循环，都可以用while循环把没有归并完的子数组接着写入剩余空间 while (i &lt;= mid) array[k++] = B[i++]; while (j &lt;= right) array[k++] = B[j++]; /* 简约点的写法： while(k&lt;=right)&#123; if(i==mid+1)&#123; //这个时候就是第一个便利完了就是直接保存第二个就行了 array[k++] = B[j++]; &#125;else if(j==right+1 || B[i]&lt;B[j])&#123; array[k++] = B[i++];//右边的遍历完了 &#125;else&#123; array[k++] = B[j++]; &#125; &#125; */ &#125;&#125; 链表排序1234567891011121314151617181920212223242526272829303132333435class Solution &#123; public ListNode sortList(ListNode head) &#123;// 归并排序 if(head == null || head.next == null) return head;//base case ListNode fast = head; ListNode slow = head; // 1 2 3 4 // s f while (fast.next!=null &amp;&amp; fast.next.next!=null) &#123; fast = fast.next.next; slow = slow.next; &#125; ListNode cnt = slow.next;//从中间切开 slow.next = null; ListNode dummy = new ListNode(); ListNode res = dummy; ListNode left = sortList(head); ListNode right = sortList(cnt); //合并离散的左右的有序的链表 while (left!=null&amp;&amp;right!=null) &#123; if(left.val&lt;right.val) &#123; res.next = left; left = left.next; &#125;else &#123; res.next = right; right=right.next; &#125; res = res.next; &#125; res.next = left!=null? left:right; return dummy.next; &#125;&#125; LCR 170. 交易逆序对的总数https://leetcode.cn/problems/shu-zu-zhong-de-ni-xu-dui-lcof/description/ 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748class Solution &#123; public int reversePairs(int[] record) &#123; //归并排序的时候，如果是逆序的合并那就是有，左边的[left,mid],当前为i，那就是i到mid，都会比 //右边的数组[mid+1,right]的都要大，都是逆序对，也就是res+=(mid-i+1); return merge(record,0,record.length-1); &#125; int merge(int[] record,int left,int right)&#123; if(left&gt;=right) return 0; int mid = (left+(right-left)/2); int res = merge(record,left,mid)+merge(record,mid+1,right); int[] B = new int[record.length]; for(int i = left;i&lt;=right;i++)&#123; B[i]=record[i];//先复制一份，之后好直接更改recor的记录 &#125; int i = left,j=mid+1,k = left; //下面的时间有点长。 /* while(i&lt;=mid&amp;&amp;j&lt;=right&amp;&amp;k&lt;=right)&#123; if(B[i]&lt;=B[j])&#123; record[k++] = B[i++]; &#125;else&#123; record[k++]=B[j++]; //此时就是逆序对 res+=(mid-i+1); &#125; &#125; while(i&lt;=mid&amp;&amp;k&lt;=right)&#123; record[k++] = B[i++]; &#125; while(j&lt;=right&amp;&amp;k&lt;=right)&#123; record[k++] = B[j++]; &#125; */ while(k&lt;=right)&#123; if(i==mid+1)&#123; record[k++] = B[j++]; &#125;else if(j ==right+1 || B[i]&lt;=B[j])&#123; record[k++] = B[i++]; &#125;else&#123; record[k++]=B[j++]; //此时就是逆序对 res+=(mid-i+1); &#125; &#125; return res; return res; &#125;&#125; 123456789101112131415161718192021222324252627282930313233343536373839class Solution &#123; int[] nums,tmp; public int reversePairs(int[] nums) &#123; //归并排序，计算逆序 this.nums = nums; tmp = new int[nums.length]; return merge(0,nums.length-1); &#125; int merge(int left,int right)&#123; if(left&gt;=right) return 0; int m = (left+right)/2; int res = merge(left,m)+merge(m+1,right); //上面是归并拆分 //下面开始归并排序 int i = left,j=m+1; for(int k =left;k&lt;=right;k++)&#123; tmp[k] = nums[k];//拷贝一份 // &#125; for(int k = left;k&lt;=right;k++)&#123; //左子区间的元素都遍历了，剩下只要把右子区间剩下的元素加入nums即可 if(i==m+1) while(k&lt;=right) nums[k++]=tmp[j++]; //同上，此时右子区间的元素已经遍历完，只需要添加左子区间的元素到nums else if(j==right+1) while(k&lt;=right) nums[k++]=tmp[i++]; else if(tmp[i]&lt;=tmp[j])&#123; //往nums添加一个按从小到达排列的元素，不引入逆序对 nums[k]=tmp[i++]; &#125;else &#123; //对应 tmp[i] &gt; tmp[j] res+=m-i+1;//也就是说，在合并左右子区间时，新引入了共m-i+1对 以tmp[j]为右元素的逆序对 nums[k]=tmp[j++]; &#125; &#125; return res; &#125;&#125; 280. 摆动排序给你一个的整数数组 nums, 将该数组重新排序后使 nums[0] &lt;= nums[1] &gt;= nums[2] &lt;= nums[3]... 输入数组总是有一个有效的答案。 示例 1: 123输入：nums = [3,5,2,1,6,4]输出：[3,5,1,6,2,4]解释：[1,6,2,5,3,4]也是有效的答案 12345678910111213class Solution &#123; public void wiggleSort(int[] nums) &#123; for (int i = 0; i &lt; nums.length-1; i++) &#123; if ((i%2==0)==(nums[i]&gt;nums[i+1]))&#123; //当前位置为偶数的时候，应该递增，为奇数时为递减 //nums[i]&gt;nums[i+1]为递减的时候我们就交换一下 int temp = nums[i]; nums[i] = nums[i+1]; nums[i+1] = temp; &#125; &#125; &#125;&#125; 二分查找法162. 寻找峰值峰值元素是指其值严格大于左右相邻值的元素。 给你一个整数数组 nums，找到峰值元素并返回其索引。数组可能包含多个峰值，在这种情况下，返回 任何一个峰值 所在位置即可。 你可以假设 nums[-1] = nums[n] = -∞ 。 你必须实现时间复杂度为 O(log n) 的算法来解决此问题。 示例 1： 123输入：nums = [1,2,3,1]输出：2解释：3 是峰值元素，你的函数应该返回其索引 2。 示例 2： 1234输入：nums = [1,2,1,3,5,6,4]输出：1 或 5 解释：你的函数可以返回索引 1，其峰值元素为 2； 或者返回索引 5， 其峰值元素为 6。 提示： 1 &lt;= nums.length &lt;= 1000 -231 &lt;= nums[i] &lt;= 231 - 1 对于所有有效的 i 都有 nums[i] != nums[i + 1] 众所周知，满足两个条件就可以二分： 答案一定存在，或者可以 O(1)O(1)O(1) 验证是不是答案； 一次查询可以扔掉一半答案. 假设当前分割点 mid 满足关系 num[mid] ＞ nums[mid + 1] 的话，一个很简单的想法是 num[mid]可能为峰值，而 nums[mid + 1] 必然不为峰值，于是r&#x3D;mid，从左半部分继续找峰值。 12345678910111213class Solution &#123; public int findPeakElement(int[] nums) &#123; int n = nums.length; int l = 0, r = n - 1; while (l &lt; r) &#123; int mid = l + r &gt;&gt; 1; //这里是r=mid，所以不需要加0.5，向下取整，就是向左取整，因此r=mid不会循环 if (nums[mid] &gt; nums[mid + 1]) r = mid;//num[mid]可能为峰值 else l = mid + 1; //nums[mid + 1] 可能为峰值 &#125; return r; &#125;&#125; 1234567891011121314class Solution &#123; public int findPeakElement(int[] nums) &#123; int n = nums.length; if (n == 1) return 0; int l = 0, r = n - 1; while (l &lt; r) &#123; int mid = l + r + 1 &gt;&gt; 1; if (nums[mid] &gt; nums[mid - 1]) l = mid; else r = mid - 1; &#125; return r; &#125;&#125; 33. 搜索旋转排序数组整数数组 nums 按升序排列，数组中的值 互不相同 。 在传递给函数之前，nums 在预先未知的某个下标 k（0 &lt;= k &lt; nums.length）上进行了 旋转，使数组变为 [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]（下标 从 0 开始 计数）。例如， [0,1,2,4,5,6,7] 在下标 3 处经旋转后可能变为 [4,5,6,7,0,1,2] 。 给你 旋转后 的数组 nums 和一个整数 target ，如果 nums 中存在这个目标值 target ，则返回它的下标，否则返回 -1 。 你必须设计一个时间复杂度为 O(log n) 的算法解决此问题。 示例 1： 12输入：nums = [4,5,6,7,0,1,2], target = 0输出：4 123456789101112131415161718192021222324252627class Solution &#123; public int search(int[] nums, int target) &#123; int l = 0,r = nums.length-1; while (l&lt;=r)&#123; int m = (l + r) / 2; if (nums[m]==target) return m; // [3, 1] 1 如果没有等号，l=0,m=0,r=1,没有等号，就遍历不到0这个位置了 else if (nums[m] &gt;=nums[l]) &#123; //System.out.println(&quot;m = &quot; + m); //这里是左边有序 if (nums[m]&gt;target&amp;&amp;nums[l]&lt;=target)&#123; r = m-1; &#125;else &#123; l = m+1; &#125; &#125;else&#123; //这里是右边有序 if (nums[m]&lt;target&amp;&amp;nums[r]&gt;=target)&#123; l = m+1; &#125;else &#123; r = m-1; &#125; &#125; &#125; return -1; &#125;&#125; 二分查找前提是数组为有序数组，同时题目还强调数组中无重复元素 123456789101112131415161718class Solution &#123; public int search(int[] nums,int target)&#123; if(target&lt;nums[0]||target&gt;nums[nums.length-1])&#123; return -1; &#125; int left = 0, right = nums.length - 1; while (left &lt;= right) &#123; int mid = left + ((right - left) &gt;&gt; 1); if (nums[mid] == target) return mid; else if (nums[mid] &lt; target) left = mid + 1; else if (nums[mid] &gt; target) right = mid - 1; &#125; return -1;//左闭右闭 &#125;&#125; 1234567891011121314151617181920class Solution &#123;public: int searchInsert(vector&lt;int&gt;&amp; nums, int target) &#123; int n = nums.size(); int left = 0; int right = n; // 我们定义target在左闭右开的区间里，[left, right) while (left &lt; right) &#123; // 因为left == right的时候，在[left, right)是无效的空间 int middle = left + ((right - left) &gt;&gt; 1); if (nums[middle] &gt; target) &#123; right = middle; // target 在左区间，因为是左闭右开的区间，nums[middle]一定不是我们的目标值，所以right = middle，在[left, middle)中继续寻找目标值 &#125; else if (nums[middle] &lt; target) &#123; left = middle + 1; // target 在右区间，在 [middle+1, right)中 &#125; else &#123; // nums[middle] == target return middle; // 数组中找到目标值的情况，直接返回下标 &#125; &#125; return right; &#125;&#125;; KMP12345678910111213void kmp(int* next, const string&amp; s)&#123; next[0] = -1; int j = -1; for(int i = 1; i &lt; s.size(); i++)&#123; while (j &gt;= 0 &amp;&amp; s[i] != s[j + 1]) &#123; j = next[j]; &#125; if (s[i] == s[j + 1]) &#123; j++; &#125; next[i] = j; &#125;&#125; 二叉树基础知识 如何找到叶子节点： 12345if (root.left == null &amp;&amp; root.right == null) &#123; // 当是叶子节点的时候，开始处理 res += listToInt(path); return;&#125; 129. 求根节点到叶节点数字之和给你一个二叉树的根节点 root ，树中每个节点都存放有一个 0 到 9 之间的数字。 每条从根节点到叶节点的路径都代表一个数字： 例如，从根节点到叶节点的路径 1 -&gt; 2 -&gt; 3 表示数字 123 。 计算从根节点到叶节点生成的 所有数字之和 。 叶节点 是指没有子节点的节点。 示例 1： 123456输入：root = [1,2,3]输出：25解释：从根到叶子节点路径 1-&gt;2 代表数字 12从根到叶子节点路径 1-&gt;3 代表数字 13因此，数字总和 = 12 + 13 = 25 1234567891011121314151617181920212223242526272829303132333435363738394041424344class Solution &#123; List&lt;Integer&gt; path = new ArrayList&lt;&gt;(); int res = 0; public int sumNumbers(TreeNode root) &#123; // 如果节点为0，那么就返回0 if (root == null) return 0; // 首先将根节点放到集合中 path.add(root.val); // 开始递归 recur(root); return res; &#125; public void recur(TreeNode root)&#123; if (root.left == null &amp;&amp; root.right == null) &#123; // 当是叶子节点的时候，开始处理 res += listToInt(path); return; &#125; if (root.left != null)&#123; // 注意有回溯 path.add(root.left.val); recur(root.left); path.remove(path.size() - 1); &#125; if (root.right != null)&#123; // 注意有回溯 path.add(root.right.val); recur(root.right); path.remove(path.size() - 1); &#125; return; &#125; public int listToInt(List&lt;Integer&gt; path)&#123; int sum = 0; for (Integer num:path)&#123; // sum * 10 表示进位 sum = sum * 10 + num; &#125; return sum; &#125;&#125; 12345678910111213class Solution &#123; public int sumNumbers(TreeNode root) &#123; if(root==null) return 0; return recur(root,0); &#125; int recur(TreeNode root,int sum)&#123; if(root==null) return 0; sum=sum*10+root.val; if(root.left==null&amp;&amp;root.right==null) return sum; return recur(root.left,sum)+recur(root.right,sum); &#125;&#125; 226. 翻转二叉树给你一棵二叉树的根节点 root ，翻转这棵二叉树，并返回其根节点。 示例 1： 12输入：root = [4,2,7,1,3,6,9]输出：[4,7,2,9,6,3,1] Q： 为何需要暂存 rootrootroot 的左子节点？A： 在递归右子节点 “root.left&#x3D;invertTree(root.right);root.left &#x3D; invertTree(root.right);root.left&#x3D;invertTree(root.right);” 执行完毕后， root.leftroot.leftroot.left 的值已经发生改变，此时递归左子节点 invertTree(root.left)invertTree(root.left)invertTree(root.left) 则会出问题。 12345678910class Solution &#123; public TreeNode invertTree(TreeNode root) &#123; if(root == null) return null; TreeNode left = invertTree(root.left); TreeNode right = invertTree(root.right); root.left = right; root.right = left; return root; &#125;&#125; 101. 对称二叉树 给你一个二叉树的根节点 root ， 检查它是否轴对称。 示例 1： 12输入：root = [1,2,2,3,4,4,3]输出：true 123456789101112131415class Solution &#123; public boolean isSymmetric(TreeNode root) &#123; if(root == null) return true; return helper(root.left,root.right); &#125; private boolean helper(TreeNode left,TreeNode right)&#123; if(left==null&amp;&amp;right!=null) return false; else if(left!=null&amp;&amp;right==null) return false; else if(left==null&amp;&amp;right==null) return true; else if(left.val!=right.val) return false; boolean outside = helper(left.left,right.right); boolean inside = helper(left.right,right.left); return outside&amp;&amp;inside; &#125; &#125; 序列化与反序列化二叉树：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849public String serialize(TreeNode root) &#123; if (root==null) return &quot;&quot;; StringBuilder sb = new StringBuilder(); sb.append(&quot;[&quot;); LinkedList&lt;TreeNode&gt; queue = new LinkedList&lt;&gt;(); queue.offer(root); while (!queue.isEmpty())&#123;// 只要不是空的 TreeNode polled = queue.poll(); if (polled!=null)&#123; sb.append(&quot;&quot;+polled.val); queue.offer(polled.left); queue.offer(polled.right); &#125;else &#123; sb.append(&quot;null&quot;); &#125; sb.append(&quot;,&quot;); &#125; sb.append(&quot;]&quot;); return sb.toString(); &#125; // Decodes your encoded data to tree. public TreeNode deserialize(String data) &#123; if (data==&quot;&quot;) return null; String substring = data.substring(1, data.length() - 1); String[] datalist = substring.split(&quot;,&quot;);// split之后就可以得到字符串列表了 TreeNode root = new TreeNode(Integer.parseInt(datalist[0])); LinkedList&lt;TreeNode&gt; queue = new LinkedList&lt;&gt;(); queue.offer(root); int i =1; while (!queue.isEmpty())&#123; TreeNode poll = queue.poll(); if (!&quot;null&quot;.equals(datalist[i]))&#123; poll.left = new TreeNode(Integer.parseInt(datalist[i])); queue.offer(poll.left); &#125; i++; if (!&quot;null&quot;.equals(datalist[i]))&#123; poll.right = new TreeNode(Integer.parseInt(datalist[i])); queue.offer(poll.right); &#125; i++; &#125; return root; &#125; 二叉树的定义： 123456struct TreeNode &#123; int val; TreeNode *left; TreeNode *right; TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;&#125;; 非递归的方式 前序中序后序遍历 二叉搜索树 前序遍历java 实现 完全二叉树的非递归遍历前序遍历， 中间，左边，右边 1234567891011121314151617181920212223public List&lt;Integer&gt; preorderTraversal(TreeNode root)&#123; List&lt;Integer&gt; lists = new ArrayList&lt;&gt;(); if(root == null)&#123; return lists; &#125; Stack&lt;TreeNode&gt; stack = new Stack&lt;&gt;(); //根节点先入栈 stack.push(root); TreeNode current = null; while(!stack.isEmpty())&#123; current = stack.pop(); lists.add(current.val); //这里注意，要先压入右子结点，再压入左节点。因为栈是先进后出 if(current.right != null)&#123; stack.push(current.right); &#125; if(current.left != null)&#123; stack.push(current.left); &#125; &#125; return lists;&#125; 栈信息 我们可以加一点 debug 日志，把访问的节点和 stack 的内容输出出来。 12345678910111213141516171819202122232425262728public List&lt;Integer&gt; preorderTraversal(TreeNode root)&#123; List&lt;Integer&gt; lists = new ArrayList&lt;&gt;(); if(root == null)&#123; return lists; &#125; Stack&lt;TreeNode&gt; stack = new Stack&lt;&gt;(); //根节点先入栈 stack.push(root); System.out.println(&quot;【根节点】root.value=&quot;+root.val+&quot; 入栈，STACK &quot; + root); TreeNode current = null; while(!stack.isEmpty())&#123; current = stack.pop(); lists.add(current.val); System.out.println(&quot; 【出栈】&quot;+current.val+&quot;，STACK &quot; + lists); System.out.println(&quot;【添加】添加 &quot;+current.val+&quot; 到 LIST&quot; + lists); //这里注意，要先压入右子结点，再压入左节点。因为栈是先进后出 if(current.right != null)&#123; stack.push(current.right); System.out.println(&quot;【右节点】入栈 &quot;+current.right.val+&quot; 到 STACK &quot; + stack); &#125; if(current.left != null)&#123; stack.push(current.left); System.out.println(&quot;【左节点】入栈 &quot;+current.left.val+&quot; 到 STACK &quot; + stack); &#125; &#125; return lists;&#125; 重新执行以下，日志如下： 1234567891011121314151617181920212223242526272829【根节点】root.value=4 入栈，STACK (4: (2: (1: null,null),(3: null,null)),(6: (5: null,null),(7: null,null)))【出栈】4，STACK []【添加】添加 4 到 LIST[4]【右节点】入栈 6 到 STACK [(6: (5: null,null),(7: null,null))]【左节点】入栈 2 到 STACK [(6: (5: null,null),(7: null,null)), (2: (1: null,null),(3: null,null))]【出栈】2，STACK [4]【添加】添加 2 到 LIST[4, 2]【右节点】入栈 3 到 STACK [(6: (5: null,null),(7: null,null)), (3: null,null)]【左节点】入栈 1 到 STACK [(6: (5: null,null),(7: null,null)), (3: null,null), (1: null,null)]【出栈】1，STACK [4, 2]【添加】添加 1 到 LIST[4, 2, 1]【出栈】3，STACK [4, 2, 1]【添加】添加 3 到 LIST[4, 2, 1, 3]【出栈】6，STACK [4, 2, 1, 3]【添加】添加 6 到 LIST[4, 2, 1, 3, 6]【右节点】入栈 7 到 STACK [(7: null,null)]【左节点】入栈 5 到 STACK [(7: null,null), (5: null,null)]【出栈】5，STACK [4, 2, 1, 3, 6]【添加】添加 5 到 LIST[4, 2, 1, 3, 6, 5]【出栈】7，STACK [4, 2, 1, 3, 6, 5]【添加】添加 7 到 LIST[4, 2, 1, 3, 6, 5, 7][4, 2, 1, 3, 6, 5, 7] 中序遍历 中序遍历的时候 访问到的元素是从小到大顺序排列的。 下面是递归遍历的模板 1234567中序遍历过程模板public void inorder(TreeNode root)&#123; if (root == null) return ; //终止条件 inorder(root.left); //访问左子树 对当前节点进行一些操作 //访问根节点-----在遍历过程中希望实现的操作 inorder(root.right); //访问右子树 &#125; 非递归的方式就是用栈来存取走过的路 1234567891011121314151617181920class Solution &#123; public List&lt;Integer&gt; inorderTraversal(TreeNode root) &#123; //前中后 ArrayList&lt;Integer&gt; list = new ArrayList&lt;&gt;(); if (root==null) return list; ArrayDeque&lt;TreeNode&gt; stack = new ArrayDeque&lt;&gt;(); TreeNode cur = root; while (cur!=null||!stack.isEmpty())&#123; while (cur!=null)&#123; stack.push(cur); cur = cur.left;//找到最左边的位置 &#125; cur = stack.pop();//找到最左边的了 list.add(cur.val); cur = cur.right;//开始访问右边的的了 &#125; return list; &#125;&#125; 我靠，双端队列，这个offer是插入尾部，这个push是addFirst，真是服了。 Deque 提供了双端的插入与移除操作，如下表： First Element (Head) Last Element (Tail) Throws exception Special value Throws exception Special value Insert addFirst(e) offerFirst(e) addLast(e) offerLast(e) Remove removeFirst() pollFirst() removeLast() pollLast() Examine getFirst() peekFirst() getLast() peekLast() Deque 和 Queue 方法的的对应关系如下： Queue Method Equivalent Deque Method add(e) addLast(e) offer(e) offerLast(e) remove() removeFirst() poll() pollFirst() element() getFirst() peek() peekFirst() Deque 和 Stack 方法的对应关系如下： Stack Method Equivalent Deque Method push(e) addFirst(e) pop() removeFirst() peek() peekFirst() 后序遍历：思路 ①先序遍历顺序：根节点-左孩子-右孩子 ②后序遍历顺序：左孩子-右孩子-根节点 ③后序遍历倒过来：根节点-右孩子-左孩子 ①和③对比发现，访问顺序只有左孩子和右孩子颠倒了一下 思路： 第一步，将二叉树按照先序非递归算法进行遍历， 注意在入栈的时候左右孩子入栈的顺序，先左后右。 第二步，将遍历得到的结果进行倒置。 思路牛逼666 123456789101112131415161718192021class Solution &#123; public List&lt;Integer&gt; postorderTraversal(TreeNode root) &#123; //后续遍历的非递归的实现 //后序是 左 右 中，倒过来就是 中 右 左 stack就是中，左，右 LinkedList&lt;Integer&gt; list = new LinkedList&lt;&gt;(); if (root==null) return list; ArrayDeque&lt;TreeNode&gt; stack = new ArrayDeque&lt;&gt;(); stack.push(root); while (!stack.isEmpty())&#123; TreeNode pop = stack.pop(); list.addFirst(pop.val);//直接添加到头部就可以反过来了 if (pop.left!=null)&#123; stack.push(pop.left); &#125; if (pop.right!=null)&#123; stack.push(pop.right); &#125; &#125; return list; &#125;&#125; 也可以直接reverse整个的list的结果： 1234567891011121314151617181920212223class Solution &#123; public List&lt;Integer&gt; postorderTraversal(TreeNode root) &#123; //非递归 // 就是先序的反过来的方式 左 右 中， // 中 右 左 饭过来 LinkedList&lt;Integer&gt; list = new LinkedList&lt;&gt;(); if (root==null) return list; ArrayDeque&lt;TreeNode&gt; stack = new ArrayDeque&lt;&gt;(); stack.push(root); while (!stack.isEmpty())&#123; TreeNode curr = stack.pop(); list.add(curr.val); if(curr.left!=null)&#123; stack.push(curr.left); &#125; if(curr.right!=null)&#123; stack.push(curr.right); &#125; &#125; Collections.reverse(list); return list; &#125;&#125; 236. 二叉树的最近公共祖先给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。 百度百科中最近公共祖先的定义为：“对于有根树 T 的两个节点 p、q，最近公共祖先表示为一个节点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。” 示例 1： 123输入：root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1输出：3解释：节点 5 和节点 1 的最近公共祖先是节点 3 。 示例 2： 123输入：root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4输出：5解释：节点 5 和节点 4 的最近公共祖先是节点 5 。因为根据定义最近公共祖先节点可以为节点本身。 示例 3： 12输入：root = [1,2], p = 1, q = 2输出：1 如果找到一个节点，发现左子树出现结点p，右子树出现节点q，或者 左子树出现结点q，右子树出现节点p，那么该节点就是节点p和q的最近公共祖先。 即情况一： 情况二： 如果递归函数有返回值，如何区分要搜索一条边，还是搜索整个树呢？ 搜索一条边的写法： 123if (递归函数(root-&gt;left)) return ;if (递归函数(root-&gt;right)) return ; 搜索整个树写法： 123left = 递归函数(root-&gt;left); // 左right = 递归函数(root-&gt;right); // 右left与right的逻辑处理; // 中 看出区别了没？ 在递归函数有返回值的情况下：如果要搜索一条边，递归函数返回值不为空的时候，立刻返回，如果搜索整个树，直接用一个变量left、right接住返回值，这个left、right后序还有逻辑处理的需要，也就是后序遍历中处理中间节点的逻辑（也是回溯）。 那么为什么要遍历整棵树呢？直观上来看，找到最近公共祖先，直接一路返回就可以了。 如图： 就像图中一样直接返回7，多美滋滋。 但事实上还要遍历根节点右子树（即使此时已经找到了目标节点了），也就是图中的节点4、15、20。 因为在如下代码的后序遍历中，如果想利用left和right做逻辑处理， 不能立刻返回，而是要等left与right逻辑处理完之后才能返回。 123left = 递归函数(root-&gt;left); // 左right = 递归函数(root-&gt;right); // 右left与right的逻辑处理; // 中 所以此时大家要知道我们要遍历整棵树。 完整流程图如下： 123456789101112131415161718192021class Solution &#123; public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) &#123; if (root == null || root == p || root == q) &#123; // 递归结束条件 return root; &#125; // 后序遍历 TreeNode left = lowestCommonAncestor(root.left, p, q); TreeNode right = lowestCommonAncestor(root.right, p, q); if(left == null &amp;&amp; right == null) &#123; // 若未找到节点 p 或 q return null; &#125;else if(left == null &amp;&amp; right != null) &#123; // 若找到一个节点 return right; &#125;else if(left != null &amp;&amp; right == null) &#123; // 若找到一个节点 return left; &#125;else &#123; // 若找到两个节点 return root; &#125; &#125;&#125; 114. 二叉树展开为链表给你二叉树的根结点 root ，请你将它展开为一个单链表： 展开后的单链表应该同样使用 TreeNode ，其中 right 子指针指向链表中下一个结点，而左子指针始终为 null 。 展开后的单链表应该与二叉树 先序遍历 顺序相同。 示例 1： 12输入：root = [1,2,5,3,4,null,6]输出：[1,null,2,null,3,null,4,null,5,null,6] 示例 2： 12输入：root = []输出：[] 本题需要将二叉树转化为列表，对于二叉树的题目，无非就以下几种解题思路： 先序遍历（深度优先搜索）中序遍历（深度优先搜索）（尤其二叉搜索树）后序遍历（深度优先搜索）层序遍历（广度优先搜索）（尤其按照层来解决问题的时候）序列化与反序列化（结构唯一性问题）根据我们的观察，本题应该是使用深度优先搜索的方式来解决，我们看看是怎样变成一个列表的。如图所示： 其实是分为三步： 首先将根节点的左子树变成链表其次将根节点的右子树变成链表最后将变成链表的右子树放在变成链表的左子树的最右边这就是一个递归的过程，递归的一个非常重要的点就是：不去管函数的内部细节是如何处理的，我们只看其函数作用以及输入与输出。对于函数flatten来说： 函数作用：将一个二叉树，原地将它展开为链表输入：树的根节点输出：无那我们就直接根据三步来写程序就可以了 代码 12345678910111213141516171819202122class Solution &#123; public void flatten(TreeNode root) &#123; if(root == null)&#123; return ; &#125; //将根节点的左子树变成链表 flatten(root.left); //将根节点的右子树变成链表 flatten(root.right); TreeNode temp = root.right; //把树的右边换成左边的链表 root.right = root.left; //记得要将左边置空 root.left = null; //找到树的最右边的节点 while(root.right != null) root = root.right; //把右边的链表接到刚才树的最右边的节点 root.right = temp; &#125;&#125; 纠正二叉搜索树输入：root &#x3D; [1,3,null,null,2]输出：[3,1,null,null,2]解释：3 不能是 1 的左孩子，因为 3 &gt; 1 。交换 1 和 3 使二叉搜索树有效。 1234567891011121314151617181920class Solution &#123; TreeNode pre = new TreeNode(Integer.MIN_VALUE); TreeNode err1 = null; TreeNode err2 = null; public void recoverTree(TreeNode root) &#123; inorder(root); int tmp = err1.val; err1.val = err2.val; err2.val = tmp; &#125; void inorder(TreeNode root) &#123; if(root == null) return; inorder(root.left); if(pre.val&gt;root.val&amp;&amp;err1==null) err1=pre;//！不相邻，前大后小，第一个错误就要取大的 if(pre.val&gt;root.val&amp;&amp;err1!=null) err2=root;//哦哦哦哦哦！不相邻，前大后小，第二个错误就要取小的 pre = root; inorder(root.right); &#125;&#125; 123456789101112131415161718class Solution &#123; public List&lt;Integer&gt; inorderTraversal(TreeNode root) &#123; //非递归方式实现中序遍历 List&lt;Integer&gt; res = new LinkedList(); Deque&lt;TreeNode&gt; stack = new ArrayDeque&lt;&gt;(); while(root!=null||!stack.isEmpty()) &#123; while(root!=null)&#123; stack.push(root); root=root.left; &#125; root = stack.pop(); res.add(root.val); root = root.right; &#125; return res; &#125; &#125; 深度优先遍历（递归）深度优先遍历：对每一个可能的分支路径深入到不能再深入为止，而且每个结点只能访问一次。对每一个可能的分支路径深入到不能再深入为止，而且每个结点只能访问一次。要特别注意的是，二叉树的深度优先遍历比较特殊，可以细分为先序遍历、中序遍历、后序遍历。具体说明如下： 先序遍历：对任一子树，先访问根，然后遍历其左子树，最后遍历其右子树。中序遍历：对任一子树，先遍历其左子树，然后访问根，最后遍历其右子树。后序遍历：对任一子树，先遍历其左子树，然后遍历其右子树，最后访问根。 前序遍历（中左右） 123456void traversal(TreeNode* cur, vector&lt;int&gt;&amp; vec) &#123; if (cur == NULL) return; vec.push_back(cur-&gt;val); // 中 ，同时也是处理节点逻辑的地方 traversal(cur-&gt;left, vec); // 左 traversal(cur-&gt;right, vec); // 右&#125; 中序遍历（左中右） 123456void traversal(TreeNode* cur, vector&lt;int&gt;&amp; vec) &#123; if (cur == NULL) return; traversal(cur-&gt;left, vec); // 左 vec.push_back(cur-&gt;val); // 中 ，同时也是处理节点逻辑的地方 traversal(cur-&gt;right, vec); // 右&#125; 后序遍历（左右中） 123456void traversal(TreeNode* cur, vector&lt;int&gt;&amp; vec) &#123; if (cur == NULL) return; traversal(cur-&gt;left, vec); // 左 traversal(cur-&gt;right, vec); // 右 vec.push_back(cur-&gt;val); // 中 ，同时也是处理节点逻辑的地方&#125; 剑指 Offer II 049. 从根节点到叶节点的路径数字之和难度中等49 给定一个二叉树的根节点 root ，树中每个节点都存放有一个 0 到 9 之间的数字。 每条从根节点到叶节点的路径都代表一个数字： 例如，从根节点到叶节点的路径 1 -&gt; 2 -&gt; 3 表示数字 123 。 计算从根节点到叶节点生成的 所有数字之和 。 叶节点 是指没有子节点的节点。 示例 1： 123456输入：root = [1,2,3]输出：25解释：从根到叶子节点路径 1-&gt;2 代表数字 12从根到叶子节点路径 1-&gt;3 代表数字 13因此，数字总和 = 12 + 13 = 25 12345678910111213class Solution &#123; public int sumNumbers(TreeNode root) &#123; return dfs(root,0); &#125; int dfs(TreeNode root,int preSum)&#123; if(root == null) return 0; int sum = preSum*10+root.val; if(root.left==null &amp;&amp; root.right == null)&#123; return sum; &#125; return dfs(root.left,sum) + dfs(root.right,sum); &#125;&#125; 广度优先遍历（队列）相关题解：0102.二叉树的层序遍历 12345678910111213141516171819vector&lt;vector&lt;int&gt;&gt; levelOrder(TreeNode* root) &#123; queue&lt;TreeNode*&gt; que; if (root != NULL) que.push(root); vector&lt;vector&lt;int&gt;&gt; result; while (!que.empty()) &#123; int size = que.size(); vector&lt;int&gt; vec; for (int i = 0; i &lt; size; i++) &#123;// 这里一定要使用固定大小size，不要使用que.size() TreeNode* node = que.front(); que.pop(); vec.push_back(node-&gt;val); // 节点处理的逻辑 if (node-&gt;left) que.push(node-&gt;left); if (node-&gt;right) que.push(node-&gt;right); &#125; result.push_back(vec); &#125; return result;&#125; 可以直接解决如下题目： 0102.二叉树的层序遍历 0199.二叉树的右视图 0637.二叉树的层平均值 0104.二叉树的最大深度 （迭代法） 0111.二叉树的最小深度（迭代法） 0222.完全二叉树的节点个数（迭代法） 剑指 Offer II 044. 二叉树每层的最大值-层序遍历给定一棵二叉树的根节点 root ，请找出该二叉树中每一层的最大值。 示例1： 12345678输入: root = [1,3,2,5,3,null,9]输出: [1,3,9]解释: 1 / \\ 3 2 / \\ \\ 5 3 9 12345678910111213141516171819202122class Solution &#123; public List&lt;Integer&gt; largestValues(TreeNode root) &#123; ArrayDeque&lt;TreeNode&gt; stack = new ArrayDeque&lt;&gt;(); List&lt;Integer&gt; ans = new LinkedList&lt;Integer&gt;(); if(root == null) return ans; stack.push(root); while(!stack.isEmpty())&#123; int size = stack.size(); int tempMax =Integer.MIN_VALUE; for(int i = 0;i&lt;size;i++)&#123; TreeNode poped = stack.pop(); if(poped.left!=null) stack.addLast(poped.left); if(poped.right!=null) stack.addLast(poped.right); tempMax = Math.max(tempMax,poped.val); &#125; ans.add(tempMax); &#125; return ans; &#125;&#125; 剑指 Offer II 045. 二叉树最底层最左边的值-层序遍历难度中等40 给定一个二叉树的 根节点 root，请找出该二叉树的 最底层 最左边 节点的值。 假设二叉树中至少有一个节点。 示例 1: 12输入: root = [2,1,3]输出: 1 哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈 写出来了 12345678910111213141516171819202122class Solution &#123; public int findBottomLeftValue(TreeNode root) &#123; ArrayDeque&lt;TreeNode&gt; stack = new ArrayDeque&lt;&gt;(); int ans = 0; if(root == null) return ans; stack.push(root); while(!stack.isEmpty())&#123; int size = stack.size(); int tempMax =Integer.MIN_VALUE; ans = stack.peek().val; for(int i = 0;i&lt;size;i++)&#123; TreeNode poped = stack.pop(); if(poped.left!=null) stack.addLast(poped.left); if(poped.right!=null) stack.addLast(poped.right); tempMax = Math.max(tempMax,poped.val); &#125; &#125; return ans; &#125;&#125; 剑指 Offer II 046. 二叉树的右侧视图难度中等43 给定一个二叉树的 根节点 root，想象自己站在它的右侧，按照从顶部到底部的顺序，返回从右侧所能看到的节点值。 示例 1: 12输入: [1,2,3,null,5,null,4]输出: [1,3,4] 哈哈哈哈哈哈哈，层序遍历，每一层最右边的就是需要的右侧的试图 1234567891011121314151617181920212223class Solution &#123; public List&lt;Integer&gt; rightSideView(TreeNode root) &#123; ArrayDeque&lt;TreeNode&gt; stack = new ArrayDeque&lt;&gt;(); List&lt;Integer&gt; ans = new LinkedList&lt;Integer&gt;(); if(root == null) return ans; stack.push(root); while(!stack.isEmpty())&#123; int size = stack.size(); for(int i = 0;i&lt;size-1;i++)&#123; TreeNode poped = stack.pop(); if(poped.left!=null) stack.addLast(poped.left); if(poped.right!=null) stack.addLast(poped.right); &#125; TreeNode poped = stack.pop(); ans.add(poped.val); if(poped.left!=null) stack.addLast(poped.left); if(poped.right!=null) stack.addLast(poped.right); &#125; return ans; &#125;&#125; 117. 填充每个节点的下一个右侧节点指针 II给定一个二叉树： 123456struct Node &#123; int val; Node *left; Node *right; Node *next;&#125; 填充它的每个 next 指针，让这个指针指向其下一个右侧节点。如果找不到下一个右侧节点，则将 next 指针设置为 NULL 。 初始状态下，所有 next 指针都被设置为 NULL 。 示例 1： 123输入：root = [1,2,3,4,5,null,7]输出：[1,#,2,3,#,4,5,7,#]解释：给定二叉树如图 A 所示，你的函数应该填充它的每个 next 指针，以指向其下一个右侧节点，如图 B 所示。序列化输出按层序遍历顺序（由 next 指针连接），&#x27;#&#x27; 表示每层的末尾。 123456789101112131415161718192021222324252627class Solution &#123; public Node connect(Node root) &#123; Node dummy = root; Queue&lt;Node&gt; list = new LinkedList&lt;&gt;();//stack 实现层序遍历 if(root==null) return root; list.add(root); while(!list.isEmpty())&#123; Node curr = null; Node prev = null; int size = list.size(); for(int i = 0;i&lt;size;i++)&#123; if(i==0)&#123; prev = list.poll(); curr = prev; &#125;else&#123; curr = list.poll(); prev.next = curr; prev = prev.next; &#125; if(curr.left!=null) list.add(curr.left); if(curr.right!=null) list.add(curr.right); &#125; prev.next = null; &#125; return dummy; &#125;&#125; 二叉树深度1234int getDepth(TreeNode* node) &#123; if (node == NULL) return 0; return 1 + max(getDepth(node-&gt;left), getDepth(node-&gt;right));&#125; 二叉树节点数量1234int countNodes(TreeNode* root) &#123; if (root == NULL) return 0; return 1 + countNodes(root-&gt;left) + countNodes(root-&gt;right);&#125; 919. 完全二叉树插入器完全二叉树 是每一层（除最后一层外）都是完全填充（即，节点数达到最大）的，并且所有的节点都尽可能地集中在左侧。 设计一种算法，将一个新节点插入到一个完整的二叉树中，并在插入后保持其完整。 实现 CBTInserter 类: CBTInserter(TreeNode root) 使用头节点为 root 的给定树初始化该数据结构； CBTInserter.insert(int v) 向树中插入一个值为 Node.val == val的新节点 TreeNode。使树保持完全二叉树的状态，并返回插入节点 TreeNode 的父节点的值； CBTInserter.get_root() 将返回树的头节点。 示例 1： 12345678910111213141516171819202122232425262728293031class CBTInserter &#123; List&lt;TreeNode&gt; list = new ArrayList&lt;&gt;(); int idx = 0; public CBTInserter(TreeNode root) &#123; list.add(root); int cur =0; //这里就是把传进来的二叉树进行序列化 while(cur&lt;list.size()) &#123; // 如果当前的长度比较长的话 TreeNode node = list.get(cur); if(node.left!=null) list.add(node.left); if(node.right!=null) list.add(node.right); cur++; &#125; &#125; public int insert(int val) &#123; TreeNode node = new TreeNode(val); while(list.get(idx).left!=null &amp;&amp; list.get(idx).right!=null) idx++; TreeNode father = list.get(idx);//找到了左边或者右边的子节点有位置的地方 if(father.left==null) father.left = node; else if(father.right == null) father.right =node; list.add(node); return father.val; &#125; public TreeNode get_root() &#123; return list.get(0); &#125;&#125; 98. 验证二叉搜索树给你一个二叉树的根节点 root ，判断其是否是一个有效的二叉搜索树。 有效 二叉搜索树定义如下： 节点的左子树只包含 小于 当前节点的数。 节点的右子树只包含 大于 当前节点的数。 所有左子树和右子树自身必须也是二叉搜索树。 示例 1： 12输入：root = [2,1,3]输出：true 12345678910111213141516171819202122class Solution &#123; public boolean isValidBST(TreeNode root) &#123; if (root==null) return true; TreeNode leftNode = root.left; TreeNode rightNode = root.right; if (leftNode!=null)&#123; while (leftNode.right!=null)&#123; leftNode = leftNode.right;//左边子树的最大值 &#125; if (leftNode.val&gt;=root.val) return false; &#125; if (rightNode!=null)&#123; while (rightNode.left!=null)&#123; rightNode = rightNode.left;//右边子树的最小值 &#125; if (rightNode.val&lt;=root.val) return false; &#125; return isValidBST(root.left) &amp;&amp; isValidBST(root.right); &#125; //只要根节点大于左子树的最大值，小于右子树的最小值即可。&#125; 回溯算法回溯是递归的副产品，只要有递归就会有回溯。 因为回溯的本质是穷举，穷举所有可能，然后选出我们想要的答案，如果想让回溯法高效一些，可以加一些剪枝的操作，但也改不了回溯法就是穷举的本质。 那么既然回溯法并不高效为什么还要用它呢？ 因为没得选，一些问题能暴力搜出来就不错了，撑死了再剪枝一下，还没有更高效的解法。 回溯法，一般可以解决如下几种问题： 组合问题：N个数里面按一定规则找出k个数的集合 切割问题：一个字符串按一定规则有几种切割方式 子集问题：一个N个数的集合里有多少符合条件的子集 排列问题：N个数按一定规则全排列，有几种排列方式 棋盘问题：N皇后，解数独等等 回溯法解决的问题都可以抽象为树形结构，是的，我指的是所有回溯法的问题都可以抽象为树形结构！ 因为回溯法解决的都是在集合中递归查找子集，在上面我们提到了，回溯法一般是在集合中递归搜索，集合的大小构成了树的宽度，递归的深度构成的树的深度。 如图： 递归就要有终止条件，所以必然是一棵高度有限的树（N叉树）。 如果是求目标target，就是找到target之后是多少层就是多少层。 12345678910111213void backtracking(参数) &#123; if (终止条件) &#123; 存放结果; return; &#125;a for (选择：本层集合中元素（树中节点孩子的数量就是集合的大小）) &#123; 处理节点; backtracking(路径，选择列表); // 递归 回溯，撤销处理结果 &#125;&#125; 回溯函数遍历过程伪代码如下： 12345for (选择：本层集合中元素（树中节点孩子的数量就是集合的大小）) &#123; 处理节点; backtracking(路径，选择列表); // 递归 回溯，撤销处理结果&#125; for循环就是遍历集合区间，可以理解一个节点有多少个孩子，这个for循环就执行多少次。 40. 组合总和 II给定一个候选人编号的集合 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。 candidates 中的每个数字在每个组合中只能使用 一次 。 注意：解集不能包含重复的组合。 示例 1: 12345678输入: candidates = [10,1,2,7,6,1,5], target = 8,输出:[[1,1,6],[1,2,5],[1,7],[2,6]] 12345678910111213141516171819202122232425262728293031323334class Solution &#123; List&lt;List&lt;Integer&gt;&gt; ans = new ArrayList&lt;&gt;(); List&lt;Integer&gt; path = new ArrayList&lt;&gt;(); int sum = 0; public List&lt;List&lt;Integer&gt;&gt; combinationSum2(int[] candidates, int target) &#123; Arrays.sort(candidates); traverse(candidates,target,0); return ans; &#125; private void traverse(int[] candidates,int target,int idx)&#123; if (sum==target)&#123; ans.add(new ArrayList&lt;&gt;(path)); return; &#125; if (sum&gt;target) return; for (int i = idx; i &lt; candidates.length; i++) &#123; //这里是在遍历集合区间，可以理解一个节点有多少个孩子，idx就是保证每一次遍历后 //孩子节点都会少一个。 int candidate = candidates[i]; if (i&gt;idx&amp;&amp;candidates[i-1]==candidate) continue; //去除重复的，比如[1,2,2,3,3,4,5] 这样遍历的时候，就会去除重复的2和重复的3 //wocao,这里确实碉堡了 //如果不是上这样，结果就是【1 2 6】、【1 2 6】这样会用重复的结果， if (candidate &gt;target) return; sum+=candidate; path.add(candidate); traverse(candidates, target, i+1); sum-=candidate; path.remove(path.size()-1); &#125; &#125;&#125; 90. 子集 II给你一个整数数组 nums ，其中可能包含重复元素，请你返回该数组所有可能的子集（幂集）。 解集 不能 包含重复的子集。返回的解集中，子集可以按 任意顺序 排列。 示例 1： 12输入：nums = [1,2,2]输出：[[],[1],[1,2],[1,2,2],[2],[2,2]] 示例 2： 12输入：nums = [0]输出：[[],[0]] 123456789101112131415161718192021222324class Solution &#123; List&lt;List&lt;Integer&gt;&gt; ans = new ArrayList&lt;&gt;(); List&lt;Integer&gt; path = new ArrayList&lt;&gt;();//过程路径 public List&lt;List&lt;Integer&gt;&gt; subsetsWithDup(int[] nums) &#123; Arrays.sort(nums); //数组元素重复，但是搭配不能重复， vertrace(nums,0); return ans; &#125; void vertrace(int[] nums,int idx)&#123; ans.add(new ArrayList&lt;&gt;(path));//存储 for (int i = idx; i &lt; nums.length; i++) &#123; //回溯算法注意遍历的广度和深度 if (i&gt;idx&amp;&amp;nums[i-1]==nums[i])&#123; continue;//如果同一个树树干上使用过相同的，就跳过 &#125; path.add(nums[i]); vertrace(nums,i+1); path.remove(path.size()-1); &#125; return; &#125;&#125; 47.全排列 II力扣题目链接 给定一个可包含重复数字的序列 nums ，按任意顺序 返回所有不重复的全排列。 示例 1： 输入：nums &#x3D; [1,1,2] 输出：[[1,1,2], [1,2,1], [2,1,1]] 示例 2： 输入：nums &#x3D; [1,2,3] 输出：[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]] 提示： 1 &lt;&#x3D; nums.length &lt;&#x3D; 8 -10 &lt;&#x3D; nums[i] &lt;&#x3D; 10 这道题目和46.全排列的区别在与给定一个可包含重复数字的序列，要返回所有不重复的全排列。 这里又涉及到去重了。 在40.组合总和II 、90.子集II我们分别详细讲解了组合问题和子集问题如何去重。 那么排列问题其实也是一样的套路。 还要强调的是去重一定要对元素进行排序，这样我们才方便通过相邻的节点来判断是否重复使用了。 我以示例中的 [1,1,2]为例 （为了方便举例，已经排序）抽象为一棵树，去重过程如图： 如果是按照used[i-1]&#x3D;true时候：按树枝来减 图中我们对同一树层，前一位（也就是nums[i-1]）如果使用过，那么就进行去重。 一般来说：组合问题和排列问题是在树形结构的叶子节点上收集结果，而子集问题就是取树上所有节点的结果。 在46.全排列中已经详细讲解了排列问题的写法，在40.组合总和II 、90.子集II中详细讲解了去重的写法，所以这次我就不用回溯三部曲分析了，直接给出代码，如下： 12345678910111213141516171819202122232425262728293031323334353637class Solution &#123; //存放结果 List&lt;List&lt;Integer&gt;&gt; result = new ArrayList&lt;&gt;(); //暂存结果 List&lt;Integer&gt; path = new ArrayList&lt;&gt;(); public List&lt;List&lt;Integer&gt;&gt; permuteUnique(int[] nums) &#123; boolean[] used = new boolean[nums.length]; Arrays.fill(used, false); Arrays.sort(nums); backTrack(nums, used); return result; &#125; private void backTrack(int[] nums, boolean[] used) &#123; if (path.size() == nums.length) &#123; result.add(new ArrayList&lt;&gt;(path)); return; &#125; for (int i = 0; i &lt; nums.length; i++) &#123; // used[i - 1] == true，说明同⼀树⽀nums[i - 1]使⽤过 // used[i - 1] == false，说明同⼀树层nums[i - 1]使⽤过 // 如果同⼀树层nums[i - 1]使⽤过则直接跳过 if (i &gt; 0 &amp;&amp; nums[i] == nums[i - 1] &amp;&amp; used[i - 1] == false) &#123; continue; &#125; //如果同⼀树⽀nums[i]没使⽤过开始处理 if (used[i] == false) &#123; used[i] = true;//标记同⼀树⽀nums[i]使⽤过，防止同一树枝重复使用 path.add(nums[i]); backTrack(nums, used); path.remove(path.size() - 1);//回溯，说明同⼀树层nums[i]使⽤过，防止下一树层重复 used[i] = false;//回溯 &#125; &#125; &#125;&#125; 大家发现，去重最为关键的代码为： 123if (i &gt; 0 &amp;&amp; nums[i] == nums[i - 1] &amp;&amp; used[i - 1] == false) &#123; continue;&#125; **如果改成 used[i - 1] == true， 也是正确的!**，去重代码如下： 123if (i &gt; 0 &amp;&amp; nums[i] == nums[i - 1] &amp;&amp; used[i - 1] == true) &#123; continue;&#125; 这是为什么呢，就是上面我刚说的，如果要对树层中前一位去重，就用used[i - 1] == false，如果要对树枝前一位去重用used[i - 1] == true。 对于排列问题，树层上去重和树枝上去重，都是可以的，但是树层上去重效率更高！ 这么说是不是有点抽象？ 来来来，我就用输入: [1,1,1] 来举一个例子。 树层上去重(used[i - 1] &#x3D;&#x3D; false)，的树形结构如下： 树枝上去重（used[i - 1] &#x3D;&#x3D; true）的树型结构如下： 大家应该很清晰的看到，树层上对前一位去重非常彻底，效率很高，树枝上对前一位去重虽然最后可以得到答案，但是做了很多无用搜索。 总结 这道题其实还是用了我们之前讲过的去重思路，但有意思的是，去重的代码中，这么写： 123if (i &gt; 0 &amp;&amp; nums[i] == nums[i - 1] &amp;&amp; used[i - 1] == false) &#123; continue;&#125; 和这么写： 123if (i &gt; 0 &amp;&amp; nums[i] == nums[i - 1] &amp;&amp; used[i - 1] == true) &#123; continue;&#125; 都是可以的，这也是很多同学做这道题目困惑的地方，知道used[i - 1] == false也行而used[i - 1] == true也行，但是就想不明白为啥。 所以我通过举[1,1,1]的例子，把这两个去重的逻辑分别抽象成树形结构，大家可以一目了然：为什么两种写法都可以以及哪一种效率更高！ 是不是豁然开朗了！！ 77. 组合给定两个整数 n 和 k，返回范围 [1, n] 中所有可能的 k 个数的组合。 你可以按 任何顺序 返回答案。 示例 1： 12345678910输入：n = 4, k = 2输出：[ [2,4], [3,4], [2,3], [1,2], [1,3], [1,4],] 12345678910111213141516171819202122232425class Solution &#123; List&lt;List&lt;Integer&gt;&gt; res= new ArrayList&lt;&gt;(); LinkedList&lt;Integer&gt; path = new LinkedList&lt;&gt;(); public List&lt;List&lt;Integer&gt;&gt; combine(int n, int k) &#123; backTrace(n,k,1);//递归函数返回值为void，一般直接就在参数里面修改 return res; &#125; void backTrace(int n,int k, int s)&#123; if(path.size()==k)&#123; res.add(new ArrayList&lt;&gt;(path)); return; &#125; /* 已经选择的元素个数：path.size(); 还需要的元素个数为: k - path.size(); 在集合n中至多要从该起始位置 : n - (k - path.size()) + 1 */ //可选择的范围随着选择的进行而收缩，调整可选择的范围，就是要靠s for(int i =s;i&lt;=n-(k-path.size())+1;i++ )&#123; path.add(i); backTrace(n,k,i+1); path.removeLast(); &#125; &#125;&#125; 如果 n = 7, k = 4，从 5 开始搜索就已经没有意义了，这是因为：即使把 5 选上，后面的数只有 6 和 7，一共就 3 个候选数，凑不出 4 个数的组合。 因此在集合n中至多要从该起始位置 : n - (k - path.size()) + 1 12for (int i = begin; i &lt;= n-(k-path.size())+1; i++) &#123; 17. 电话号码的字母组合给定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。答案可以按 任意顺序 返回。 给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。 示例 1： 12输入：digits = &quot;23&quot;输出：[&quot;ad&quot;,&quot;ae&quot;,&quot;af&quot;,&quot;bd&quot;,&quot;be&quot;,&quot;bf&quot;,&quot;cd&quot;,&quot;ce&quot;,&quot;cf&quot;] 123456789101112131415161718192021222324252627282930313233343536373839404142import java.util.ArrayList;import java.util.HashMap;import java.util.List;//leetcode submit region begin(Prohibit modification and deletion)class Solution &#123; HashMap&lt;Integer,String&gt; map = new HashMap&lt;&gt;()&#123; &#123; put(2,&quot;abc&quot;); put(3,&quot;def&quot;); put(4,&quot;ghi&quot;); put(5,&quot;jkl&quot;); put(6,&quot;mno&quot;); put(7,&quot;pqrs&quot;); put(8,&quot;tuv&quot;); put(9,&quot;wxyz&quot;); &#125; &#125;; List&lt;String&gt; ans = new ArrayList&lt;&gt;(); StringBuilder sb = new StringBuilder(); public List&lt;String&gt; letterCombinations(String digits) &#123; if (digits.length()==0) return ans; back(digits,0,0); //回溯算法，就是遍历 return ans; &#125; void back(String digits,int idx,int charIdx)&#123; if (idx==digits.length())&#123; ans.add(sb.toString()); return; &#125; //遍历数字， char c = digits.charAt(idx); String s = map.get(c - &#x27;0&#x27;); for (int j = 0; j &lt; s.length(); j++) &#123; //单个字符的长度 sb.append(s.charAt(j)); back(digits,idx+1,j); sb.deleteCharAt(sb.length()-1); &#125; &#125;&#125; 剑指 Offer II 084. 含有重复元素集合的全排列 给定一个可包含重复数字的整数集合 nums ，按任意顺序 返回它所有不重复的全排列。 示例 1： 12345输入：nums = [1,1,2]输出：[[1,1,2], [1,2,1], [2,1,1]] 1234567891011121314151617181920212223242526272829class Solution &#123; List&lt;List&lt;Integer&gt;&gt; ans = new ArrayList&lt;&gt;(); List&lt;Integer&gt; path = new ArrayList&lt;&gt;(); boolean[] used; public List&lt;List&lt;Integer&gt;&gt; permuteUnique(int[] nums) &#123; Arrays.sort(nums);//排列一下 used = new boolean[nums.length]; back(nums); return ans; &#125; void back(int[] nums)&#123; if (path.size() == nums.length)&#123; ans.add(new ArrayList&lt;&gt;(path)); return; &#125; int last = -11; for (int i = 0; i &lt; nums.length; i++) &#123; if ((used[i] || i&gt;0 &amp;&amp; nums[i]==nums[i-1] &amp;&amp; used[i-1])) continue;//去掉重 // i&gt;0 &amp;&amp; nums[i]==nums[i-1] &amp;&amp; used[i-1] 这里应该是说如果当前元素和上一个相同，有可能是可以继续使用的// 判断为不能使用的话，得加一个判断，判断之前的元素也是用过的，那就可以了 path.add(nums[i]); used[i]= true; back(nums); used[i]= false; path.remove(path.size()-1); &#125; &#125;&#125; 93. 复原 IP 地址有效 IP 地址 正好由四个整数（每个整数位于 0 到 255 之间组成，且不能含有前导 0），整数之间用 &#39;.&#39; 分隔。 例如：&quot;0.1.2.201&quot; 和 &quot;192.168.1.1&quot; 是 有效 IP 地址，但是 &quot;0.011.255.245&quot;、&quot;192.168.1.312&quot; 和 &quot;192.168@1.1&quot; 是 无效 IP 地址。 给定一个只包含数字的字符串 s ，用以表示一个 IP 地址，返回所有可能的有效 IP 地址，这些地址可以通过在 s 中插入 &#39;.&#39; 来形成。你 不能 重新排序或删除 s 中的任何数字。你可以按 任何 顺序返回答案。 示例 1： 12输入：s = &quot;25525511135&quot;输出：[&quot;255.255.11.135&quot;,&quot;255.255.111.35&quot;] 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647class Solution &#123; List&lt;String&gt; ans = new ArrayList&lt;&gt;(); public List&lt;String&gt; restoreIpAddresses(String s) &#123; //startIndex一定是需要的，因为不能重复分割，记录下一层递归分割的起始位置。 //本题我们还需要一个变量pointNum，记录添加逗点的数量。 if (s.length()&gt;12) return ans; backTrace(s,0,0); return ans; &#125; void backTrace(String s, int begin,int pointNumber) &#123; if (pointNumber==3)&#123; //此时已经到达了最后一个阶段，判断begin到最后的一段是否合法，不合法就不添加 if (isValid(s,begin,s.length()-1)) ans.add(s); return; &#125; for (int i = begin; i &lt; s.length(); i++) &#123; if (isValid(s,begin,i))&#123; s=s.substring(0, i + 1) + &quot;.&quot; + s.substring(i + 1); //插入一个。 pointNumber++; backTrace(s,i+2,pointNumber); pointNumber--; s=s.substring(0, i + 1) + s.substring(i + 2); &#125;else &#123; continue; &#125; &#125; &#125; boolean isValid(String s,int begin,int end) &#123; if (begin&gt;end) return false; if (s.charAt(begin)==&#x27;0&#x27;&amp;&amp;begin!=end)&#123; return false; //0开头的数字不合法，此时begin和end不相等的 &#125; int num =0; for (int i = begin; i &lt;= end; i++) &#123; if (s.charAt(i)&gt;&#x27;9&#x27;||s.charAt(i)&lt;&#x27;0&#x27;) return false; num = num *10 + (s.charAt(i)-&#x27;0&#x27;); if (num&gt;255) return false; &#125; return true; &#125;&#125; 437. 路径总和 III给定一个二叉树的根节点 root ，和一个整数 targetSum ，求该二叉树里节点值之和等于 targetSum 的 路径 的数目。 路径 不需要从根节点开始，也不需要在叶子节点结束，但是路径方向必须是向下的（只能从父节点到子节点）。 示例 1： 123输入：root = [10,5,-3,3,2,null,11,3,-2,null,1], targetSum = 8输出：3解释：和等于 8 的路径有 3 条，如图所示。 12345678910111213141516171819202122232425class Solution &#123; HashMap&lt;Long,Integer&gt; map = new HashMap&lt;&gt;(); public int pathSum(TreeNode root, int targetSum) &#123;// 回溯算法 map.put(0L,1);//存储前缀和为0的次数为1； return recursion(root,targetSum,0L); &#125; int recursion(TreeNode root,int targetSum,Long currSum) &#123; if (root==null) return 0; int res = 0; currSum+=root.val; // 看看root到当前节点这条路上是否存在[节点前缀和加target] 为currSum的路径 //currSum-target相当于找路径的起点，起点的sum+target=currSum，当前点到起点的距离就是target //因为currSUm是前缀和，也就是前面所有的都加起来，如果之前走过的路上有事currSum-target的位置，那么 //那个位置到现在，currSum-(curr-target)=target，不就是一个你需要的target吗？ res+=map.getOrDefault(currSum-targetSum,0); // 更新路径上当前节点前缀和的个数 map.put(currSum,map.getOrDefault(currSum,0)+1); res+=recursion(root.left,targetSum,currSum); res+=recursion(root.right,targetSum,currSum); map.put(currSum,map.getOrDefault(currSum,0)-1); return res; &#125;&#125; :star2: 112. 路径总和给你二叉树的根节点 root 和一个表示目标和的整数 targetSum 。判断该树中是否存在 根节点到叶子节点 的路径，这条路径上所有节点值相加等于目标和 targetSum 。如果存在，返回 true ；否则，返回 false 。 叶子节点 是指没有子节点的节点。 示例 1： 123输入：root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22输出：true解释：等于目标和的根节点到叶节点路径如上图所示。 示例 2： 123456输入：root = [1,2,3], targetSum = 5输出：false解释：树中存在两条根节点到叶子节点的路径：(1 --&gt; 2): 和为 3(1 --&gt; 3): 和为 4不存在 sum = 5 的根节点到叶子节点的路径。 示例 3： 123输入：root = [], targetSum = 0输出：false解释：由于树是空的，所以不存在根节点到叶子节点的路径。 https://www.bilibili.com/video/BV19t4y1L7CR/?t=46 1234567891011121314151617181920212223242526272829// 标准回溯的写法：class Solution &#123; public boolean hasPathSum(TreeNode root, int targetSum) &#123; //要搜索其中一条符合条件的路径，那么递归一定需要返回值，因为遇到符合条件的路径了就要及时返回。 //遍历的路线，并不要遍历整棵树，所以递归函数需要返回值，可以用bool类型表示。 if(root==null) return false; return recur(root,targetSum-root.val); &#125; boolean recur(TreeNode root,int targetSum)&#123; if(root==null) return false;// targetSum-=root.val; if(root.left==null&amp;&amp;root.right==null&amp;&amp;targetSum==0) return true; if(root.left==null&amp;&amp;root.right==null) return false; if(root.left!=null)&#123;// targetSum-=root.left.val;// if (recur(root.left,targetSum)) return true;// targetSum+=root.left.val; //上面的代码可以缩减为一行，其实你只要穿一个虚幻的树枝下去，不用实际更改targetSum的值就可以回溯 if (recur(root.left,targetSum-root.left.val)) return true; &#125; if(root.right!=null)&#123; targetSum-=root.right.val; if (recur(root.right,targetSum)) return true; targetSum+=root.right.val; &#125; return false; &#125;&#125; 113. 路径总和 II给你二叉树的根节点 root 和一个整数目标和 targetSum ，找出所有 从根节点到叶子节点 路径总和等于给定目标和的路径。 叶子节点 是指没有子节点的节点。 示例 1： 12输入：root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22输出：[[5,4,11,2],[5,8,4,5]] 示例 2： 12输入：root = [1,2,3], targetSum = 5输出：[] 示例 3： 12输入：root = [1,2], targetSum = 0输出：[] 123456789101112131415161718192021class Solution &#123; List&lt;List&lt;Integer&gt;&gt; ans = new ArrayList&lt;&gt;(); List&lt;Integer&gt; path = new ArrayList&lt;&gt;(); public List&lt;List&lt;Integer&gt;&gt; pathSum(TreeNode root, int targetSum) &#123; //如果需要搜索整棵二叉树且不用处理递归返回值，递归函数就不要返回值。 recur(root,targetSum); return ans; &#125; void recur(TreeNode root,int target)&#123; if(root==null) return; path.add(root.val); target-=root.val; if (root.left==null&amp;&amp;root.right==null&amp;&amp;target==0)&#123; ans.add(new ArrayList&lt;&gt;(path)); &#125; recur(root.left,target); recur(root.right,target); path.remove(path.size()-1); &#125;&#125; 123456789101112131415161718192021222324252627282930313233343536373839// 标准回溯的写法：class Solution &#123; List&lt;List&lt;Integer&gt;&gt; ans = new ArrayList&lt;&gt;(); List&lt;Integer&gt; path = new ArrayList&lt;&gt;(); public List&lt;List&lt;Integer&gt;&gt; pathSum(TreeNode root, int targetSum) &#123; if(root==null) return ans; //如果需要搜索整棵二叉树且不用处理递归返回值，递归函数就不要返回值。 path.add(root.val); recur(root,targetSum-root.val);//这里对最开始的处理了，就得在path加上这个val。 return ans; &#125; void recur(TreeNode root,int target)&#123; if (root.left==null&amp;&amp;root.right==null&amp;&amp;target==0)&#123; ans.add(new ArrayList&lt;&gt;(path)); return; &#125; if (root.left==null&amp;&amp;root.right==null)&#123; return; &#125; if(root.left!=null)&#123; path.add(root.left.val); target-=root.left.val; recur(root.left,target); target+=root.left.val; path.remove(path.size()-1); &#125; if(root.right!=null)&#123; path.add(root.right.val); target-=root.right.val; recur(root.right,target); target+=root.right.val; path.remove(path.size()-1); &#125; return; &#125;&#125; 剑指 Offer II 086. 分割回文子字符串给定一个字符串 s ，请将 s 分割成一些子串，使每个子串都是 回文串 ，返回 s 所有可能的分割方案。 回文串 是正着读和反着读都一样的字符串。 示例 1： 12输入：s = &quot;google&quot;输出：[[&quot;g&quot;,&quot;o&quot;,&quot;o&quot;,&quot;g&quot;,&quot;l&quot;,&quot;e&quot;],[&quot;g&quot;,&quot;oo&quot;,&quot;g&quot;,&quot;l&quot;,&quot;e&quot;],[&quot;goog&quot;,&quot;l&quot;,&quot;e&quot;]] 12345678910111213141516171819202122232425262728293031323334353637class Solution &#123; List&lt;List&lt;String&gt;&gt; ans = new ArrayList&lt;&gt;(); List&lt;String&gt; path = new ArrayList&lt;&gt;(); private String s; public String[][] partition(String s) &#123; this.s = s; back(0); String[][] res = new String[ans.size()][]; for (int i = 0; i &lt; ans.size(); i++) &#123; String[] temp = new String[ans.get(i).size()]; for (int j = 0; j &lt; ans.get(i).size(); j++) &#123; temp[j] = ans.get(i).get(j); &#125; res[i] = temp;//这里的temp每一个都是不同的。 &#125; return res; &#125; void back(int idx)&#123; if (idx == s.length())&#123; ans.add(new ArrayList&lt;&gt;(path)); return; &#125; for (int i = idx; i &lt; s.length(); i++) &#123; if (isPali(idx,i)) &#123; path.add(s.substring(idx,i+1)); back(i+1); path.remove(path.size()-1); &#125; &#125; &#125; boolean isPali(int left,int right)&#123; while (left &lt; right) if (s.charAt(left++) != s.charAt(right--)) return false; return true; &#125;&#125; 79.单词搜索给定一个 m x n 二维字符网格 board 和一个字符串单词 word 。如果 word 存在于网格中，返回 true ；否则，返回 false 。 单词必须按照字母顺序，通过相邻的单元格内的字母构成，其中“相邻”单元格是那些水平相邻或垂直相邻的单元格。同一个单元格内的字母不允许被重复使用。 输入：board &#x3D; [[“A”,”B”,”C”,”E”],[“S”,”F”,”C”,”S”],[“A”,”D”,”E”,”E”]], word &#x3D; “ABCCED” 输出：true 12345678910111213141516171819202122232425class Solution &#123; public boolean exist(char[][] board, String word) &#123; for (int i = 0; i &lt; board.length; i++) &#123; for (int j = 0; j &lt; board[0].length; j++) &#123; if (dfs(board,word,0,i,j)) return true; &#125; &#125; return false; &#125; int[] dx = new int[]&#123;-1,0,1,0&#125;,dy = new int[]&#123;0,1,0,-1&#125;; boolean dfs(char[][] board,String word,int u,int x,int y)&#123; if (board[x][y]!=word.charAt(u)) return false; if (u==word.length()-1) return true; char c = board[x][y]; board[x][y]=&#x27;.&#x27;; for (int i = 0; i &lt; 4; i++) &#123; int a = x+dx[i],b = y+dy[i]; if (a&lt;0||a&gt;=board.length||b&lt;0||b&gt;=board[0].length||board[a][b]==&#x27;.&#x27;) continue; if (dfs(board,word,u+1,a,b)) return true; &#125; board[x][y]=c; return false; &#125;&#125; 513. 找树左下角的值给定一个二叉树的 根节点 root，请找出该二叉树的 最底层 最左边 节点的值。 假设二叉树中至少有一个节点。 示例 1: 12输入: root = [2,1,3]输出: 1 示例 2: 12输入: [1,2,3,4,null,5,6,null,null,7]输出: 7 1234567891011121314151617181920212223class Solution &#123; int deepest = Integer.MIN_VALUE; int ans = 0; public int findBottomLeftValue(TreeNode root) &#123; recur(root,1); return ans; &#125; void recur(TreeNode root,int depth)&#123; if (root==null) return; if (root.left==null&amp;&amp;root.right==null&amp;&amp;depth&gt;deepest)&#123; ans = root.val; deepest = Math.max(deepest,depth); &#125;// if (root.left!=null)&#123;// recur(root.left,depth+1);// &#125; recur(root.left,depth+1);//还可以缩减成这样，因为就算是null传进去了，也无所谓// if (root.right!=null)&#123;// recur(root.right,depth+1);// &#125; recur(root.right,depth+1); &#125;&#125; 22. 括号生成数字 n 代表生成括号的对数，请你设计一个函数，用于能够生成所有可能的并且 有效的 括号组合。 示例 1： 12输入：n = 3输出：[&quot;((()))&quot;,&quot;(()())&quot;,&quot;(())()&quot;,&quot;()(())&quot;,&quot;()()()&quot;] 示例 2： 12输入：n = 1输出：[&quot;()&quot;] 12345678910111213141516171819class Solution &#123; List&lt;String&gt; ans = new ArrayList&lt;&gt;(); public List&lt;String&gt; generateParenthesis(int n) &#123; backtrack(n,n,&quot;&quot;); return ans; &#125; void backtrack(int l,int r,String cur)&#123; if (l==0&amp;&amp;r==0)&#123; ans.add(cur); return; &#125; if (l&gt;0)&#123; backtrack(l-1,r,cur+&#x27;(&#x27;); &#125; if (r&gt;l)&#123; backtrack(l,r-1,cur+&#x27;)&#x27;); &#125; &#125;&#125; 79. 单词搜索给定一个 m x n 二维字符网格 board 和一个字符串单词 word 。如果 word 存在于网格中，返回 true ；否则，返回 false 。 单词必须按照字母顺序，通过相邻的单元格内的字母构成，其中“相邻”单元格是那些水平相邻或垂直相邻的单元格。同一个单元格内的字母不允许被重复使用。 示例 1： 12输入：board = [[&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;E&quot;],[&quot;S&quot;,&quot;F&quot;,&quot;C&quot;,&quot;S&quot;],[&quot;A&quot;,&quot;D&quot;,&quot;E&quot;,&quot;E&quot;]], word = &quot;ABCCED&quot;输出：true 123456789101112131415161718192021222324252627class Solution &#123; boolean[][] visited = new boolean[15][15]; int m,n; int[][] dirs = new int[][]&#123;&#123;1,0&#125;,&#123;-1,0&#125;,&#123;0,1&#125;,&#123;0,-1&#125;&#125;; public boolean exist(char[][] board, String word) &#123; m = board.length; n = board[0].length; for (int i = 0; i &lt; m; i++) &#123; for (int j = 0; j &lt; n; j++) &#123; if (dfs(board,i,j,word,0)) return true; &#125; &#125; return false; &#125; boolean dfs(char[][] board,int i,int j, String word,int idx)&#123; if (board[i][j]!= word.charAt(idx)) return false; if (idx==word.length()-1) return true; visited[i][j]=true; for (int[] dir : dirs) &#123; int dx = i+dir[0],dy = j+dir[1]; if (dx&lt;0||dx&gt;=m||dy&lt;0||dy&gt;=n||visited[dx][dy]) continue;//超限的就不遍历了 if (dfs(board,dx,dy,word,idx+1)) return true; &#125; visited[i][j]=false; return false; &#125;&#125; 动态规划64. 最小路径和给定一个包含非负整数的 *m* x *n* 网格 grid ，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。 说明：每次只能向下或者向右移动一步。 示例 1： 123输入：grid = [[1,3,1],[1,5,1],[4,2,1]]输出：7解释：因为路径 1→3→1→1→1 的总和最小。 示例 2： 12输入：grid = [[1,2,3],[4,5,6]]输出：12 解题 1234567原始数组[1, 2, 3][2, 5, 6][1, 2, 7][4, 1, 6]最小路径和路径： [1, 2, 1, 2, 1, 6]sum = 13 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162public static void main(String[] args) &#123; int[][] grid = &#123;&#123;1,2,3&#125;, &#123;2,5,6&#125;, &#123;1,2,7&#125;, &#123;4,1,6&#125;&#125;; System.out.println(&quot;原始数组&quot;); for (int i = 0; i &lt; grid.length; i++) &#123; System.out.println(Arrays.toString(grid[i])); &#125; int sum = minPathSum(grid); System.out.println(&quot;sum = &quot; + sum);&#125;public static int minPathSum(int[][] grid) &#123; //动态规划 int m = grid.length; int n = grid[0].length; int[][] dp = new int[m][n]; dp[0][0]=grid[0][0]; for (int i = 1; i &lt; m; i++) &#123; dp[i][0]=dp[i-1][0]+grid[i][0]; &#125; for (int i = 1;i &lt; n; i++) &#123; dp[0][i]=dp[0][i-1]+grid[0][i]; &#125; for (int i = 1; i &lt; m; i++) &#123; for (int j = 1; j &lt; n; j++) &#123; dp[i][j]=Math.min(dp[i-1][j],dp[i][j-1])+grid[i][j]; &#125; &#125; // 显示路径 int r = m - 1; int c = n - 1; LinkedList&lt;Integer&gt; resultPath = new LinkedList&lt;&gt;(); resultPath.add(grid[r][c]); while (true) &#123; if (r - 1 &gt;= 0 &amp;&amp; c - 1 &gt;= 0) &#123; if (dp[r - 1][c] &lt; dp[r][c - 1]) &#123; resultPath.addFirst(grid[r - 1][c]); r = r - 1; &#125; else &#123; resultPath.addFirst(grid[r][c - 1]); c = c - 1; &#125; &#125; else if (r == 0 &amp;&amp; c - 1 &gt;= 0) &#123; while (c - 1 &gt;= 0) &#123; resultPath.addFirst(grid[0][c - 1]); c = c - 1; &#125; &#125; else if (c == 0 &amp;&amp; r - 1 &gt;= 0) &#123; while (r - 1 &gt;= 0) &#123; resultPath.addFirst(grid[r - 1][0]); r = r - 1; &#125; &#125; else &#123; break; &#125; &#125; System.out.print(&quot;最小路径和路径： &quot;); System.out.println(Arrays.toString(resultPath.toArray())); return dp[m-1][n-1];&#125; 97. 交错字符串给定三个字符串 s1、s2、s3，请你帮忙验证 s3 是否是由 s1 和 s2 交错 组成的。 两个字符串 s 和 t 交错 的定义与过程如下，其中每个字符串都会被分割成若干 非空 子字符串： s = s1 + s2 + ... + sn t = t1 + t2 + ... + tm |n - m| &lt;= 1 交错 是 s1 + t1 + s2 + t2 + s3 + t3 + ... 或者 t1 + s1 + t2 + s2 + t3 + s3 + ... 注意：a + b 意味着字符串 a 和 b 连接。 示例 1： 12输入：s1 = &quot;aabcc&quot;, s2 = &quot;dbbca&quot;, s3 = &quot;aadbbcbcac&quot;输出：true 我们定义一个 boolean 二维数组 dp [ i ] [ j ] 来表示 s1[ 0, i ) 和 s2 [ 0, j ） 组合后能否构成 s3 [ 0, i + j )，注意不包括右边界，主要是为了考虑开始的时候如果只取 s1，那么 s2 就是空串，这样的话 dp [ i ] [ 0 ] 就能表示 s2 取空串。 状态转换方程也很好写了，如果要求 dp [ i ] [ j ] 。 如果 dp [ i - 1 ] [ j ] &#x3D;&#x3D; true，并且 s1 [ i - 1] &#x3D;&#x3D; s3 [ i + j - 1]， dp [ i ] [ j ] &#x3D; true 。 如果 dp [ i ] [ j - 1 ] &#x3D;&#x3D; true，并且 s2 [ j - 1] &#x3D;&#x3D; s3 [ i + j - 1]， dp [ i ] [ j ] &#x3D; true 。 否则的话，就更新为 dp [ i ] [ j ] &#x3D; false。 如果 i 为 0，或者 j 为 0，那直接判断 s2 和 s3 对应的字母或者 s1 和 s3 对应的字母即可。 12345678910111213141516171819202122232425class Solution &#123; public boolean isInterleave(String s1, String s2, String s3) &#123; if (s3.length()!=(s1.length()+s2.length())) return false; int m = s1.length(); int n = s2.length(); boolean[][] dp = new boolean[m + 1][n + 1]; dp[0][0] = true; for (int i = 0; i &lt;= m; i++) &#123; for (int j = 0; j &lt;= n; j++) &#123; int k = i+j-1; if (i&gt;0)&#123; //向前推进dp数组，新的dp等于原来的是不是true，然后当前的字符是不是相等的 dp[i][j] = dp[i-1][j] &amp;&amp;(s1.charAt(i-1)==s3.charAt(k)); &#125; if (j&gt;0)&#123; dp[i][j] = dp[i][j] ||(dp[i][j-1]&amp;&amp;s2.charAt(j-1)==s3.charAt(k)); &#125; &#125; &#125; return dp[m][n]; //dp[i][j] 表示的是当前是否是s3的i+j的正确的表达式 //if(s3.chatAt(i+j)==s1.char或者s2.char -》dp[i][j] = dp[i-1][j] &#125;&#125; II 019回文字符给定一个非空字符串 s，请判断如果 最多 从字符串中删除一个字符能否得到一个回文字符串。 示例 1: 12输入: s = &quot;aba&quot;输出: true 示例 2: 123输入: s = &quot;abca&quot;输出: true解释: 可以删除 &quot;c&quot; 字符 或者 &quot;b&quot; 字符 1234567891011121314151617181920212223class Solution &#123; public boolean validPalindrome(String s) &#123; int left = 0; int right = s.length() - 1; while (left&lt;right)&#123; if (s.charAt(left)!=s.charAt(right))&#123; return validSub(s,left+1,right) || validSub(s,left,right-1); &#125;else &#123; left++; right--; &#125; &#125; return true; &#125; private boolean validSub(String s,int le,int ri)&#123; while (le&lt;ri)&#123; if (s.charAt(le)!=s.charAt(ri)) return false; le++; ri--; &#125; return true; &#125;&#125; 647. 回文子串给定一个字符串 s ，请计算这个字符串中有多少个回文子字符串。 具有不同开始位置或结束位置的子串，即使是由相同的字符组成，也会被视作不同的子串。 示例 1： 123输入：s = &quot;abc&quot;输出：3解释：三个回文子串: &quot;a&quot;, &quot;b&quot;, &quot;c&quot; 示例 2： 123输入：s = &quot;aaa&quot;输出：6解释：6个回文子串: &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;aa&quot;, &quot;aa&quot;, &quot;aaa&quot; 提示： 1 &lt;= s.length &lt;= 1000 s 由小写英文字母组成 注意：本题与主站 647 题相同：https://leetcode-cn.com/problems/palindromic-substrings/ 1234567891011121314151617181920212223242526272829303132333435class Solution &#123; public int countSubstrings(String s) &#123; //动态规划，dp[i][j]表示i到j是否是回文串 int length = s.length(); boolean[][] dp = new boolean[length][length]; int count = 0; for (int i = 0; i &lt; length; i++) &#123; dp[i][i] = true; count++; &#125; /* * 当下标 i 和 j 相同时：区间只有一个字母，是回文子串。 * 当下标 i 和 j 相差为 1 时：区间有两个字母，且这两个字母相同，是回文子串。 * 当下标 i 和 j 相差大于 1 时：此时有 s[i] == s[j] ， 要看区间 [i, j] 是不是回文子串，就得看中间夹着的区间 [i + 1, j - 1] 是不是回文子串，即当 dp[i + 1][j - 1] = true 时， 区间 [i, j] 是回文子串，否则就不是回文子串。 */ for (int i = length-1; i &gt;= 0; i--) &#123; for (int j = i+1; j &lt; length; j++) &#123; char ci = s.charAt(i); char cj = s.charAt(j); if (j-1&gt;=i+1)&#123; //中间的区间 dp[i][j] = (ci==cj) &amp;&amp; dp[i+1][j-1]; &#125;else &#123; dp[i][j] = (ci==cj);//只有一个元素的时候 &#125; if (dp[i][j]) count++; //如果上述判断完了之后是true，那么就计数+1； &#125; &#125; return count; &#125;&#125; 123456789101112for (int i = 0; i &lt; n; i++) &#123; for (int j = 0; j &lt; i; j++) &#123; char ci = s.charAt(i); char cj = s.charAt(j); if (i&gt;j+1)&#123; dp[j][i]=(dp[j+1][i-1])&amp;&amp;(ci==cj); &#125;else &#123; dp[j][i]=(ci==cj); &#125; if (dp[j][i]) count++; &#125;&#125; 5. 最长回文子串给你一个字符串 s，找到 s 中最长的回文子串。 如果字符串的反序与原始字符串相同，则该字符串称为回文字符串。 示例 1： 123输入：s = &quot;babad&quot;输出：&quot;bab&quot;解释：&quot;aba&quot; 同样是符合题意的答案。 示例 2： 12输入：s = &quot;cbbd&quot;输出：&quot;bb&quot; 本题最容易想到的一种方法应该就是 中心扩散法。 中心扩散法怎么去找回文串？ 从每一个位置出发，向两边扩散即可。遇到不是回文的时候结束。举个例子，str&#x3D;acdbbdaa 我们需要寻找从第一个 b（位置为 3）出发最长回文串为多少。怎么寻找？ 首先往左寻找与当期位置相同的字符，直到遇到不相等为止。 然后往右寻找与当期位置相同的字符，直到遇到不相等为止。 最后左右双向扩散，直到左和右不相等。如下图所示： 每个位置向两边扩散都会出现一个窗口大小（len）。如果 len&gt;maxLen(用来表示最长回文串的长度）。则更新 maxLen 的值。因为我们最后要返回的是具体子串，而不是长度，因此，还需要记录一下 maxLen 时的起始位置（maxStart），即此时还要 maxStart=len。 123456789101112131415161718192021222324252627282930313233343536class Solution &#123; public String longestPalindrome(String s) &#123; //用中间向两边扩散的方法 if (s.length()&lt;2) return s; int n = s.length(); int maxLeft=0,maxRight=0; int left = 0,right = 0; int len = 1; int maxLen = 0; for (int i = 0; i &lt; n; i++) &#123; left = i-1; right = i+1; while (left&gt;=0 &amp;&amp; s.charAt(left)==s.charAt(i)) &#123; left--; len++; &#125; while (right&lt;n &amp;&amp; s.charAt(right)==s.charAt(i)) &#123; right++; len++; &#125; //left 和right都是不和i处相等的了， while (left&gt;=0 &amp;&amp; right&lt;n &amp;&amp; s.charAt(left)==s.charAt(right)) &#123; len+=2; left--; right++; &#125; if (len&gt;maxLen)&#123; maxLen=len; maxLeft=left; maxRight=right; &#125; len=1; &#125; return s.substring(maxLeft+1,maxRight); &#125;&#125; 123456789101112131415161718192021222324252627282930class Solution &#123; public String longestPalindrome(String s) &#123; /** * 我们用一个 boolean dp[l][r] 表示字符串从 * i 到 j 这段是否为回文。试想如果 dp[l][r]=true * ，我们要判断 dp[l-1][r+1] 是否为回文。 * 只需要判断字符串在(l-1)和（r+1)两个位置是否为 * 相同的字符，是不是减少了很多重复计算。 */ if (s==null||s.length()&lt;2) return s; int n = s.length(); int maxStart=0,maxEnd=0,maxLen=1; boolean[][] dp = new boolean[n][n]; for (int j = 1; j &lt; n; j++) &#123; for (int i = 0; i &lt; j; i++) &#123; //遍历从i到j if (s.charAt(i)==s.charAt(j)&amp;&amp;(j-i&lt;=2||dp[i+1][j-1]))&#123; dp[i][j]=true; //j-i&lt;=2||dp[i+1][j-1] i和j之间的元素小于等于一个或者中间的为回文 if (j-i+1&gt;maxLen)&#123; maxStart=i; maxEnd=j; maxLen=j-i+1; &#125; &#125; &#125; &#125; return s.substring(maxStart,maxEnd+1); &#125;&#125; 1234567891011121314151617181920212223242526272829class Solution &#123; public String longestPalindrome(String s) &#123; //用动态规划的方法 if (s.length()&lt;2) return s; String ans= String.valueOf(s.charAt(0)); int n = s.length(); boolean[][] dp = new boolean[n][n]; for (int i = 0; i &lt; n; i++) &#123; dp[i][i]=true; &#125; for (int i = 0; i &lt; n; i++) &#123; for (int j = 0; j &lt; i; j++) &#123; char ci = s.charAt(i); char cj = s.charAt(j); if (i&gt;j+1)&#123; //间隔一个以上 dp[j][i]=(dp[j+1][i-1])&amp;&amp;(ci==cj); &#125;else &#123; dp[j][i]=(ci==cj); &#125; if (dp[j][i])&#123; if (ans.length()&lt;(i-j+1)) ans = s.substring(j,i+1); &#125; &#125; &#125; return ans; &#125;&#125; 剑指 Offer II 093. 最长斐波那契数列如果序列 X_1, X_2, ..., X_n 满足下列条件，就说它是 斐波那契式 的： n &gt;= 3 对于所有 i + 2 &lt;= n，都有 X_i + X_&#123;i+1&#125; = X_&#123;i+2&#125; 给定一个严格递增的正整数数组形成序列 arr ，找到 arr 中最长的斐波那契式的子序列的长度。如果一个不存在，返回 0 。 （回想一下，子序列是从原序列 arr 中派生出来的，它从 arr 中删掉任意数量的元素（也可以不删），而不改变其余元素的顺序。例如， [3, 5, 8] 是 [3, 4, 5, 6, 7, 8] 的一个子序列） 1234567891011121314151617181920212223242526272829303132333435363738class Solution &#123; public int lenLongestFibSubseq(int[] arr) &#123; //每个斐波那契数列都可以由其最后两位数字精准定位 int n = arr.length; int[][] dp = new int[n][n]; // dp[2][3]表示数列[1,2,3]、dp[3][5]表示数列[1,2,3,5]、 // dp[5][8]表示数列[1,2,3,5,8] //每个dp元素的值，代表它所定位的数列的长度， // 例如上面的 dp[2][3]=3 , dp[3][5]=4 , dp[5][8]=5； int max = 0; for (int i = 2; i &lt; n; i++) &#123; int j = 0, k = i-1; //j k 为双指针， while (j&lt;k)&#123; if (arr[j] + arr[k] == arr[i])&#123; //找到 if (dp[j][k] == 0)&#123;//如果j和k，j之前的长度为0， dp[k][i] = 3;//至少有三个元素了，k和i有3的长度 //两个前置元素j、k之前并没有形成斐波那契子数列（即dp[j][k]==0）， // 那就将当前位置存储的斐波那契数列长度dp[k][i]修改为3 &#125;else &#123; //如果前置元素j、k之前作为某个斐波那契数列的最后两位元素存在 // （即dp[j][k]==n，n&gt;=3） dp[k][i] = Math.max(dp[j][k]+1,dp[k][i]); //将当前位置存储的斐波那契数列长度dp[k][i]修改为 n+1 ， &#125; max = Math.max(max,dp[k][i]); j++;k--; &#125;else if (arr[j] + arr[k] &lt; arr[i])&#123; j++; &#125;else k--; &#125; &#125; return max; &#125;&#125; 剑指 Offer II 092. 翻转字符2 如果一个由 &#39;0&#39; 和 &#39;1&#39; 组成的字符串，是以一些 &#39;0&#39;（可能没有 &#39;0&#39;）后面跟着一些 &#39;1&#39;（也可能没有 &#39;1&#39;）的形式组成的，那么该字符串是 单调递增 的。 我们给出一个由字符 &#39;0&#39; 和 &#39;1&#39; 组成的字符串 s，我们可以将任何 &#39;0&#39; 翻转为 &#39;1&#39; 或者将 &#39;1&#39; 翻转为 &#39;0&#39;。 返回使 s 单调递增 的最小翻转次数。 示例 1： 123输入：s = &quot;00110&quot;输出：1解释：我们翻转最后一位得到 00111. 12345678910111213141516171819202122232425262728class Solution &#123; public int minFlipsMonoIncr(String s) &#123; if(s.length() &lt; 2)&#123; return 0; &#125; // 前一位反转成0的最小值和前一位反转成1的最小值 int [][] dp = new int[s.length()][2]; if (s.charAt(0)==&#x27;1&#x27;)&#123; dp[0][0] = 1;//第一个为1的话，他反转成零就需要变动一下，所以是一， //但如果他反转成一的话，就不用动，所以就最小值变动次数为零 dp[0][1] = 0; &#125;else &#123; dp[0][0] = 0; dp[0][1] = 1; &#125; for (int i = 1; i &lt; s.length(); i++) &#123; if (s.charAt(i)==&#x27;1&#x27;)&#123; dp[i][0] = dp[i-1][0]+1;//前一个是0的时候，就得多翻一个 dp[i][1] = Math.min(dp[i-1][0],dp[i-1][1]); &#125;else &#123; //当前位置为0 的时候。如果前一个为0，那么就不需要变，// 前一个为1，需要加一 dp[i][0] = dp[i-1][0]; dp[i][1] = Math.min(dp[i-1][1],dp[i-1][0])+1; &#125; &#125; return Math.min(dp[s.length()-1][0],dp[s.length()-1][1]); &#125;&#125; 44. 通配符匹配给你一个输入字符串 (s) 和一个字符模式 (p) ，请你实现一个支持 &#39;?&#39; 和 &#39;*&#39; 匹配规则的通配符匹配： &#39;?&#39; 可以匹配任何单个字符。 &#39;*&#39; 可以匹配任意字符序列（包括空字符序列）。 判定匹配成功的充要条件是：字符模式必须能够 完全匹配 输入字符串（而不是部分匹配）。 示例 1： 123输入：s = &quot;aa&quot;, p = &quot;a&quot;输出：false解释：&quot;a&quot; 无法匹配 &quot;aa&quot; 整个字符串。 示例 2： 123输入：s = &quot;aa&quot;, p = &quot;*&quot;输出：true解释：&#x27;*&#x27; 可以匹配任意字符串。 123456789101112131415161718192021222324252627282930class Solution &#123; public boolean isMatch(String s, String p) &#123; int m = s.length(); int n = p.length(); s = &quot; &quot;+s;//char数组就是从1开始的了 p = &quot; &quot;+p; char[] chars = s.toCharArray(); char[] charp = p.toCharArray(); //动态规划，dp(i,j)就是1到i的字符和p的1到j的字符是否匹配 boolean[][] dp = new boolean[m + 1][n + 1]; dp[0][0]=true; for (int i = 0; i &lt;= m; i++) &#123; for (int j = 1; j &lt;= n; j++) &#123; if (charp[j]==&#x27;*&#x27;)&#123; //如果p的此处为*，那么 dp[i][j] = dp[i][j-1] || (i-1&gt;=0 &amp;&amp; dp[i-1][j]); //此时dp[i][j] 可以是由 dp[i][j-1]匹配传递来 或者(i-1&gt;=0 &amp;&amp; dp[i-1][j]); &#125;else &#123; dp[i][j] = i-1&gt;=0 &amp;&amp; dp[i-1][j-1] &amp;&amp; (chars[i]==charp[j] || charp[j]==&#x27;?&#x27;); // ? 匹配的条件是前面的字符匹配，s 中的第 i 个字符可以是任意字符。 // 匹配的条件是前面的字符匹配，同时 s 中的第 i 个字符和 p 中的第 j 位相同。 &#125; &#125; &#125; return dp[m][n]; &#125;&#125; 72. 编辑距离给你两个单词 word1 和 word2， 请返回将 word1 转换成 word2 所使用的最少操作数 。 你可以对一个单词进行如下三种操作： 插入一个字符 删除一个字符 替换一个字符 示例 1： 123456输入：word1 = &quot;horse&quot;, word2 = &quot;ros&quot;输出：3解释：horse -&gt; rorse (将 &#x27;h&#x27; 替换为 &#x27;r&#x27;)rorse -&gt; rose (删除 &#x27;r&#x27;)rose -&gt; ros (删除 &#x27;e&#x27;) 12345678910111213141516171819202122232425262728293031class Solution &#123; public int minDistance(String word1, String word2) &#123; //Dynamic Plan //二维数组，dp[i][j] 表示前i个word1转化成前j个word2的最少的操作数 int m = word1.length(); int n = word2.length(); int[][] dp = new int[m + 1][n + 1]; for (int i = 0; i &lt;= m; i++) &#123; dp[i][0] = i; &#125; for (int i = 0; i &lt;= n; i++) &#123; dp[0][i] = i; &#125; for (int i = 1; i &lt;=m ; i++) &#123; for (int j = 1; j &lt;= n; j++) &#123; //开始比较了 if (word1.charAt(i-1) == word2.charAt(j-1))&#123; dp[i][j] = dp[i-1][j-1]; &#125;else &#123; //如果是删除i的话：dp[i][j] = dp[i-1][j]+1； //这个增加其实就是两个单词反过来操作的结果，第一个单词增加一个元素变成第二个， //实际上就是第二个元素删除一个元素变成第一个，他们两个的操作步骤次数是一样的。 //如果是增加的话：dp[i][j] = dp[i][j-1]+1； //如果是替换那就是dp[i][j] = dp[i-1][j-1]+1; dp[i][j] = Math.min( dp[i-1][j],Math.min(dp[i][j-1],dp[i-1][j-1]))+1; &#125; &#125; &#125; return dp[m][n]; &#125;&#125; 718. 最长重复子数组力扣题目链接 给两个整数数组 A 和 B ，返回两个数组中公共的、长度最长的子数组的长度。 示例： 输入： A: [1,2,3,2,1] B: [3,2,1,4,7] 输出：3 解释：长度最长的公共子数组是 [3, 2, 1] 。 提示： 1 &lt;&#x3D; len(A), len(B) &lt;&#x3D; 1000 0 &lt;&#x3D; A[i], B[i] &lt; 100 思路 注意题目中说的子数组，其实就是连续子序列。 要求两个数组中最长重复子数组，如果是暴力的解法 只需要先两层for循环确定两个数组起始位置，然后再来一个循环可以是for或者while，来从两个起始位置开始比较，取得重复子数组的长度。 本题其实是动规解决的经典题目，我们只要想到 用二维数组可以记录两个字符串的所有比较情况，这样就比较好推 递推公式了。动规五部曲分析如下： 确定dp数组（dp table）以及下标的含义 dp[i][j] ：以下标i - 1为结尾的A，和以下标j - 1为结尾的B，最长重复子数组长度为dp[i][j]。 （特别注意： “以下标i - 1为结尾的A” 标明一定是 以A[i-1]为结尾的字符串 ） 此时细心的同学应该发现，那dp[0][0]是什么含义呢？总不能是以下标-1为结尾的A数组吧。 其实dp[i][j] 的定义也就决定着，我们在遍历dp[i][j] 的时候i 和 j都要从1开始。 那有同学问了，我就定义dp[i][j] 为 以下标i为结尾的A，和以下标j 为结尾的B，最长重复子数组长度。不行么？ 行倒是行！ 但实现起来就麻烦一点，需要单独处理初始化部分，在本题解下面的拓展内容里，我给出了 第二种 dp数组的定义方式所对应的代码和讲解，大家比较一下就了解了。 确定递推公式 根据dp[i][j] 的定义，dp[i][j] 的状态只能由dp[i - 1][j - 1]推导出来。 即当A[i - 1] 和B[j - 1]相等的时候，dp[i][j] &#x3D; dp[i - 1][j - 1] + 1; 根据递推公式可以看出，遍历i 和 j 要从1开始！ dp数组如何初始化 根据dp[i][j] 的定义，dp[i][0] 和dp[0][j]其实都是没有意义的！ 但dp[i][0] 和dp[0][j]要初始值，因为 为了方便递归公式dp[i][j] &#x3D; dp[i - 1][j - 1] + 1; 所以dp[i][0] 和dp[0][j]初始化为0。 举个例子A[0]如果和B[0]相同的话，dp[1][1] &#x3D; dp[0][0] + 1，只有dp[0][0]初始为0，正好符合递推公式逐步累加起来。 确定遍历顺序 外层for循环遍历A，内层for循环遍历B。 那又有同学问了，外层for循环遍历B，内层for循环遍历A。不行么？ 也行，一样的，我这里就用外层for循环遍历A，内层for循环遍历B了。 同时题目要求长度最长的子数组的长度。所以在遍历的时候顺便把dp[i][j] 的最大值记录下来。 代码如下： 123456789for (int i = 1; i &lt;= nums1.size(); i++) &#123; for (int j = 1; j &lt;= nums2.size(); j++) &#123; if (nums1[i - 1] == nums2[j - 1]) &#123; dp[i][j] = dp[i - 1][j - 1] + 1; &#125; if (dp[i][j] &gt; result) result = dp[i][j]; &#125;&#125; 举例推导dp数组 拿示例1中，A: [1,2,3,2,1]，B: [3,2,1,4,7]为例，画一个dp数组的状态变化，如下： 123456789101112131415161718class Solution &#123; public int findLength(int[] nums1, int[] nums2) &#123; int n1 = nums1.length; int n2 = nums2.length; int[][] dp = new int[n1 + 1][n2 + 1];//dp存储相同的长度 //以下标i - 1为结尾的A，和以下标j - 1为结尾的B，最长重复子数组长度为dp[i][j]。 int count = 0; for (int i = 1; i &lt;= nums1.length; i++) &#123; for (int j = 1; j &lt;=nums2.length ; j++) &#123; if (nums1[i-1]==nums2[j-1])&#123; dp[i][j] = dp[i-1][j-1]+1; &#125; if (dp[i][j]&gt;count) count = dp[i][j]; &#125; &#125; return count; &#125;&#125; 时间复杂度：O(n × m)，n 为A长度，m为B长度 空间复杂度：O(n × m) 打家劫舍： 198.打家劫舍力扣题目链接 你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。 给定一个代表每个房屋存放金额的非负整数数组，计算你 不触动警报装置的情况下 ，一夜之内能够偷窃到的最高金额。 示例 1： 输入：[1,2,3,1] 输出：4 解释：偷窃 1 号房屋 (金额 &#x3D; 1) ，然后偷窃 3 号房屋 (金额 &#x3D; 3)。 偷窃到的最高金额 &#x3D; 1 + 3 &#x3D; 4 。 示例 2： 输入：[2,7,9,3,1] 输出：12解释：偷窃 1 号房屋 (金额 &#x3D; 2), 偷窃 3 号房屋 (金额 &#x3D; 9)，接着偷窃 5 号房屋 (金额 &#x3D; 1)。 偷窃到的最高金额 &#x3D; 2 + 9 + 1 &#x3D; 12 。 提示： 0 &lt;&#x3D; nums.length &lt;&#x3D; 100 0 &lt;&#x3D; nums[i] &lt;&#x3D; 400 决定dp[i]的因素就是第i房间偷还是不偷。 如果偷第i房间，那么dp[i] &#x3D; dp[i - 2] + nums[i] ，即：第i-1房一定是不考虑的，找出 下标i-2（包括i-2）以内的房屋，最多可以偷窃的金额为dp[i-2] 加上第i房间偷到的钱。 如果不偷第i房间，那么dp[i] &#x3D; dp[i - 1]，即考 虑i-1房，（注意这里是考虑，并不是一定要偷i-1房，这是很多同学容易混淆的点） 然后dp[i]取最大值，即dp[i] &#x3D; max(dp[i - 2] + nums[i], dp[i - 1]); 1234567891011121314class Solution &#123; public int rob(int[] nums) &#123; //打家劫舍 //dp[i] = Math.max(dp[i-1],dp[i-2]+nums[i]); int[] dp = new int[nums.length]; if (nums.length==1) return nums[0]; dp[0] = nums[0]; dp[1] = Math.max(nums[0],nums[1]); for (int i = 2; i &lt; nums.length; i++) &#123; dp[i] = Math.max(dp[i-1],dp[i-2]+nums[i]); &#125; return dp[nums.length-1]; &#125;&#125; 139. 单词拆分给你一个字符串 s 和一个字符串列表 wordDict 作为字典。请你判断是否可以利用字典中出现的单词拼接出 s 。 注意：不要求字典中出现的单词全部都使用，并且字典中的单词可以重复使用。 示例 1： 123输入: s = &quot;leetcode&quot;, wordDict = [&quot;leet&quot;, &quot;code&quot;]输出: true解释: 返回 true 因为 &quot;leetcode&quot; 可以由 &quot;leet&quot; 和 &quot;code&quot; 拼接成。 示例 2： 1234输入: s = &quot;applepenapple&quot;, wordDict = [&quot;apple&quot;, &quot;pen&quot;]输出: true解释: 返回 true 因为 &quot;applepenapple&quot; 可以由 &quot;apple&quot; &quot;pen&quot; &quot;apple&quot; 拼接成。 注意，你可以重复使用字典中的单词。 示例 3： 12输入: s = &quot;catsandog&quot;, wordDict = [&quot;cats&quot;, &quot;dog&quot;, &quot;sand&quot;, &quot;and&quot;, &quot;cat&quot;]输出: false 动态规划s 串能否分解为单词表的单词（前 s.length 个字符的 s 串能否分解为单词表单词）将大问题分解为规模小一点的子问题：前i个字符的子串，能否分解成单词剩余子串，是否为单个单词。dp[i]：长度为i的s[0:i-1]子串是否能拆分成单词。题目求:dp[s.length] 状态转移方程类似的，我们用指针 j 去划分s[0:i] 子串如下图：s[0:i] 子串对应 dp[i+1] ，它是否为 true（s[0:i]能否 break），取决于两点：它的前缀子串 s[0:j-1] 的 dp[j]，是否为 true。剩余子串 s[j:i]，是否是单词表的单词。 base casebase case 为dp[0] = true。即，长度为 0 的s[0:-1]能拆分成单词表单词。这看似荒谬，但这只是为了让边界情况也能套用状态转移方程，而已。当 j &#x3D; 0 时（上图黄色前缀串为空串），s[0:i]的dp[i+1]，取决于s[0:-1]的dp[0]，和，剩余子串s[0:i]是否是单个单词。只有让dp[0]为真，dp[i+1]才会只取决于s[0:i]是否为单个单词，才能用上这个状态转移方程。 123456789101112131415161718class Solution &#123; public boolean wordBreak(String s, List&lt;String&gt; wordDict) &#123; //dp[i]：长度为i的s[0:i-1]子串是否能拆分成单词。 int n = s.length(); boolean[] dp = new boolean[n + 1]; dp[0]=true; for (int i = 1; i &lt; n + 1; i++) &#123; for (int j = i-1; j &gt;=0; j--) &#123; String suffix = s.substring(j, i);//后缀部分 if (wordDict.contains(suffix)&amp;&amp;dp[j])&#123; dp[i]=true; break;//如果找到了就退出 &#125; &#125; &#125; return dp[n]; &#125;&#125; 300. 最长递增子序列给你一个整数数组 nums ，找到其中最长严格递增子序列的长度。 子序列 是由数组派生而来的序列，删除（或不删除）数组中的元素而不改变其余元素的顺序。例如，[3,6,2,7] 是数组 [0,3,1,6,2,2,7] 的子序列。 示例 1： 123输入：nums = [10,9,2,5,3,7,101,18]输出：4解释：最长递增子序列是 [2,3,7,101]，因此长度为 4 。 示例 2： 12输入：nums = [0,1,0,3,2,3]输出：4 示例 3： 12输入：nums = [7,7,7,7,7,7,7]输出：1 状态定义： dp[i] 的值代表 nums 以 nums[i] 结尾的最长子序列长度。 转移方程： 设 j∈[0,i)，考虑每轮计算新 dp[i] 时，遍历 [0,i) 列表区间，做以下判断： 当 nums[i]&gt;nums[j] 时： nums[i] 可以接在 nums[j] 之后（此题要求严格递增），此情况下最长上升子序列长度为 dp[j]+1 ； 当 nums[i]&lt;&#x3D;nums[j] 时： nums[i] 无法接在 nums[j] 之后，此情况上升子序列不成立，跳过。 上述所有 1. 情况 下计算出的 dp[j]+1 的最大值，为直到 i 的最长上升子序列长度（即 dp[i] ）。实现方式为遍历 j 时，每轮执行 dp[i]&#x3D;max(dp[i],dp[j]+1)。 转移方程： dp[i] &#x3D; max(dp[i], dp[j] + 1) for j in [0, i)。 初始状态： dp[i] 所有元素置 1，含义是每个元素都至少可以单独成为子序列，此时长度都为 1。 返回值： 返回 dp 列表最大值，即可得到全局最长上升子序列长度。 1234567891011121314151617181920class Solution &#123; public int lengthOfLIS(int[] nums) &#123; if (nums.length==0) return 0; int[] dp = new int[nums.length + 1]; Arrays.fill(dp,1);//每一个都是自己给自己递增的都是 1 int maxSize=0; for (int i = 0; i &lt; nums.length; i++) &#123; for (int j = 0; j &lt; i; j++) &#123; //遍历从0到i，如果有nums[j]&lt;nums[i] //dp[i]=math.max(dp[i]+dp[j]+1); //也就是上一个的dp[j]加上当前位置，这就是地推 if (nums[j]&lt;nums[i])&#123; dp[i]=Math.max(dp[i],dp[j]+1); &#125; &#125; maxSize=Math.max(maxSize,dp[i]); &#125; return maxSize; &#125;&#125; 120. 三角形最小路径和给定一个三角形 triangle ，找出自顶向下的最小路径和。 每一步只能移动到下一行中相邻的结点上。相邻的结点 在这里指的是 下标 与 上一层结点下标 相同或者等于 上一层结点下标 + 1 的两个结点。也就是说，如果正位于当前行的下标 i ，那么下一步可以移动到下一行的下标 i 或 i + 1 。 示例 1： 12345678输入：triangle = [[2],[3,4],[6,5,7],[4,1,8,3]]输出：11解释：如下面简图所示： 2 3 4 6 5 74 1 8 3自顶向下的最小路径和为 11（即，2 + 3 + 5 + 1 = 11）。 示例 2： 12输入：triangle = [[-10]]输出：-10 提示： 1 &lt;= triangle.length &lt;= 200 triangle[0].length == 1 triangle[i].length == triangle[i - 1].length + 1 -104 &lt;= triangle[i][j] &lt;= 104 状态定义：dp[i][j]表示包含第i行第j列元素的最小路径和 状态分析 初始化：dp[0][0]=triangle[0][0] 常规：triangle[i][j]一定会经过triangle[i-1][j]或者triangle[i-1][j-1],所以状态dp[i][j]一定等于dp[i-1][j]或者dp[i-1][j-1]的最小值+triangle[i][j] 特殊： triangle[i][0]没有左上角 只能从triangle[i-1][j]经过triangle[i][row[0].length]没有上面 只能从triangle[i-1][j-1]经过 转换方程：dp[i][j]=min(dp[i-1][j],dp[i-1][j-1])+triangle[i][j] 12345678910111213141516171819202122232425262728class Solution &#123; public int minimumTotal(List&lt;List&lt;Integer&gt;&gt; triangle) &#123; //dp[i][j]表示i和j位置的最小的路径之和 int size = triangle.size(); int[][] dp = new int[size + 1][size + 1]; dp[0][0]=triangle.get(0).get(0);// if (size==1) return dp[0][0]; for (int i = 1; i &lt; size; i++) &#123; for (int j = 0; j &lt;= i; j++) &#123; if (j==0)&#123; // triangle[i][0]没有左上角 dp[i][0]=dp[i-1][0]+triangle.get(i).get(0); &#125; else if (j == i) &#123; //triangle[i][row[0].length]没有上面 dp[i][i]=dp[i-1][i-1]+triangle.get(i).get(i); &#125;else &#123; //dp[i][j]=min(dp[i-1][j],dp[i-1][j-1])+triangle[i][j] dp[i][j]=Math.min(dp[i-1][j],dp[i-1][j-1])+triangle.get(i).get(j); &#125; &#125; &#125; int minPath = Integer.MAX_VALUE; for (int i = 0; i &lt; size; i++) &#123; minPath=Math.min(minPath,dp[size-1][i]); &#125; return minPath; &#125;&#125; 221. 最大正方形在一个由 &#39;0&#39; 和 &#39;1&#39; 组成的二维矩阵内，找到只包含 &#39;1&#39; 的最大正方形，并返回其面积。 示例 1： 12输入：matrix = [[&quot;1&quot;,&quot;0&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;],[&quot;1&quot;,&quot;0&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;],[&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;],[&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;1&quot;,&quot;0&quot;]]输出：4 理解 min(上, 左, 左上) + 1 如题，在其他动态规划方法的题解中，大都会涉及到下列形式的代码： [] 1234// 伪代码if (matrix(i - 1, j - 1) == &#x27;1&#x27;) &#123; dp(i, j) = min(dp(i - 1, j), dp(i, j - 1), dp(i - 1, j - 1)) + 1;&#125; 其中，dp(i, j) 是以 matrix(i - 1, j - 1) 为 右下角 的正方形的最大边长。(感谢 @liweiwei1419 提出补充)等同于：dp(i + 1, j + 1) 是以 matrix(i, j) 为右下角的正方形的最大边长 翻译成中文 若某格子值为 1，则以此为右下角的正方形的、最大边长为：上面的正方形、左面的正方形或左上的正方形中，最小的那个，再加上此格。 先来阐述简单共识 若形成正方形（非单 1），以当前为右下角的视角看，则需要：当前格、上、左、左上都是 1 可以换个角度：当前格、上、左、左上都不能受 0 的限制，才能成为正方形 上面详解了 三者取最小 的含义： 图 1：受限于左上的 0 图 2：受限于上边的 0 图 3：受限于左边的 0 数字表示：以此为正方形右下角的最大边长 黄色表示：格子 ? 作为右下角的正方形区域 就像 木桶的短板理论 那样——附近的最小边长，才与 ? 的最长边长有关。此时已可得到递推公式 [] 1234// 伪代码if (grid[i - 1][j - 1] == &#x27;1&#x27;) &#123; dp[i][j] = min(dp[i - 1][j - 1], dp[i - 1][j], dp[i][j - 1]) + 1;&#125; 从感性理解，到代码实现 从上述图解中，我们似乎得到的只是「动态规划 推进 的过程」，即「如何从前面的 dp 推出后面的 dp」，甚至还只是感性理解 距离代码我们还缺：dp 具体定义如何，数组多大，初值如何，如何与题目要求的面积相关 dp 具体定义：dp[i + 1][j + 1] 表示 「以第 i 行、第 j 列为右下角的正方形的最大边长」 为何不是 dp[i][j] 回到图解中，任何一个正方形，我们都「依赖」当前格 左、上、左上三个方格的情况 但第一行的上层已经没有格子，第一列左边已经没有格子，需要做特殊 if 判断来处理 为了代码简洁，我们 假设补充 了多一行全 &#39;0&#39;、多一列全 &#39;0&#39; 此时 dp 数组的大小也明确为 new dp[height + 1][width + 1] 初始值就是将第一列 dp[row][0] 、第一行 dp[0][col] 都赋为 0，相当于已经计算了所有的第一行、第一列的 dp 值 题目要求面积。根据 「面积 &#x3D; 边长 x 边长」可知，我们只需求出最大边长 即可 定义 maxSide 表示最长边长，每次得出一个 dp，就 maxSide = max(maxSide, dp); 最终返回 return maxSide * maxSide; 12345678910111213141516171819class Solution &#123; public int maximalSquare(char[][] matrix) &#123; if (matrix==null||matrix.length&lt;1||matrix[0].length&lt;1) return 0; int m = matrix.length; int n = matrix[0].length; int[][] dp = new int[m + 1][n + 1]; int maxSize = 0; //dp就是木桶效应，选择左边，左上，和上边三个最小的那个再加上1， for (int i = 0; i &lt; m; i++) &#123; for (int j = 0; j &lt; n; j++) &#123; if (matrix[i][j]==&#x27;1&#x27;)&#123; dp[i+1][j+1]=Math.min(Math.min(dp[i+1][j],dp[i][j+1]),dp[i][j])+1; maxSize=Math.max(maxSize,dp[i+1][j+1]); &#125; &#125; &#125; return maxSize*maxSize; &#125;&#125; 123. 买卖股票的最佳时机 III给定一个数组，它的第 i 个元素是一支给定的股票在第 i 天的价格。 设计一个算法来计算你所能获取的最大利润。你最多可以完成 两笔 交易。 注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。 示例 1: 1234输入：prices = [3,3,5,0,0,3,1,4]输出：6解释：在第 4 天（股票价格 = 0）的时候买入，在第 6 天（股票价格 = 3）的时候卖出，这笔交易所能获得利润 = 3-0 = 3 。 随后，在第 7 天（股票价格 = 1）的时候买入，在第 8 天 （股票价格 = 4）的时候卖出，这笔交易所能获得利润 = 4-1 = 3 。 12345678910111213141516171819class Solution &#123; public int maxProfit(int[] prices) &#123; //得买两笔，不能同时买 int[][] dp = new int[prices.length][5]; //初始化dp dp[0][0]=0;//不操作; dp[0][1]=-prices[0];//第一次持有; dp[0][2]=0;//第一次卖出; dp[0][3]=-prices[0];//第二次买入 dp[0][4]=0;//第二次卖出; for (int i = 1; i &lt; prices.length; i++) &#123; dp[i][1]=Math.max(dp[i-1][1],dp[i][0]-prices[i]);//不持有到持有 dp[i][2]=Math.max(dp[i-1][2],dp[i][1]+prices[i]);// dp[i][3]=Math.max(dp[i-1][3],dp[i][2]-prices[i]);// dp[i][4]=Math.max(dp[i-1][4],dp[i][3]+prices[i]);// &#125; return dp[prices.length-1][4]; &#125;&#125; 188. 买卖股票的最佳时机 IV给你一个整数数组 prices 和一个整数 k ，其中 prices[i] 是某支给定的股票在第 i 天的价格。 设计一个算法来计算你所能获取的最大利润。你最多可以完成 k 笔交易。也就是说，你最多可以买 k 次，卖 k 次。 注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。 示例 1： 123输入：k = 2, prices = [2,4,1]输出：2解释：在第 1 天 (股票价格 = 2) 的时候买入，在第 2 天 (股票价格 = 4) 的时候卖出，这笔交易所能获得利润 = 4-2 = 2 。 123456789101112131415161718192021222324class Solution &#123; public int maxProfit(int k, int[] prices) &#123; //k笔的话，就是2k大小的dp int[][] dp = new int[prices.length][2 * k + 1]; for (int i = 0; i &lt; (2 * k + 1); i++) &#123; if (i%2==1)&#123; //奇数的话就等于price[0]; dp[0][i]=-prices[0]; &#125; &#125; for (int i = 1; i &lt; prices.length; i++) &#123; for (int j = 1; j &lt; (2 * k + 1); j++) &#123; if (j%2==1)&#123; //奇数的话就是要持有; dp[i][j]=Math.max(dp[i-1][j],dp[i][j-1]-prices[i]); &#125;else &#123; //偶数的话就是要卖; dp[i][j]=Math.max(dp[i-1][j],dp[i][j-1]+prices[i]); &#125; &#125; &#125; return dp[prices.length-1][2 * k]; &#125;&#125; 背包算法:baggage_claim: 01背包中二维dp数组的两个for遍历的先后循序是可以颠倒的，一维dp数组的两个for循环先后循序一定是先遍历物品，再遍历背包容量。 在完全背包中，对于一维dp数组来说，其实两个for循环嵌套顺序是无所谓的！ 有N件物品和一个最多能背重量为W的背包。第i件物品的重量是weight[i]，得到的价值是value[i] 。每件物品都有无限个（也就是可以放入背包多次），求解将哪些物品装入背包里物品价值总和最大。 完全背包和01背包问题唯一不同的地方就是，每种物品有无限件。 回顾一下01背包的核心代码 12345for(int i = 0; i &lt; weight.size(); i++) &#123; // 遍历物品 for(int j = bagWeight; j &gt;= weight[i]; j--) &#123; // 遍历背包容量 dp[j] = max(dp[j], dp[j - weight[i]] + value[i]); &#125;&#125; 我们知道01背包内嵌的循环是从大到小遍历，为了保证每个物品仅被添加一次。 而完全背包的物品是可以添加多次的，所以要从小到大去遍历，即： 1234567// 先遍历物品，再遍历背包for(int i = 0; i &lt; weight.size(); i++) &#123; // 遍历物品 for(int j = weight[i]; j &lt;= bagWeight ; j++) &#123; // 遍历背包容量 dp[j] = max(dp[j], dp[j - weight[i]] + value[i]); &#125;&#125; 完全背包的模版： 123456789101112131415161718192021222324252627282930313233//先遍历物品，再遍历背包private static void testCompletePack()&#123; int[] weight = &#123;1, 3, 4&#125;; int[] value = &#123;15, 20, 30&#125;; int bagWeight = 4; int[] dp = new int[bagWeight + 1]; for (int i = 0; i &lt; weight.length; i++)&#123; // 遍历物品 for (int j = weight[i]; j &lt;= bagWeight; j++)&#123; // 遍历背包容量 dp[j] = Math.max(dp[j], dp[j - weight[i]] + value[i]); &#125; &#125; for (int maxValue : dp)&#123; System.out.println(maxValue + &quot; &quot;); &#125;&#125;//先遍历背包，再遍历物品private static void testCompletePackAnotherWay()&#123; int[] weight = &#123;1, 3, 4&#125;; int[] value = &#123;15, 20, 30&#125;; int bagWeight = 4; int[] dp = new int[bagWeight + 1]; for (int i = 1; i &lt;= bagWeight; i++)&#123; // 遍历背包容量 for (int j = 0; j &lt; weight.length; j++)&#123; // 遍历物品 if (i - weight[j] &gt;= 0)&#123; dp[i] = Math.max(dp[i], dp[i - weight[j]] + value[j]); &#125; &#125; &#125; for (int maxValue : dp)&#123; System.out.println(maxValue + &quot; &quot;); &#125;&#125; 背包递推公式问能否能装满背包（或者最多装多少）：dp[j] &#x3D; max(dp[j], dp[j - nums[i]] + nums[i]); ， 问装满背包有几种方法：dp[j] +&#x3D; dp[j - nums[i]] ， 问背包装满最大价值：dp[j] &#x3D; max(dp[j], dp[j - weight[i]] + value[i]); 问装满背包所有物品的最小个数：dp[j] &#x3D; min(dp[j - coins[i]] + 1, dp[j]); 遍历顺序01背包二维dp数组01背包先遍历物品还是先遍历背包都是可以的，且第二层for循环是从小到大遍历。 一维dp数组01背包只能先遍历物品再遍历背包容量，且第二层for循环是从大到小遍历。 一维dp数组的背包在遍历顺序上和二维dp数组实现的01背包其实是有很大差异的，大家需要注意！ 举例： 416. 分割等和子集给你一个 只包含正整数 的 非空 数组 nums 。请你判断是否可以将这个数组分割成两个子集，使得两个子集的元素和相等。 示例 1： 123输入：nums = [1,5,11,5]输出：true解释：数组可以分割成 [1, 5, 5] 和 [11] 。 示例 2： 123输入：nums = [1,2,3,5]输出：false解释：数组不能分割成两个元素和相等的子集。 提示： 1 &lt;= nums.length &lt;= 200 1 &lt;= nums[i] &lt;= 100 12345678910111213141516171819202122class Solution &#123; public boolean canPartition(int[] nums) &#123; int sum = 0; for (int num : nums) &#123; sum+=num; &#125; if (sum%2==1) return false; int target = sum/2; //动态规划 1/背包问题，能不能找到target大小的元素 // dp[i] = dp[i-nums[j]] boolean[] dp = new boolean[target + 1]; //先遍历物品，再遍历背包， dp[0] = true; for (int i = 0; i &lt; nums.length; i++) &#123; for (int j = target; j &gt;= nums[i]; j--) &#123; dp[j] = dp[j]||dp[j-nums[i]]; &#125; &#125; return dp[target]; &#125;&#125;&#125; 1049. 最后一块石头的重量 II有一堆石头，用整数数组 stones 表示。其中 stones[i] 表示第 i 块石头的重量。 每一回合，从中选出任意两块石头，然后将它们一起粉碎。假设石头的重量分别为 x 和 y，且 x &lt;= y。那么粉碎的可能结果如下： 如果 x == y，那么两块石头都会被完全粉碎； 如果 x != y，那么重量为 x 的石头将会完全粉碎，而重量为 y 的石头新重量为 y-x。 最后，最多只会剩下一块 石头。返回此石头 最小的可能重量 。如果没有石头剩下，就返回 0。 示例 1： 1234567输入：stones = [2,7,4,1,8,1]输出：1解释：组合 2 和 4，得到 2，所以数组转化为 [2,7,1,8,1]，组合 7 和 8，得到 1，所以数组转化为 [2,1,1,1]，组合 2 和 1，得到 1，所以数组转化为 [1,1,1]，组合 1 和 1，得到 0，所以数组转化为 [1]，这就是最优值。 示例 2： 12输入：stones = [31,26,33,21,40]输出：5 确定dp数组以及下标的含义 **dp[j]表示容量（这里说容量更形象，其实就是重量）为j的背包，最多可以背最大重量为dp[j]**。 可以回忆一下01背包中，dp[j]的含义，容量为j的背包，最多可以装的价值为 dp[j]。 相对于 01背包，本题中，石头的重量是 stones[i]，石头的价值也是 stones[i] ，可以 “最多可以装的价值为 dp[j]” &#x3D;&#x3D; “最多可以背的重量为dp[j]” 确定递推公式 01背包的递推公式为：dp[j] &#x3D; max(dp[j], dp[j - weight[i]] + value[i]); 本题则是：dp[j] &#x3D; max(dp[j], dp[j - stones[i]] + stones[i]); 一些同学可能看到这dp[j - stones[i]] + stones[i]中 又有- stones[i] 又有+stones[i]，看着有点晕乎。 大家可以再去看 dp[j]的含义。 最后dp[target]里是容量为target的背包所能背的最大重量。 那么分成两堆石头，一堆石头的总重量是dp[target]，另一堆就是sum - dp[target]。 在计算target的时候，target &#x3D; sum &#x2F; 2 因为是向下取整，所以sum - dp[target] 一定是大于等于dp[target]的。 那么相撞之后剩下的最小石头重量就是 (sum - dp[target]) - dp[target]。 1234567891011121314151617181920class Solution &#123; public int lastStoneWeightII(int[] stones) &#123; //粉碎石头，其实就是看两个能不能各分一半 int sum = 0; for (int stone : stones) &#123; sum+=stone; &#125; int target = sum/2; // if achieved target，then result is zero; //dp表示装满容量为i的背包所能装的最大的价值也就是重量； int[] dp = new int[target + 1]; for (int i = 0; i &lt; stones.length; i++) &#123; for (int j = target; j &gt;= stones[i]; j--) &#123; dp[j] = Math.max(dp[j],dp[j-stones[i]]+stones[i]); &#125; &#125; return sum-2*dp[target];//taget容量的背包最多能装下的 //一堆石头的总重量是dp[target]，另一堆就是sum - dp[target]。 //那么相撞之后剩下的最小石头重量就是 (sum - dp[target]) - dp[target]。 &#125;&#125; 本题其实和**[416. 分割等和子集]**几乎是一样的，只是最后对dp[target]的处理方式不同。 **[416. 分割等和子集]**相当于是求背包是否正好装满，而本题是求背包最多能装多少。 494. 目标和给你一个整数数组 nums 和一个整数 target 。 向数组中的每个整数前添加 &#39;+&#39; 或 &#39;-&#39; ，然后串联起所有整数，可以构造一个 表达式 ： 例如，nums = [2, 1] ，可以在 2 之前添加 &#39;+&#39; ，在 1 之前添加 &#39;-&#39; ，然后串联起来得到表达式 &quot;+2-1&quot; 。 返回可以通过上述方法构造的、运算结果等于 target 的不同 表达式 的数目。 示例 1： 12345678输入：nums = [1,1,1,1,1], target = 3输出：5解释：一共有 5 种方法让最终目标和为 3 。-1 + 1 + 1 + 1 + 1 = 3+1 - 1 + 1 + 1 + 1 = 3+1 + 1 - 1 + 1 + 1 = 3+1 + 1 + 1 - 1 + 1 = 3+1 + 1 + 1 + 1 - 1 = 3 12345678910111213141516171819202122class Solution &#123; public int findTargetSumWays(int[] nums, int target) &#123; // 01 背包，dp表示放到正数的一遍的方法， // p+d=s; p-d = t; p = s+t /2; int sum = 0; for (int num : nums) &#123; sum+=num; &#125; //如果二者相加小于0，显然是不行的 if ((sum+target)%2==1 ||(sum+target)/2&lt;0) return 0; int plus = (sum+target)/2; int[] dp = new int[plus + 1]; dp[0] =1; //找到和为plus的树木有多少种，装满这个plus的背包 for (int i = 0; i &lt; nums.length; i++) &#123; for (int j = plus; j &gt;=nums[i] ; j--) &#123; dp[j] += dp[j-nums[i]]; &#125; &#125; return dp[plus]; &#125;&#125; 完全背包纯完全背包的一维dp数组实现，先遍历物品还是先遍历背包都是可以的，且第二层for循环是从小到大遍历。 但是仅仅是纯完全背包的遍历顺序是这样的，题目稍有变化，两个for循环的先后顺序就不一样了。 如果求组合数就是外层for循环遍历物品，内层for遍历背包。 如果求排列数就是外层for遍历背包，内层for循环遍历物品。也就是不同的排序都算做新的方法就是求排列数 相关题目如下： 剑指 Offer II 104. 排列的数目给定一个由 不同 正整数组成的数组 nums ，和一个目标整数 target 。请从 nums 中找出并返回总和为 target 的元素组合的个数。数组中的数字可以在一次排列中出现任意次，但是顺序不同的序列被视作不同的组合。 题目数据保证答案符合 32 位整数范围。 示例 1： 123456789101112输入：nums = [1,2,3], target = 4输出：7解释：所有可能的组合为：(1, 1, 1, 1)(1, 1, 2)(1, 2, 1)(1, 3)(2, 1, 1)(2, 2)(3, 1)请注意，顺序不同的序列被视作不同的组合 dp[j] 表示：填满j（包括j）这么大容积的包，有dp[j]种方法 从递推公式可以看出，在初始化的时候dp[0] 一定要初始化为1，因为dp[0]是在公式中一切递推结果的起源，如果dp[0]是0的话，递推结果将都是0。 这里有录友可能认为从dp数组定义来说 dp[0] 应该是0，也有录友认为dp[0]应该是1。 其实不要硬去解释它的含义，咱就把 dp[0]的情况带入本题看看应该等于多少。 如果数组[0] ，target &#x3D; 0，那么 bagSize &#x3D; (target + sum) &#x2F; 2 &#x3D; 0。 dp[0]也应该是1， 也就是说给数组里的元素 0 前面无论放加法还是减法，都是 1 种方法。 所以本题我们应该初始化 dp[0] 为 1。 可能有同学想了，那 如果是 数组[0,0,0,0,0] target &#x3D; 0 呢。 其实 此时最终的dp[0] &#x3D; 32，也就是这五个零 子集的所有组合情况，但此dp[0]非彼dp[0]，dp[0]能算出32，其基础是因为dp[0] &#x3D; 1 累加起来的。 dp[j]其他下标对应的数值也应该初始化为0，从递推公式也可以看出，dp[j]要保证是0的初始值，才能正确的由dp[j - nums[i]]推导出来。 1234567891011121314151617181920class Solution &#123; public int combinationSum4(int[] nums, int target) &#123;// 背包问题，背包总的只能装target大小的东西// 顺序可以作为不同的组合dp[j] +=dp[j-nums[i]]; int[] dp = new int[target + 1]; dp[0] = 1; //完全背包（可以重复使用），求排列数（不同的排序都算方法） for (int i = 1; i &lt;= target; i++) &#123; // 先遍历背包，因为这个容器背包是1的时候，可以每一个nums都去遍历所以是组合 // 如果先去遍历物品，也就是nums的时候，那不就是没有顺序l for (int j = 0; j &lt; nums.length; j++) &#123; if (nums[j]&lt;=i)&#123; dp[i] += dp[i-nums[j]]; &#125; &#125; &#125; return dp[target]; &#125;&#125; 剑指 Offer II 103. 最少的硬币数目给定不同面额的硬币 coins 和一个总金额 amount。编写一个函数来计算可以凑成总金额所需的最少的硬币个数。如果没有任何一种硬币组合能组成总金额，返回 -1。 你可以认为每种硬币的数量是无限的。 示例 1： 123输入：coins = [1, 2, 5], amount = 11输出：3 解释：11 = 5 + 5 + 1 123456789101112131415161718class Solution &#123; public int coinChange(int[] coins, int amount) &#123; //无线硬币就是完全背包，组合数首先遍历物品，再遍历背包 int[] dp = new int[amount + 1]; //完全背包（可以重复使用），求组合（不同的排序不算方法） Arrays.fill(dp,Integer.MAX_VALUE); dp[0]=0; for (int i = 0; i &lt; coins.length; i++) &#123; for (int j = coins[i]; j &lt;= amount; j++) &#123; if(dp[j-coins[i]]!=Integer.MAX_VALUE)&#123; dp[j] = Math.min(dp[j],dp[j-coins[i]]+1); &#125;//最小的数 &#125; &#125; return dp[amount]==Integer.MAX_VALUE?-1:dp[amount]; &#125;&#125; Kadane’s Algorithm &#x2F; Kadene算法计算机历史上有一个非常经典的问题叫做Maximum-Subarray-Problem， 求数组的最大子序列，要求该子序列和为最大值，子序列应当连续。 比如 [−2, 1, −3, 4, −1, 2, 1, −5, 4]， 最大应该子序列为 [4, −1, 2, 1]。 暴力的解法是算出所有的子序列，然后求和，该方法的时间复杂度为O(n^2). Kadane’s Algorithm是求解该类问题的一个通法，原理是利用Dynamic Programming保存所有以i结尾的子序列的最大长度，dp公式为: 如果以i - 1为结尾的子序列最大值为负，那么不管怎么样，dp[i]就应该从头开始计数，因为前面的子序列已经不再有影响了(dp[i - 1] + nums[i]必然小于nums[i]) Leetcode里有两道经典的题目，用到了这个算法，分别为Leetcode53和Leetcode1186，Leetcode 53是这一算法的直接运用，代码如下： 1234567891011public int maxSubArray(int[] nums) &#123; int[] dp = new int[nums.length]; dp[0] = nums[0]; int res = dp[0]; for(int i = 1; i &lt; nums.length; i++)&#123; //如果前面的比0小，直接就不去取了 dp[i] = Math.max(dp[i - 1], 0) + nums[i]; res = Math.max(dp[i], res); &#125; return res; &#125; LeetCode 1186 给你一个整数数组，返回它的某个 非空 子数组（连续元素）在执行一次可选的删除操作后，所能得到的最大元素总和。换句话说，你可以从原数组中选出一个子数组，并可以决定要不要从中删除一个元素（只能删一次哦），（删除后）子数组中至少应当有一个元素，然后该子数组（剩下）的元素总和是所有子数组之中最大的。 注意，删除一个元素后，子数组 不能为空。 示例 1： 123输入：arr = [1,-2,0,3]输出：4解释：我们可以选出 [1, -2, 0, 3]，然后删掉 -2，这样得到 [1, 0, 3]，和最大。 Leetcode 1186是一个变式，基本思路不变，不过我们可以选择是否删除删除一个元素，显然，如果遇到负数，我们可以考虑将其删除，然后计算两头，对于第i个数字，如果它是负数，则计算以i - 1为结尾的最大子序列和以i + 1为开头的最大子序列，我们分别用dp1，dp2存储这两种状态，原理依旧是Kadane’s Algorithm。 从两头开始，分别算好，如果里面有负数，再去计算负数导致的可能存在的删除某个元素的情况。 123456789101112131415161718192021public int maximumSum(int[] arr) &#123; int[] dp1 = new int[arr.length]; int[] dp2 = new int[arr.length]; dp1[0] = arr[0]; int res = arr[0]; for(int i = 1; i &lt; arr.length; i++)&#123; dp1[i] = Math.max(dp1[i - 1], 0) + arr[i]; res = Math.max(res,dp1[i]); &#125; dp2[arr.length - 1] = arr[arr.length - 1]; for(int i = arr.length - 2; i &gt; -1; --i)&#123; dp2[i] = Math.max(dp2[i + 1], 0) + arr[i]; &#125; for(int i = 1; i &lt; arr.length - 1; i++)&#123; if(arr[i] &lt; 0) res = Math.max(dp1[i - 1] + dp2[i + 1], res); &#125; return res;&#125; 我的： 12345678910111213141516171819202122232425class Solution &#123; public int maximumSum(int[] arr) &#123; int[] dp1 = new int[arr.length];//存储从头开始的连续最大和 int[] dp2 = new int[arr.length];//存储从尾开始的连续最大和 int max = arr[0]; dp1[0]=arr[0]; for (int i = 1; i &lt; arr.length; i++) &#123; dp1[i]=Math.max(dp1[i-1],0)+arr[i]; max = Math.max(max,dp1[i]); &#125; System.out.println(&quot;dp1 = &quot; + Arrays.toString(dp1)); dp2[arr.length-1]=arr[arr.length-1];//最后一个位置赋值 for (int i = arr.length-2; i &gt;0; i--) &#123; dp2[i]=Math.max(dp2[i+1],0)+arr[i]; max = Math.max(max,dp2[i]); &#125; System.out.println(&quot;dp2 = &quot; + Arrays.toString(dp2)); for (int i = 1; i &lt; arr.length-1; i++) &#123; if (arr[i]&lt;0)&#123; max=Math.max(dp1[i-1]+dp2[i+1],max); &#125; &#125; return max; &#125;&#125; 并查集1234567891011121314151617181920212223242526int n = 1005; // 根据题意而定 int father[1005];// 并查集初始化void init() &#123; for (int i = 0; i &lt; n; ++i) &#123; father[i] = i; &#125;&#125;// 并查集里寻根的过程int find(int u) &#123; return u == father[u] ? u : father[u] = find(father[u]);&#125;// 将v-&gt;u 这条边加入并查集void join(int u, int v) &#123; u = find(u); v = find(v); if (u == v) return ; father[v] = u;&#125;// 判断 u 和 v是否找到同一个根bool same(int u, int v) &#123; u = find(u); v = find(v); return u == v;&#125; 滑动窗口在 Java 中，可以通过双指针的方式来实现滑动窗口算法，这里给出一个示例代码： 123456789101112131415161718public int slidingWindow(int[] nums, int target) &#123; int left = 0, right = 0; int sum = 0, minLen = Integer.MAX_VALUE; while (right &lt; nums.length) &#123; sum += nums[right]; while (sum &gt;= target) &#123; minLen = Math.min(minLen, right - left + 1); sum -= nums[left]; left++; &#125; right++; &#125; return minLen == Integer.MAX_VALUE ? 0 : minLen;&#125; 以上代码实现了一个求取数组中最短连续子数组长度的问题，其时间复杂度为 $O(n)$，其中 left 和 right 分别代表滑动窗口的左右指针，sum 为滑动窗口中元素之和，minLen 为最短连续子数组的长度。 在双指针算法中，常常需要使用嵌套循环，其中外层循环为右指针移动，内层循环为左指针移动，直到找到符合要求的结果。在内循环中，要注意移动左指针时的细节处理，此外还需要注意边界条件控制。 双指针判断回文数 1234567boolean isPali(String s,int begin,int end) &#123; for (int i = begin, j = end; i &lt; j; i++, j--) &#123; if (s.charAt(i)!=s.charAt(j)) return false; &#125; return true;&#125; 680. 验证回文串 II判断回文串时，允许删除 1 个字符。 给定一个非空字符串 s，请判断如果 最多 从字符串中删除一个字符能否得到一个回文字符串。 示例 1: 12输入: s = &quot;aba&quot;输出: true 也就是说，在双指针相向遍历时，当 s[left]\\&#x3D;s[right] 我们有且仅有一次跳过的机会： 可以跳过 left 指针指向的元素，继续 [left+1⟶,right⟵]； 也可以跳过 right 指针指向的元素，继续 [left⟶,right−1⟵]。 两种情况中，只要有一个判定被为回文串，那么 s 就是合法的回文串。 12345678910111213141516171819202122232425class Solution &#123; public boolean validPalindrome(String s) &#123; int left = 0; int right = s.length()-1; while (left&lt;right)&#123; if (s.charAt(left)!=s.charAt(right))&#123; return validSub(s,left+1,right) || validSub(s,left,right-1); &#125;else &#123; left++; right--; &#125; &#125; return true; &#125; boolean validSub(String s,int left,int right) &#123; while (left&lt;right)&#123; if (s.charAt(left)!=s.charAt(right)) return false; left++; right--; &#125; return true; &#125;&#125; 缩短版: 12345678910111213141516class Solution &#123; public boolean validPalindrome(String s) &#123; int start = 0,end=s.length()-1; for(int i= start,j=end;i&lt;j;i++,j--)&#123; if(s.charAt(i)!=s.charAt(j)) return isPali(s,i,j-1)||isPali(s,i+1,j); &#125; return true; &#125; private boolean isPali(String s,int start,int end)&#123; for(int i= start,j=end;i&lt;j;i++,j--)&#123; if(s.charAt(i)!=s.charAt(j)) return false; &#125; return true; &#125;&#125; 26. 删除有序数组中的重复项难度简单3158收藏分享切换为英文接收动态反馈 给你一个 升序排列 的数组 nums ，请你** 原地** 删除重复出现的元素，使每个元素 只出现一次 ，返回删除后数组的新长度。元素的 相对顺序 应该保持 一致 。然后返回 nums 中唯一元素的个数。 考虑 nums 的唯一元素的数量为 k ，你需要做以下事情确保你的题解可以被通过： 更改数组 nums ，使 nums 的前 k 个元素包含唯一元素，并按照它们最初在 nums 中出现的顺序排列。nums 的其余元素与 nums 的大小不重要。 返回 k 。 示例 1： 输入：nums &#x3D; [1,1,2]输出：2, nums &#x3D; [1,2,_]解释：函数应该返回新的长度 2 ，并且原数组 nums 的前两个元素被修改为 1, 2 。不需要考虑数组中超出新长度后面的元素。 123456789101112131415161718class Solution &#123; public int removeDuplicates(int[] nums) &#123; //返回不重复的部分的长度，就是可以把重复的放在最后 int slow = 0;//最后返回这个就可以了 int fast = 1; while (fast&lt;nums.length)&#123; //fast在前面标记为可以交换的元素 if (nums[slow] == nums[fast]) fast++; else &#123;//找到不一样的之后再进行slow前进 slow++; nums[slow]=nums[fast]; fast++; &#125; &#125; return slow+1; &#125;&#125; 统计连续子数组个数给定一个正整数数组 nums和整数 k ，请找出该数组内乘积小于 k 的连续的子数组的个数。 示例 1: 1234输入: nums = [10,5,2,6], k = 100输出: 8解释: 8 个乘积小于 100 的子数组分别为: [10], [5], [2], [6], [10,5], [5,2], [2,6], [5,2,6]。需要注意的是 [10,5,2] 并不是乘积小于100的子数组。 示例 2: 12输入: nums = [1,2,3], k = 0输出: 0 提示: 1 &lt;= nums.length &lt;= 3 * 104 1 &lt;= nums[i] &lt;= 1000 0 &lt;= k &lt;= 106 注意：本题与主站 713 题相同：https://leetcode-cn.com/problems/subarray-product-less-than-k/ 123456789101112131415161718class Solution &#123; public int numSubarrayProductLessThanK(int[] nums, int k) &#123; //滑动窗口 //使用一个变量 cur 记录当前窗口的乘积，使用两个变量 j 和 i 分别代表当前窗口的左右端点。 int len = nums.length; int ans = 0; if (k&lt;=1) return 0; for (int i = 0, j = 0, cur = 1; i &lt; len; i++) &#123; cur*=nums[i]; // 当 cur&gt;=k 时，我们考虑将左端点 j 右移，同时消除原来左端点元素 nums[j] 对 cur 的贡献， // 直到 cur&gt;=k 不再满足，这样我们就可以得到每个右端点 nums[i] 的最远左端点 nums[j] while (cur&gt;=k) cur/=nums[j++]; ans+=i-j+1; &#125; return ans; //请找出该数组内乘积小于 k 的连续的子数组的个数。 &#125;&#125; offer || 014 是否包含 s1 的某个变位词。给定两个字符串 s1 和 s2，写一个函数来判断 s2 是否包含 s1 的某个变位词。 换句话说，第一个字符串的排列之一是第二个字符串的 子串 。 示例 1： 123输入: s1 = &quot;ab&quot; s2 = &quot;eidbaooo&quot;输出: True解释: s2 包含 s1 的排列之一 (&quot;ba&quot;). 示例 2： 12输入: s1= &quot;ab&quot; s2 = &quot;eidboaoo&quot;输出: False 提示： 1 &lt;= s1.length, s2.length &lt;= 104 s1 和 s2 仅包含小写字母 注意：本题与主站 567 题相同： https://leetcode-cn.com/problems/permutation-in-string/ 12345678910111213141516171819202122232425class Solution &#123; public boolean checkInclusion(String s1, String s2) &#123; int l1 = s1.length(); int l2 = s2.length(); int[] list1 = new int[26]; int[] list2 = new int[26]; if (l2&lt;l1) return false; //// 同时填充两个字符表，其中alpha1填充完毕，alpha2只填充了前面一部分。 for (int i = 0; i &lt; l1; i++) &#123; list1[s1.charAt(i)-&#x27;a&#x27;]++; list2[s2.charAt(i)-&#x27;a&#x27;]++; &#125; if (Arrays.equals(list1,list2)) return true; for (int i = l1; i &lt; l2; i++) &#123; //窗口右边新来的加加// 窗口左边要排除的渐渐 list2[s2.charAt(i)-&#x27;a&#x27;]++; list2[s2.charAt(i-l1)-&#x27;a&#x27;]--;//注意这里，因为有i-li所以要额外写一个遍历 // 判断当前状态下，s2窗口中的字符是否和s1的字符种类和数量都一致。 // Arrays.equals() 是通过遍历判断的，自己些for也一样。 if (Arrays.equals(list2,list1)) return true; &#125; return false; &#125;&#125; 滑动窗口统计变位词给定两个字符串 s 和 p，找到 s 中所有 p 的 变位词 的子串，返回这些子串的起始索引。不考虑答案输出的顺序。 变位词 指字母相同，但排列不同的字符串。 示例 1： 12345输入: s = &quot;cbaebabacd&quot;, p = &quot;abc&quot;输出: [0,6]解释:起始索引等于 0 的子串是 &quot;cba&quot;, 它是 &quot;abc&quot; 的变位词。起始索引等于 6 的子串是 &quot;bac&quot;, 它是 &quot;abc&quot; 的变位词。 1234567891011121314151617181920class Solution &#123; public List&lt;Integer&gt; findAnagrams(String s, String p) &#123; ArrayList&lt;Integer&gt; ans = new ArrayList&lt;&gt;(); if (p.length()&gt;s.length()) return ans; int[] listp = new int[26]; int[] lists = new int[26]; for (int i = 0; i &lt; p.length(); i++) &#123; listp[p.charAt(i)-&#x27;a&#x27;]++; lists[s.charAt(i)-&#x27;a&#x27;]++; &#125; if (Arrays.equals(listp,lists)) ans.add(0); for (int i = p.length(); i &lt; s.length(); i++) &#123; lists[s.charAt(i)-&#x27;a&#x27;]++; lists[s.charAt(i-p.length())-&#x27;a&#x27;]--; if (Arrays.equals(listp,lists)) ans.add(i-p.length()+1); &#125; return ans; &#125;&#125; 前缀和算法和大于等于target的连续子数组 和下面一样的题给定一个含有 n 个正整数的数组和一个正整数 target 。 找出该数组中满足其和 ≥ target 的长度最小的 连续子数组 [numsl, numsl+1, ..., numsr-1, numsr] ，并返回其长度。如果不存在符合条件的子数组，返回 0 。 示例 1： 123输入：target = 7, nums = [2,3,1,2,4,3]输出：2解释：子数组 [4,3] 是该条件下的长度最小的子数组。 示例 2： 12输入：target = 4, nums = [1,4,4]输出：1 12345678910111213141516171819202122232425class Solution &#123; public int minSubArrayLen(int target, int[] nums) &#123; int[] preSum = new int[nums.length+1]; preSum[0]=0; for (int i = 0; i &lt; nums.length; i++) &#123; preSum[i+1] = preSum[i]+nums[i]; &#125; int left = 0; int right = 1; int res = Integer.MAX_VALUE; while (right&lt;=nums.length) &#123; if (preSum[right]-preSum[left]&gt;=target)&#123; res = Math.min(right-left,res); left++; right=left; &#125;else right++; &#125; if (res==Integer.MAX_VALUE)&#123; return 0; &#125;else return res; &#125;&#125; 12345678910111213141516171819202122232425262728class Solution &#123; public int minSubArrayLen(int target, int[] nums) &#123; int[] preSum = new int[nums.length+1]; preSum[0]=0; for (int i = 0; i &lt; nums.length; i++) &#123; preSum[i+1] = preSum[i]+nums[i]; &#125; int res = Integer.MAX_VALUE; for (int i = 1; i &lt;= nums.length; i++) &#123; // 前缀和数组下标 [0,i] 范围内找到满足「值小于等于 s−target」 // 的最大下标，充当子数组左端点的前一个值。 // 左边的范围小于等于，那么就是说preSum[i]-preSum[left]&gt;=target int s = preSum[i],d = s-target; int left = 0, right = i; while (left&lt;right)&#123; int mid = (left+right+1)&gt;&gt;1; if (preSum[mid]&lt;=d) left=mid;//如果中间的前缀和小于需要的。 else right = mid -1; &#125; if (preSum[right]&lt;=d) res = Math.min(res,i-right); &#125; if (res==Integer.MAX_VALUE)&#123; return 0; &#125;else return res; &#125;&#125; offer010 和为k的子数组个数给定一个整数数组和一个整数 k ，请找到该数组中和为 k 的连续子数组的个数。 示例 1： 123输入:nums = [1,1,1], k = 2输出: 2解释: 此题 [1,1] 与 [1,1] 为两种不同的情况 示例 2： 12输入:nums = [1,2,3], k = 3输出: 2 提示: 1 &lt;= nums.length &lt;= 2 * 104 统计以每一个 nums[i] 为结尾，和为 k 的子数组数量即是答案。 我们可以预处理前缀和数组 sum（前缀和数组下标默认从 1 开始），对于求解以某一个nums[i] 为结尾的，和为 k 的子数组数量，本质上是求解在 [0,i] 中，sum 数组中有多少个值为 sum[i+1]−k 的数，这可以在遍历过程中使用「哈希表」进行同步记录。 sum是从最左边到当i 的位置的，HashMap存储的是从前到后，的值，看图理解一下： 123456789101112131415161718class Solution &#123; public int subarraySum(int[] nums, int k) &#123; int n = nums.length, ans = 0; int[] pre = new int[n+1]; for (int i = 0; i &lt; n; i++) &#123; pre[i+1] = pre[i] + nums[i]; &#125; HashMap&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;(); map.put(0,1); for (int i = 1; i &lt;= n; i++) &#123; int tmp = pre[i], d = tmp-k;//求解在 [0,i] 中， // pre 数组中有多少个值为 pre[i+1]−k 的数， ans+=map.getOrDefault(d,0);//看看有无目标的值 map.put(tmp,map.getOrDefault(tmp,0)+1); &#125; return ans; &#125;&#125; 剑指 Offer II 011. 0 和 1 个数相同的子数组给定一个二进制数组 nums , 找到含有相同数量的 0 和 1 的最长连续子数组，并返回该子数组的长度。 示例 1： 123输入: nums = [0,1]输出: 2说明: [0, 1] 是具有相同数量 0 和 1 的最长连续子数组。 示例 2： 123输入: nums = [0,1,0]输出: 2说明: [0, 1] (或 [1, 0]) 是具有相同数量 0 和 1 的最长连续子数组。 1234567891011121314151617181920212223242526class Solution &#123; public int findMaxLength(int[] nums) &#123; int len = nums.length; int ans = 0; int[] pre = new int[len + 1]; HashMap&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;(); //「某个前缀和出现的最小下标」 map.put(0,0); for (int i = 0; i &lt; len; i++) &#123; pre[i+1] = pre[i]+(nums[i]==0?-1:1); //将 nums[i] 为 0 的值当做 −1 处理。 &#125; for (int i = 1; i &lt;= len; i++) &#123; int t = pre[i]; if (map.containsKey(t)) // get(t)的目的是，是前缀和，所以找到相同的t的时候， // 区间之间长度就是0了 ans = Math.max(ans,i-map.get(t));// 每遍历一个元素，就用「当前前缀和」去前面已经统计的前缀和// 中找到一个使得两者之间区间为0的，并计算这个区间长度 else map.put(t,i); &#125; return ans; &#125;&#125; 304. 二维区域和检索 - 矩阵不可变-二维前缀和算法二维前缀和算法 给定一个二维矩阵 matrix，以下类型的多个请求： 计算其子矩形范围内元素的总和，该子矩阵的左上角为 (row1, col1) ，右下角为 (row2, col2) 。 实现 NumMatrix 类： NumMatrix(int[][] matrix) 给定整数矩阵 matrix 进行初始化 int sumRegion(int row1, int col1, int row2, int col2) 返回左上角 (row1, col1) 、右下角 (row2, col2) 的子矩阵的元素总和。 12345678910111213141516171819class NumMatrix &#123; int[][] matrix = null; int[][] sum = null; public NumMatrix(int[][] matrix) &#123; this.matrix=matrix; int m = matrix.length; int n = matrix[0].length; sum=new int[m +1][n +1]; for (int i = 0; i &lt;m ; i++) &#123; for (int j = 0; j &lt; n; j++) &#123; sum[i+1][j+1]=sum[i][j+1]+sum[i+1][j]-sum[i][j]+matrix[i][j]; &#125; &#125; &#125; public int sumRegion(int row1, int col1, int row2, int col2) &#123; return sum[row2+1][col2+1]-sum[row1][col2+1]-sum[row2+1][col1]+sum[row1][col1]; &#125;&#125; 算数运算进位与非进位设两数字的二进制形式 ,观察发现，无进位和 与 异或运算 规律相同，进位 和 与运算 规律相同（并需左移一位）。 1234567891011121314151617181920212223242526272829// 设两数字的二进制形式a、b, 其求和s = a + b, a(i)代表a的二进制第i位, 则分为以下四种情况:// a(i) b(i) 无进位和n(i) 进位c(i+1)// 0 0 0 0// 0 1 1 0// 1 0 1 0 // 1 1 0 1// // 观察发现，无进位和与&quot;异或运算&quot;规律相同，进位和&quot;与运算&quot;规律相同(并需左移一位)// 因此,无进位和n与进位c的计算公式如下:// n = a ^ b 非进位和: 异或运算// c = (a &amp; b) &lt;&lt; 1 进位: 与运算+左移一位// 因为 (和s) = (非进位和n) + (进位c) ，所以即可将 s = a + b 转化为 s = n + c ，即 s = a ^ b + (a &amp; b) &lt;&lt; 1// // 采用递归思想: 虽然s = a + b = n + c，但是n + c还是用了&#x27;+&#x27;，因此我们对n + c再次采用这种运算 (也就是把n当成a，c当成b，继续做a+b运算。看似无限循环，但是进位c总会有等于0的时候，此时结果就等于n)// 非递归同理，循环求n和c，直至进位c = 0; 此时s = n, 返回n即可。class Solution &#123; public int add(int a, int b) &#123; // a的二进制表示与b的二进制， // 每一位取异或运算，得到无进位和的结果，每一位取与运算，左移&lt;&lt;一位，得到进位， // 不用担心整数转二进制，因为他就是默认就是二进制存取的直接去&amp;就可以了 while(b!=0)&#123; int c = (a&amp;b)&lt;&lt;1;//进位，左移一位 a = a ^ b;//非进位和 b=c;//当进位为0的时候就可以不需要进位，直接非进位和就可以了 &#125; return a; &#125;&#125; 不用除法的除法：倍增求解给你两个整数，被除数 dividend 和除数 divisor。将两数相除，要求 不使用 乘法、除法和取余运算。 整数除法应该向零截断，也就是截去（truncate）其小数部分。例如，8.345 将被截断为 8 ，-2.7335 将被截断至 -2 。 返回被除数 dividend 除以除数 divisor 得到的 商 。 注意：假设我们的环境只能存储 32 位 有符号整数，其数值范围是 [−231, 231 − 1] 。本题中，如果商 严格大于 231 − 1 ，则返回 231 − 1 ；如果商 严格小于 -231 ，则返回 -231 。 123456789101112131415161718192021222324252627class Solution &#123; public int divide(int dividend, int divisor) &#123; if(dividend==Integer.MIN_VALUE &amp;&amp; divisor == -1) return Integer.MAX_VALUE; //返回完异常值 //倍增法，每次减去一个2^x倍 boolean sign = false; if((dividend&gt;0&amp;&amp;divisor&gt;0)||(dividend&lt;0&amp;&amp;divisor&lt;0)) sign = true;//正数标记 dividend = dividend &gt; 0? -dividend:dividend; divisor = divisor &gt; 0? -divisor:divisor; int ans = 0; //dividend / divisor while(dividend&lt;=divisor)&#123; int tmp = divisor,count =1; //tmp + tmp &gt;= dividend while(tmp&gt;=dividend-tmp)&#123; tmp+=tmp; count+=count; &#125; dividend = dividend - tmp; ans = ans+count; &#125; return sign?ans:-ans; &#125;&#125; 剑指 Offer II 003. 前 n 个数字二进制中 1 的个数12345如果我们是使用「朴素解法」求解的话，无论是从高位进行统计，还是从低位进行统计，最后一位扫描的都是边缘的数（如果是 1 就计数，不是 1 就不计数）。从低位到高位，最后一步在扫描最高位之前，统计出 1 的个数应该等同于将 i 左移一位，并在最低位补 0，也就是等于 ans[i &lt;&lt; 1]，这时候就要求我们在计算 i 的时候 i &lt;&lt; 1 已经被算出来（从大到小遍历）从高位到低位，最后一步在扫描最低位之前，统计出 1 的个数应该等同于将 i 右移一位，并在最高位补 0，也就是等于 ans[i &gt;&gt; 1]，这时候就要求我们在计算 i 的时候 i &gt;&gt; 1 已经被算出来（从小到大遍历） 123456789class Solution &#123; public int[] countBits(int n) &#123; int[] res = new int[n+1]; for(int i=1;i&lt;n+1;i++) //res[i] = 「i &gt;&gt; 1 所包含的 1 的个数」+「i 的最低位是否为 1」 res[i] = res[i&gt;&gt;1] + (i&amp;1); return res; &#125;&#125; 剑指 Offer II 004. 只出现一次的数字 给你一个整数数组 nums ，除某个元素仅出现 一次 外，其余每个元素都恰出现 三次 。请你找出并返回那个只出现了一次的元素。 示例 1： 12输入：nums = [2,2,3,2]输出：3 示例 2： 12输入：nums = [0,1,0,1,0,1,100]输出：100 提示： 1 &lt;= nums.length &lt;= 3 * 104 -231 &lt;= nums[i] &lt;= 231 - 1 nums 中，除某个元素仅出现 一次 外，其余每个元素都恰出现 三次 进阶：你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？ 哈希表解法的空间复杂度是 O(n) 的，而题目的【进阶】部分提到应当使用常数空间来做。 其中一个比较容易想到的做法，是利用int类型固定为 32 位。 使用一个长度为 32 的数组 cnt[] 记录下所有数值的每一位共出现了多少次 1，再对cnt[] 数组的每一位进行mod 3 操作，重新拼凑出只出现一次的数值。 举个 🌰，考虑样例 [1,1,1,3]，1 和 3 对应的二进制表示分别是 00..001 和 00..011，存入 cnt[] 数组后得到 [0,0,...,0,1,4]。进行 mod 3 操作后得到 [0,0,...,0,1,1]，再转为十进制数字即可得「只出现一次」的答案 3。 123456789101112131415161718192021class Solution &#123; public int singleNumber(int[] nums) &#123;// 出现了三次，那么取模3，应该就是等于0； int[] cnt = new int[32]; for (int num : nums) &#123; for (int i = 0; i &lt; 32; i++) &#123; if(((num&gt;&gt;i) &amp; 1)==1)&#123; cnt[i]++;// 如果当前元素右移i个单位是1的话，就在cnt加加 &#125; &#125; &#125; int ans = 0; for (int i = 0; i &lt; 32; i++) &#123; if (cnt[i]%3==1)// mod 3 之后，其实也不会出现2，因为mod 3 就是去掉了重复3次的， ans+=(1&lt;&lt;i); &#125; return ans; &#125;&#125; 剑指 Offer II 005. 单词长度的最大乘积-位运算给定一个字符串数组 words，请计算当两个字符串 words[i] 和 words[j] 不包含相同字符时，它们长度的乘积的最大值。假设字符串中只包含英语的小写字母。如果没有不包含相同字符的一对字符串，返回 0。 示例 1: 123输入: words = [&quot;abcw&quot;,&quot;baz&quot;,&quot;foo&quot;,&quot;bar&quot;,&quot;fxyz&quot;,&quot;abcdef&quot;]输出: 16 解释: 这两个单词为 &quot;abcw&quot;, &quot;fxyz&quot;。它们不包含相同字符，且长度的乘积最大。 根据题意进行模拟即可，利用每个 word**s[i] 只有小写字母，且只需要区分两字符是否有字母重复。 我们可以使用一个 int 来代指某个 word[i]：低 26 来代指字母 a-z 是否出现过。 然后对每个「字符对」所对应的两个 int 值执行 &amp; 操作（若两字符无重复字符，则结果为 0），并得出最终答案。 位运算：比较两个字符串不相同 123456789101112131415161718192021222324252627class Solution &#123; public int maxProduct(String[] words) &#123;// 位运算，进行&amp;操作，如果两个字符有重复的字符马，那么就是1，无重复的就是0 int length = words.length; int idx = 0; int[] masks = new int[length]; for (String word : words) &#123; int t = 0; for (int i = 0; i &lt; word.length(); i++) &#123; int u = word.charAt(i)-&#x27;a&#x27;; t |= (1&lt;&lt;u); &#125;// 对每一个word进行或运算，计算1左移u位的，// 则 abc 可以表示为 111 def 可以表示为 111000 masks[idx++] = t; &#125; int ans = 0; for (int i = 0; i &lt; length; i++) &#123; for (int j = 0; j &lt; i; j++) &#123;// // 如果两个字符串不包含相同元素 那么与运算肯定为 0 if ((masks[i]&amp;masks[j])==0) ans = Math.max(ans, words[i].length() * words[j].length()); &#125; &#125; return ans; &#125;&#125; 剑指 Offer II 070. 排序数组中只出现一次的数字难度中等61收藏分享切换为英文接收动态反馈 给定一个只包含整数的有序数组 nums ，每个元素都会出现两次，唯有一个数只会出现一次，请找出这个唯一的数字。 你设计的解决方案必须满足 O(log n) 时间复杂度和 O(1) 空间复杂度。 示例 1: 12输入: nums = [1,1,2,3,3,4,4,8,8]输出: 2 12345678910111213141516171819class Solution &#123; public int singleNonDuplicate(int[] nums) &#123; int left = 0; int right = nums.length-1; while(left&lt;right)&#123; int mid = (left+right)/2; if(nums[mid]==nums[mid^1])&#123; left = mid+1; //如果mid是奇数，那么异或1的结果是mid-1；所以就相当于是比较mid和mid-1是否是一样的 // 由于前偶后奇相等，顺序是对的，所以缩小范围，left = mid+1； //如果mid是偶数，那么异或1的结果是mid+1；所以就相当于是比较mid和mid+1是否是一样的 // 由于前偶后奇相等，顺序是对的，所以缩小范围，left = mid+1； &#125;else right = mid; &#125; return nums[left]; &#125;&#125; 43. 字符串相乘给定两个以字符串形式表示的非负整数 num1 和 num2，返回 num1 和 num2 的乘积，它们的乘积也表示为字符串形式。 注意：不能使用任何内置的 BigInteger 库或直接将输入转换为整数。 示例 1: 12输入: num1 = &quot;2&quot;, num2 = &quot;3&quot;输出: &quot;6&quot; 示例 2: 12输入: num1 = &quot;123&quot;, num2 = &quot;456&quot;输出: &quot;56088&quot; 12345678910111213141516171819202122232425262728293031323334353637class Solution &#123; public String multiply(String num1, String num2) &#123; if (num1.equals(&quot;0&quot;) || num2.equals(&quot;0&quot;)) return &quot;0&quot;; String res = &quot;0&quot;; for (int i = num2.length()-1; i &gt;=0 ; i--) &#123; int carry = 0;//纪录进位 StringBuilder sb = new StringBuilder(); for (int j = 0; j &lt; num2.length()-1-i; j++) &#123; sb.append(0);//sb是逆序的，因此，假如说是第2个num2的数字，那就是sb代表的数字要进10。 &#125; int n2 = num2.charAt(i)-&#x27;0&#x27;; //num2的第i位数字与num1想成 for (int j = num1.length()-1; j &gt;=0 || carry!=0; j--) &#123; int n1 = j&lt;0?0:num1.charAt(j)-&#x27;0&#x27;; int product = (n1*n2+carry)%10; sb.append(product); carry = (n1*n2+carry)/10; &#125; res = addStrings(res,sb.reverse().toString()); &#125; return res; &#125; private String addStrings(String num1,String num2)&#123; StringBuilder sb = new StringBuilder(); int carry = 0; for (int i = num1.length()-1,j = num2.length()-1; i &gt;=0 || j&gt;=0||carry!=0 ; i--,j--) &#123; int x = i&lt;0?0:num1.charAt(i)-&#x27;0&#x27;; int y = j&lt;0?0:num2.charAt(j)-&#x27;0&#x27;; int sum = (x+y+carry)%10; sb.append(sum); carry = (x+y+carry)/10; &#125; return sb.reverse().toString(); &#125;&#125; 实现两个字符串相加123456789101112131415private String addStrings(String num1,String num2)&#123; StringBuilder sb = new StringBuilder(); int carry = 0; for (int i = num1.length()-1,j = num2.length()-1; i &gt;=0 || j&gt;=0||carry!=0 ; i--,j--) &#123; int x = i&lt;0?0:num1.charAt(i)-&#x27;0&#x27;; int y = j&lt;0?0:num2.charAt(j)-&#x27;0&#x27;; int sum = (x+y+carry)%10; sb.append(sum); carry = (x+y+carry)/10; &#125; return sb.reverse().toString(); &#125; 50. Pow(x, n)实现 pow(x, n) ，即计算 x 的整数 n 次幂函数（即，xn ）。 示例 1： 12输入：x = 2.00000, n = 10输出：1024.00000 1234567891011121314151617181920212223class Solution &#123; public double myPow(double x, int n) &#123; //快速幂，二进制 //x^9 = (x^1) * (x^0*2) * (x^0*4) * (x^1*8) //就是9的二进制 1 0 0 1 然后乘以对应的2^(i-1) if (x == 0.0f) return 0.0d; long b = n; double res = 1.0; if (b &lt; 0) &#123; x = 1/x; b = -b; &#125; //x^n = (x^2) ^ (n/2),将指数n除以二，如果是偶数则正常，如果是奇数，由于是向下取整，所以后面多乘以x while (b &gt; 0) &#123; if ((b&amp;1) == 1) res *= x; //对b取余数，b%2 = b&amp;1; //当 n 为奇数时，二分后会多出一项 x 。所以要多乘一次x x *= x;//x的平方 b&gt;&gt;=1; &#125; return res; &#125;&#125; 66.加一给定一个由 整数 组成的 非空 数组所表示的非负整数，在该数的基础上加一。 最高位数字存放在数组的首位， 数组中每个元素只存储单个数字。 你可以假设除了整数 0 之外，这个整数不会以零开头。 示例 1： 123输入：digits = [1,2,3]输出：[1,2,4]解释：输入数组表示数字 123。 1234567891011121314151617class Solution &#123; public int[] plusOne(int[] digits) &#123; int len = digits.length; for (int i = len -1; i &gt;= 0; i--) &#123; digits[i]++; digits[i]%=10; if (digits[i]!=0) return digits; &#125; digits = new int[len+1];// for (int digit : digits) &#123;// System.out.println(digit);//其实此时所有位置都是零了// &#125; digits[0] = 1; return digits; &#125;&#125;ƒ 求解最大公约数GCD在Java中，求两个数的最大公约数（Greatest Common Divisor, GCD）可以通过多种方法实现，最常用的是辗转相除法（也称为欧几里得算法）。这种方法基于一个定理：两个整数的最大公约数等于其中较小数和两数相除余数的最大公约数。下面是使用辗转相除法在Java中计算两个数最大公约数的示例代码： 123456789101112131415161718public class Main &#123; public static void main(String[] args) &#123; int num1 = 60; int num2 = 48; System.out.println(&quot;The GCD of &quot; + num1 + &quot; and &quot; + num2 + &quot; is: &quot; + gcd(num1, num2)); &#125; // 使用辗转相除法求最大公约数 public static int gcd(int a, int b) &#123; while (b != 0) &#123; int temp = b; b = a % b; a = temp; &#125; return a; &#125;&#125;","tags":["back-end,algo"]},{"title":"hexo 搭建指南","path":"/2024/04/07/Welcom-to-hexo/","content":"HEXO部署前言参考：https://zz2summer.github.io/github-hexo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/ 正文环境准备 node.js git 这两个应用windows用户直接搜索下载安装就可以。如果习惯了使用linux命令的朋友，推荐windows神器cmder。可以直接在windows环境下使用linux命令，样式可调，再也不要用黑乎乎的cmd了，而且自带git，完全可以不用下载windows git。 正式安装hexohexo官方中文文档 在node.js安装好的前提下，全局安装hexo如何判断node.js是否安装成功？执行以下命令，如果能够看到版本号则说明安装成功了 1node -v 安装hexo 1npm install -g hexo-cli npm安装卡住 执行 npm config set registry https://registry.npmmirror.com/ 完成之后如果下载还是有问题，可以执行 npm set strict-ssl false， 然后就可以了npm i了 自选合适的目录，新建文件夹&lt;folder&gt; 123cd &lt;folder&gt;hexo initnpm install 不再赘述，直接看官方文档。 配置github新建仓库，仓库名必须为**[your_name.github.io]** 补充：本地配置github ssh连接，方便自动部署，以及clone你喜欢的主题(theme) windows用户直接在c:/用户/youername/.ssh/下查看是否有id_rsa.pub文件。没有的话命令行执行命令ssh-keygen -t rsa -C &quot;your eamil&quot;，会自动生成id_rsa.pub文件，打开后复制。 github-&gt;头像-&gt;Settings→SSH kyes→Add SSH key，粘贴复制的内容。 配置本地账户 12git config --global user.name “your_username” #设置用户名git config --global user.email “your_email” #设置邮箱地址,最好使用注册邮箱地址 测试是否配置成功 1ssh -T git@github.com hexo配置以及使用有两个配置文件： 一个是根目录下的_config.yml称为站点配置文件 一个是themes/landscape/_config.yml称为主题配置文件(默认主题：landscape) 站点配置如下： 1234567url: https://yourname.github.io/theme: landscape #选择你想用的主题，我用的是indigodeploy: type: git # 不要使用github repo: git@github.com:pengwenwu/pengwenwu.github.io.git # 使用ssh连接 branch: master # 默认master分支 message: add new blog # 自动部署commit备注，可不填 Hexo快速启动文章hexo s 写文章、发布文章 首先在博客根目录下安装一个扩展npm i hexo-deployer-git。 然后输入hexo new post “article title”，新建一篇文章。 然后打开H:\\blog\\source_posts的目录，可以发现下面多了一个article-title.md文件，就是文章文件。 编写完markdown文件后，根目录下输入hexo g生成静态网页，然后输入hexo s可以本地预览效果， 最后输入hexo d上传到github上。这时打开你的github.io主页就能看到发布的文章啦。 hexo常用命令hexo命令参考 hexo n &quot;我的博客&quot; &#x3D;&#x3D; hexo new &quot;我的博客&quot; #新建文章hexo p &#x3D;&#x3D; hexo publishhexo g &#x3D;&#x3D; hexo generate #生成hexo s &#x3D;&#x3D; hexo server #启动服务本地预览hexo d &#x3D;&#x3D; hexo deploy #部署hexo clean #清除缓存 网页正常情况下可以忽略此条命令 hexo server #Hexo 会监视文件变动并自动更新，您无须重启服务器。hexo server -s #静态模式hexo server -p 5000 #更改端口hexo server -i 192.168.1.1 #自定义 IP 在执行之前，记得安装自动部署 (–save 加不加的区别在于是否写入到依赖文件package.json中) 1npm install hexo-deployer-git --save 正常本地预览，直接执行hexo s,如果要发布话最好执行clean命令，会去删除生成的public文件，完整部署命令:hexo clean &amp;&amp; hexo g &amp;&amp; hexo d。或者直接hexo d -g 问题描述： 先是出现错误：error：spawn failed... 然后经过一些博客的操作会出现以下问题：fatal: cannot lock ref &#39;HEAD&#39;: unable to resolve reference HEAD: Invalid argument error: src refspec 或者：error: src refspec HEAD does not match any.等等 总结一下：问题大多是因为git 进行push或者hexo d的时候改变了一些.deploy_git文件下的内容。 解决办法： 删除.deploy_git文件夹; 输入git config --global core.autocrlf false 然后，依次执行：hexo cleanhexo ghexo d"},{"title":"Hello World","path":"/2024/04/07/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment"},{"title":"about","path":"/about/index.html","content":"个人介绍页面 constructing…."}]